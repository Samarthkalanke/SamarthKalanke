{
  
    
        "post0": {
            "title": "Title",
            "content": ". toc: true layout: post description: My week 7 hacks about a KFC API by location. categories: [markdown] . title: KFC API Hacks . KFC API Hacks . import requests url = &quot;https://kfc-locations.p.rapidapi.com/kfc/location/state/AZ/0&quot; headers = { &quot;X-RapidAPI-Key&quot;: &quot;8e39206459msh63119b14325b472p1a320bjsnac696cb1d4af&quot;, &quot;X-RapidAPI-Host&quot;: &quot;kfc-locations.p.rapidapi.com&quot; } response = requests.request(&quot;GET&quot;, url, headers=headers) print(response.json()) . {&#39;message&#39;: &#39;You have exceeded the MONTHLY quota for Requests on your current plan, BASIC. Upgrade your plan at https://rapidapi.com/makingdatameaningful/api/kfc-locations&#39;} . Recap of CollegeBoard Requirements . - .",
            "url": "https://samarthkalanke.github.io/SamarthKalanke/2022/10/11/KFCAPI.html",
            "relUrl": "/2022/10/11/KFCAPI.html",
            "date": " • Oct 11, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "KFC API Hacks",
            "content": "import requests url = &quot;https://kfc-locations.p.rapidapi.com/kfc/location/state/AZ/0&quot; headers = { &quot;X-RapidAPI-Key&quot;: &quot;8e39206459msh63119b14325b472p1a320bjsnac696cb1d4af&quot;, &quot;X-RapidAPI-Host&quot;: &quot;kfc-locations.p.rapidapi.com&quot; } response = requests.request(&quot;GET&quot;, url, headers=headers) print(response.text) . [{&#34;id&#34;:1,&#34;storeName&#34;:&#34;Kentucky Fried Chicken&#34;,&#34;address&#34;:&#34;2350 Miracle Mile&#34;,&#34;zipCode&#34;:&#34;86442&#34;,&#34;phone&#34;:&#34;(928) 763-2111&#34;,&#34;stateName&#34;:&#34;AZ&#34;,&#34;cityName&#34;:&#34;Bullhead City&#34;,&#34;latitude&#34;:&#34;35.099735982044&#34;,&#34;longitude&#34;:&#34;-114.59584849976&#34;,&#34;monday&#34;:{&#34;openTime&#34;:&#34;10:10 AM&#34;,&#34;closeTime&#34;:&#34;22:10 PM&#34;},&#34;tuesday&#34;:{&#34;openTime&#34;:&#34;10:10 AM&#34;,&#34;closeTime&#34;:&#34;22:10 PM&#34;},&#34;wednesday&#34;:{&#34;openTime&#34;:&#34;10:10 AM&#34;,&#34;closeTime&#34;:&#34;22:10 PM&#34;},&#34;thursday&#34;:{&#34;openTime&#34;:&#34;10:10 AM&#34;,&#34;closeTime&#34;:&#34;22:10 PM&#34;},&#34;friday&#34;:{&#34;openTime&#34;:&#34;10:10 AM&#34;,&#34;closeTime&#34;:&#34;22:10 PM&#34;},&#34;saturday&#34;:{&#34;openTime&#34;:&#34;10:10 AM&#34;,&#34;closeTime&#34;:&#34;22:10 PM&#34;},&#34;sunday&#34;:{&#34;openTime&#34;:&#34;10:10 AM&#34;,&#34;closeTime&#34;:&#34;22:10 PM&#34;}},{&#34;id&#34;:184,&#34;storeName&#34;:&#34;Kentucky Fried Chicken&#34;,&#34;address&#34;:&#34;3051 W Apache Trail&#34;,&#34;zipCode&#34;:&#34;85120&#34;,&#34;phone&#34;:&#34;(480) 982-1221&#34;,&#34;stateName&#34;:&#34;AZ&#34;,&#34;cityName&#34;:&#34;Apache Junction&#34;,&#34;latitude&#34;:&#34;33.414670851985&#34;,&#34;longitude&#34;:&#34;-111.578803759&#34;,&#34;monday&#34;:{&#34;openTime&#34;:&#34;10:10 AM&#34;,&#34;closeTime&#34;:&#34;21:09 PM&#34;},&#34;tuesday&#34;:{&#34;openTime&#34;:&#34;10:10 AM&#34;,&#34;closeTime&#34;:&#34;21:09 PM&#34;},&#34;wednesday&#34;:{&#34;openTime&#34;:&#34;10:10 AM&#34;,&#34;closeTime&#34;:&#34;21:09 PM&#34;},&#34;thursday&#34;:{&#34;openTime&#34;:&#34;10:10 AM&#34;,&#34;closeTime&#34;:&#34;21:09 PM&#34;},&#34;friday&#34;:{&#34;openTime&#34;:&#34;10:10 AM&#34;,&#34;closeTime&#34;:&#34;21:09 PM&#34;},&#34;saturday&#34;:{&#34;openTime&#34;:&#34;10:10 AM&#34;,&#34;closeTime&#34;:&#34;21:09 PM&#34;},&#34;sunday&#34;:{&#34;openTime&#34;:&#34;10:10 AM&#34;,&#34;closeTime&#34;:&#34;21:09 PM&#34;}},{&#34;id&#34;:185,&#34;storeName&#34;:&#34;Kentucky Fried Chicken&#34;,&#34;address&#34;:&#34;1470 N 8th St&#34;,&#34;zipCode&#34;:&#34;85323&#34;,&#34;phone&#34;:&#34;(623) 925-0696&#34;,&#34;stateName&#34;:&#34;AZ&#34;,&#34;cityName&#34;:&#34;Avondale&#34;,&#34;latitude&#34;:&#34;33.449317170502&#34;,&#34;longitude&#34;:&#34;-112.34157810491&#34;,&#34;monday&#34;:{&#34;openTime&#34;:&#34;10:10 AM&#34;,&#34;closeTime&#34;:&#34;22:10 PM&#34;},&#34;tuesday&#34;:{&#34;openTime&#34;:&#34;10:10 AM&#34;,&#34;closeTime&#34;:&#34;22:10 PM&#34;},&#34;wednesday&#34;:{&#34;openTime&#34;:&#34;10:10 AM&#34;,&#34;closeTime&#34;:&#34;22:10 PM&#34;},&#34;thursday&#34;:{&#34;openTime&#34;:&#34;10:10 AM&#34;,&#34;closeTime&#34;:&#34;22:10 PM&#34;},&#34;friday&#34;:{&#34;openTime&#34;:&#34;10:10 AM&#34;,&#34;closeTime&#34;:&#34;23:11 PM&#34;},&#34;saturday&#34;:{&#34;openTime&#34;:&#34;10:10 AM&#34;,&#34;closeTime&#34;:&#34;23:11 PM&#34;},&#34;sunday&#34;:{&#34;openTime&#34;:&#34;10:10 AM&#34;,&#34;closeTime&#34;:&#34;22:10 PM&#34;}},{&#34;id&#34;:186,&#34;storeName&#34;:&#34;Kentucky Fried Chicken&#34;,&#34;address&#34;:&#34;650 South Highway 90&#34;,&#34;zipCode&#34;:&#34;85602&#34;,&#34;phone&#34;:&#34;(832) 266-1224&#34;,&#34;stateName&#34;:&#34;AZ&#34;,&#34;cityName&#34;:&#34;Benson&#34;,&#34;latitude&#34;:&#34;31.961709688979&#34;,&#34;longitude&#34;:&#34;-110.3461885773&#34;,&#34;monday&#34;:{&#34;openTime&#34;:&#34;10:10 AM&#34;,&#34;closeTime&#34;:&#34;21:09 PM&#34;},&#34;tuesday&#34;:{&#34;openTime&#34;:&#34;10:10 AM&#34;,&#34;closeTime&#34;:&#34;21:09 PM&#34;},&#34;wednesday&#34;:{&#34;openTime&#34;:&#34;10:10 AM&#34;,&#34;closeTime&#34;:&#34;21:09 PM&#34;},&#34;thursday&#34;:{&#34;openTime&#34;:&#34;10:10 AM&#34;,&#34;closeTime&#34;:&#34;21:09 PM&#34;},&#34;friday&#34;:{&#34;openTime&#34;:&#34;10:10 AM&#34;,&#34;closeTime&#34;:&#34;21:09 PM&#34;},&#34;saturday&#34;:{&#34;openTime&#34;:&#34;10:10 AM&#34;,&#34;closeTime&#34;:&#34;21:09 PM&#34;},&#34;sunday&#34;:{&#34;openTime&#34;:&#34;10:10 AM&#34;,&#34;closeTime&#34;:&#34;21:09 PM&#34;}},{&#34;id&#34;:187,&#34;storeName&#34;:&#34;Kentucky Fried Chicken&#34;,&#34;address&#34;:&#34;682 S. Watson Rd&#34;,&#34;zipCode&#34;:&#34;85326&#34;,&#34;phone&#34;:&#34;(623) 327-0724&#34;,&#34;stateName&#34;:&#34;AZ&#34;,&#34;cityName&#34;:&#34;Buckeye&#34;,&#34;latitude&#34;:&#34;33.44071&#34;,&#34;longitude&#34;:&#34;-112.556964&#34;,&#34;monday&#34;:{&#34;openTime&#34;:&#34;10:10 AM&#34;,&#34;closeTime&#34;:&#34;22:10 PM&#34;},&#34;tuesday&#34;:{&#34;openTime&#34;:&#34;10:10 AM&#34;,&#34;closeTime&#34;:&#34;22:10 PM&#34;},&#34;wednesday&#34;:{&#34;openTime&#34;:&#34;10:10 AM&#34;,&#34;closeTime&#34;:&#34;22:10 PM&#34;},&#34;thursday&#34;:{&#34;openTime&#34;:&#34;10:10 AM&#34;,&#34;closeTime&#34;:&#34;22:10 PM&#34;},&#34;friday&#34;:{&#34;openTime&#34;:&#34;10:10 AM&#34;,&#34;closeTime&#34;:&#34;22:10 PM&#34;},&#34;saturday&#34;:{&#34;openTime&#34;:&#34;10:10 AM&#34;,&#34;closeTime&#34;:&#34;22:10 PM&#34;},&#34;sunday&#34;:{&#34;openTime&#34;:&#34;10:10 AM&#34;,&#34;closeTime&#34;:&#34;22:10 PM&#34;}},{&#34;id&#34;:188,&#34;storeName&#34;:&#34;Kentucky Fried Chicken&#34;,&#34;address&#34;:&#34;618 E. Florence&#34;,&#34;zipCode&#34;:&#34;85122&#34;,&#34;phone&#34;:&#34;(520) 836-1043&#34;,&#34;stateName&#34;:&#34;AZ&#34;,&#34;cityName&#34;:&#34;Casa Grande&#34;,&#34;latitude&#34;:&#34;32.879925494908&#34;,&#34;longitude&#34;:&#34;-111.74578959201&#34;,&#34;monday&#34;:{&#34;openTime&#34;:&#34;10:10 AM&#34;,&#34;closeTime&#34;:&#34;21:09 PM&#34;},&#34;tuesday&#34;:{&#34;openTime&#34;:&#34;10:10 AM&#34;,&#34;closeTime&#34;:&#34;21:09 PM&#34;},&#34;wednesday&#34;:{&#34;openTime&#34;:&#34;10:10 AM&#34;,&#34;closeTime&#34;:&#34;21:09 PM&#34;},&#34;thursday&#34;:{&#34;openTime&#34;:&#34;10:10 AM&#34;,&#34;closeTime&#34;:&#34;21:09 PM&#34;},&#34;friday&#34;:{&#34;openTime&#34;:&#34;10:10 AM&#34;,&#34;closeTime&#34;:&#34;22:10 PM&#34;},&#34;saturday&#34;:{&#34;openTime&#34;:&#34;10:10 AM&#34;,&#34;closeTime&#34;:&#34;22:10 PM&#34;},&#34;sunday&#34;:{&#34;openTime&#34;:&#34;10:10 AM&#34;,&#34;closeTime&#34;:&#34;21:09 PM&#34;}},{&#34;id&#34;:189,&#34;storeName&#34;:&#34;Kentucky Fried Chicken&#34;,&#34;address&#34;:&#34;2760 West Chandler Boulevard&#34;,&#34;zipCode&#34;:&#34;85224&#34;,&#34;phone&#34;:&#34;(480) 899-0776&#34;,&#34;stateName&#34;:&#34;AZ&#34;,&#34;cityName&#34;:&#34;Chandler&#34;,&#34;latitude&#34;:&#34;33.306732174457&#34;,&#34;longitude&#34;:&#34;-111.89015344043&#34;,&#34;monday&#34;:{&#34;openTime&#34;:&#34;10:10 AM&#34;,&#34;closeTime&#34;:&#34;22:10 PM&#34;},&#34;tuesday&#34;:{&#34;openTime&#34;:&#34;10:10 AM&#34;,&#34;closeTime&#34;:&#34;22:10 PM&#34;},&#34;wednesday&#34;:{&#34;openTime&#34;:&#34;10:10 AM&#34;,&#34;closeTime&#34;:&#34;22:10 PM&#34;},&#34;thursday&#34;:{&#34;openTime&#34;:&#34;10:10 AM&#34;,&#34;closeTime&#34;:&#34;22:10 PM&#34;},&#34;friday&#34;:{&#34;openTime&#34;:&#34;10:10 AM&#34;,&#34;closeTime&#34;:&#34;22:10 PM&#34;},&#34;saturday&#34;:{&#34;openTime&#34;:&#34;10:10 AM&#34;,&#34;closeTime&#34;:&#34;22:10 PM&#34;},&#34;sunday&#34;:{&#34;openTime&#34;:&#34;10:10 AM&#34;,&#34;closeTime&#34;:&#34;22:10 PM&#34;}},{&#34;id&#34;:190,&#34;storeName&#34;:&#34;Kentucky Fried Chicken&#34;,&#34;address&#34;:&#34;1147 N Hwy 89&#34;,&#34;zipCode&#34;:&#34;86323&#34;,&#34;phone&#34;:&#34;(928) 636-5001&#34;,&#34;stateName&#34;:&#34;AZ&#34;,&#34;cityName&#34;:&#34;Chino Valley&#34;,&#34;latitude&#34;:&#34;34.761774908417&#34;,&#34;longitude&#34;:&#34;-112.45305904867&#34;,&#34;monday&#34;:{&#34;openTime&#34;:&#34;08:08 AM&#34;,&#34;closeTime&#34;:&#34;22:10 PM&#34;},&#34;tuesday&#34;:{&#34;openTime&#34;:&#34;08:08 AM&#34;,&#34;closeTime&#34;:&#34;22:10 PM&#34;},&#34;wednesday&#34;:{&#34;openTime&#34;:&#34;08:08 AM&#34;,&#34;closeTime&#34;:&#34;22:10 PM&#34;},&#34;thursday&#34;:{&#34;openTime&#34;:&#34;08:08 AM&#34;,&#34;closeTime&#34;:&#34;22:10 PM&#34;},&#34;friday&#34;:{&#34;openTime&#34;:&#34;08:08 AM&#34;,&#34;closeTime&#34;:&#34;22:10 PM&#34;},&#34;saturday&#34;:{&#34;openTime&#34;:&#34;08:08 AM&#34;,&#34;closeTime&#34;:&#34;22:10 PM&#34;},&#34;sunday&#34;:{&#34;openTime&#34;:&#34;08:08 AM&#34;,&#34;closeTime&#34;:&#34;22:10 PM&#34;}},{&#34;id&#34;:191,&#34;storeName&#34;:&#34;Kentucky Fried Chicken&#34;,&#34;address&#34;:&#34;1505 N. Arizona Boulevard&#34;,&#34;zipCode&#34;:&#34;85128&#34;,&#34;phone&#34;:&#34;(520) 723-0250&#34;,&#34;stateName&#34;:&#34;AZ&#34;,&#34;cityName&#34;:&#34;Coolidge&#34;,&#34;latitude&#34;:&#34;32.996186075225&#34;,&#34;longitude&#34;:&#34;-111.52324171994&#34;,&#34;monday&#34;:{&#34;openTime&#34;:&#34;10:10 AM&#34;,&#34;closeTime&#34;:&#34;23:11 PM&#34;},&#34;tuesday&#34;:{&#34;openTime&#34;:&#34;10:10 AM&#34;,&#34;closeTime&#34;:&#34;23:11 PM&#34;},&#34;wednesday&#34;:{&#34;openTime&#34;:&#34;10:10 AM&#34;,&#34;closeTime&#34;:&#34;23:11 PM&#34;},&#34;thursday&#34;:{&#34;openTime&#34;:&#34;10:10 AM&#34;,&#34;closeTime&#34;:&#34;23:11 PM&#34;},&#34;friday&#34;:{&#34;openTime&#34;:&#34;10:10 AM&#34;,&#34;closeTime&#34;:&#34;00:12 AM&#34;},&#34;saturday&#34;:{&#34;openTime&#34;:&#34;10:10 AM&#34;,&#34;closeTime&#34;:&#34;00:12 AM&#34;},&#34;sunday&#34;:{&#34;openTime&#34;:&#34;10:10 AM&#34;,&#34;closeTime&#34;:&#34;23:11 PM&#34;}},{&#34;id&#34;:192,&#34;storeName&#34;:&#34;Kentucky Fried Chicken&#34;,&#34;address&#34;:&#34;970 S. Main&#34;,&#34;zipCode&#34;:&#34;86326&#34;,&#34;phone&#34;:&#34;(928) 634-8376&#34;,&#34;stateName&#34;:&#34;AZ&#34;,&#34;cityName&#34;:&#34;Cottonwood&#34;,&#34;latitude&#34;:&#34;34.722088122899&#34;,&#34;longitude&#34;:&#34;-112.00446778464&#34;,&#34;monday&#34;:{&#34;openTime&#34;:&#34;10:10 AM&#34;,&#34;closeTime&#34;:&#34;20:08 PM&#34;},&#34;tuesday&#34;:{&#34;openTime&#34;:&#34;10:10 AM&#34;,&#34;closeTime&#34;:&#34;20:08 PM&#34;},&#34;wednesday&#34;:{&#34;openTime&#34;:&#34;10:10 AM&#34;,&#34;closeTime&#34;:&#34;20:08 PM&#34;},&#34;thursday&#34;:{&#34;openTime&#34;:&#34;10:10 AM&#34;,&#34;closeTime&#34;:&#34;20:08 PM&#34;},&#34;friday&#34;:{&#34;openTime&#34;:&#34;10:10 AM&#34;,&#34;closeTime&#34;:&#34;20:08 PM&#34;},&#34;saturday&#34;:{&#34;openTime&#34;:&#34;10:10 AM&#34;,&#34;closeTime&#34;:&#34;20:08 PM&#34;},&#34;sunday&#34;:{&#34;openTime&#34;:&#34;10:10 AM&#34;,&#34;closeTime&#34;:&#34;20:08 PM&#34;}}] .",
            "url": "https://samarthkalanke.github.io/SamarthKalanke/2022/10/10/Week7Hacks.html",
            "relUrl": "/2022/10/10/Week7Hacks.html",
            "date": " • Oct 10, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "Python RapidAPI",
            "content": "Python, RapidAPI Terms . APIs and tooling like Jupyter docs allows many opportunities in fields like Data Science. As more and more developers use APIs, they build standards in how you setup a client, send requests and receive information... . Covid19 RapidAPI Example . To begin the API journey. You need to find an API provider. . RapidAPI is a great option. You must setup and account, but there are many free options. | Goto this page for starters, the Corona virus World and India data- Under Code Snippets pick Python - Requests | . RapidAPI, you will select Python Requests type of code to work with you Notebook. . The url is the endpoint to which the API is directed | The headers is a dictionary data structure to send special messaging to the endpoint | The requests.request() python function is used to send a request and retrieve their responses | The response variable receives result of of the request in JSON text | . Next step, is to format the response according to your data science needs . &quot;&quot;&quot; Requests is a HTTP library for the Python programming language. The goal of the project is to make HTTP requests simpler and more human-friendly. &quot;&quot;&quot; import requests &quot;&quot;&quot; RapidAPI is the world&#39;s largest API Marketplace. Developers use Rapid API to discover and connect to thousands of APIs. &quot;&quot;&quot; url = &quot;https://corona-virus-world-and-india-data.p.rapidapi.com/api&quot; headers = { &#39;x-rapidapi-key&#39;: &quot;dec069b877msh0d9d0827664078cp1a18fajsn2afac35ae063&quot;, &#39;x-rapidapi-host&#39;: &quot;corona-virus-world-and-india-data.p.rapidapi.com&quot; } # Request Covid Data response = requests.request(&quot;GET&quot;, url, headers=headers) # print(response.text) # uncomment this line to see raw data # This code looks for &quot;world data&quot; print(&quot;World Totals&quot;) world = response.json().get(&#39;world_total&#39;) # turn response to json() so we can extract &quot;world_total&quot; for key, value in world.items(): # this finds key, value pairs in country print(key, value) print() # This code looks for USA in &quot;countries_stats&quot; print(&quot;Country Totals&quot;) countries = response.json().get(&#39;countries_stat&#39;) for country in countries: # countries is a list if country[&quot;country_name&quot;] == &quot;USA&quot;: # this filters for USA for key, value in country.items(): # this finds key, value pairs in country print(key, value) . World Totals total_cases 509,268,964 new_cases 204,268 total_deaths 6,242,509 new_deaths 630 total_recovered 461,827,849 active_cases 41,198,606 serious_critical 42,510 total_cases_per_1m_population 65,334 deaths_per_1m_population 800.9 statistic_taken_at 2022-04-24 11:18:01 Country Totals country_name USA cases 82,649,779 deaths 1,018,316 region total_recovered 80,434,925 new_deaths 0 new_cases 0 serious_critical 1,465 active_cases 1,196,538 total_cases_per_1m_population 247,080 deaths_per_1m_population 3,044 total_tests 1,000,275,726 tests_per_1m_population 2,990,303 . Digital Coin Example . This example provides digital coin feedback (ie Bitcoin). It include popularity, price, symbols, etc. . A valid X-RapidAPI-Key is required. Look in code for link to RapidAPI page | Read all comments in code for further guidance | . # RapidAPI page https://rapidapi.com/Coinranking/api/coinranking1/ # Begin Rapid API Code import requests url = &quot;https://coinranking1.p.rapidapi.com/coins&quot; querystring = {&quot;referenceCurrencyUuid&quot;:&quot;yhjMzLPhuIDl&quot;,&quot;timePeriod&quot;:&quot;24h&quot;,&quot;tiers[0]&quot;:&quot;1&quot;,&quot;orderBy&quot;:&quot;marketCap&quot;,&quot;orderDirection&quot;:&quot;desc&quot;,&quot;limit&quot;:&quot;50&quot;,&quot;offset&quot;:&quot;0&quot;} headers = { &quot;X-RapidAPI-Key&quot;: &quot;jcmbea0fa2ff5msh7f14bf69be38ca6p175482jsn6c4988114560&quot;, # place your key here &quot;X-RapidAPI-Host&quot;: &quot;coinranking1.p.rapidapi.com&quot; } response = requests.request(&quot;GET&quot;, url, headers=headers, params=querystring) print(response.text) # End Rapid API Code json = response.json() # convert response to python json object # Observe data from an API. This is how data transports over the internet in a &quot;JSON&quot; text form # - The JSON &quot;text&quot; is formed in dictionary {} and list [] divisions # - To read the result, Data Scientist of Developer converts JSON into human readable form # - Review the first line, look for the keys -- &quot;status&quot; and &quot;data&quot; . {&#34;message&#34;:&#34;You are not subscribed to this API.&#34;} . Formatting Digital Coin example . JSON text transferred from the API in the previous cell was converted to a Python Dictionary called json. The &quot;coins&quot; in the dictionary contain a list of the most relevant data. Look at the code and comments to see how the original text is turned into something understandable. Additionally, there are error check to make sure we are starting the code with the expectation that the API was run correctly. . &quot;&quot;&quot; This cell is dependent on valid run of API above. - try and except code is making sure &quot;json&quot; was properly run above - inside second try is code that is used to process Coin API data Note. Run this cell repeatedly to format data without re-activating API &quot;&quot;&quot; try: print(&quot;JSON data is Python type: &quot; + str(type(json))) try: # Extracting Coins JSON status, if the API worked status = json.get(&#39;status&#39;) print(&quot;API status: &quot; + status) print() # Extracting Coins JSON data, data about the coins data = json.get(&#39;data&#39;) # Procedural abstraction of Print code for coins def print_coin(c): print(c[&quot;symbol&quot;], c[&quot;price&quot;]) print(&quot;Icon Url: &quot; + c[&quot;iconUrl&quot;]) print(&quot;Rank Url: &quot; + c[&quot;coinrankingUrl&quot;]) # Coins data was observed to be a list for coin in data[&#39;coins&#39;]: print_coin(coin) print() except: print(&quot;Did you insert a valid key in X-RapidAPI-Key of API cell above?&quot;) print(json) except: print(&quot;This cell is dependent on running API call in cell above!&quot;) . JSON data is Python type: &lt;class &#39;dict&#39;&gt; Did you insert a valid key in X-RapidAPI-Key of API cell above? {&#39;message&#39;: &#39;You are not subscribed to this API.&#39;} . Go deeper into APIs . Web Development vs Jupyter Notebook. A notebook is certainly a great place to start. But, for your end of Trimester project we want you to build the skill to reference and use APIs within your Project. Here are some resources to get you started with this journey. . In the Nighthawk Coders APCSP you can find an Overview and Examples using APIs:APCSP APIs menu- Using Covid RapidAPI JavaScript frontend API code in APCSP Fastpages GitHub repo: https://github.com/nighthawkcoders/APCSP/blob/master/_posts/2022-07-10-PBL-rapidapi.md | . | Making a Jokes API (this will next API tech talk) Frontend. JavaScript frontend code in APCSP fastpages GitHub repo: https://github.com/nighthawkcoders/APCSP/blob/master/_posts/2022-07-10-PBL-jokes.md | Backend Endpoints. Python code that allows Frontend access: https://github.com/nighthawkcoders/flask_portfolio/blob/main/api.py | Backend Jokes Management. Python code that support Create, Read, Update, Delete (CRUD): https://github.com/nighthawkcoders/flask_portfolio/blob/main/model_jokes.py | . | . Hacks . Find and use an API as part of your project. An API and a little coding logic will be a big step toward getting meaningful data for a project. There are many API providers, find one that might work for your project to complete this hack. When picking an API you are looking for something that will work with either JavaScript Fetch or Python Request. Here are some samples, these are not qualified in any way. . RapidAPI- GitHub Project | No Key APIs Article | Twitter Developer | Google Developer | Reddit Developer | . Show API and format results in either Web Page or Jupyter Notebook. Ultimately, I will expect that we do APIs in backend (Python/Flask). However, for this Hack you can pick your preference. We will discuss pros and cons in next API tech talk. .",
            "url": "https://samarthkalanke.github.io/SamarthKalanke/techtalk/rapidapi",
            "relUrl": "/techtalk/rapidapi",
            "date": " • Oct 3, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "Big Idea 1 'Identifying and Correcting Errors'",
            "content": "College Board Big Idea 1 . Identifying and Correcting Errors (Unit 1.4) . Become familiar with types of errors and strategies to fixing them . Lightly Review Videos and take notes on topics with Blog | Complete assigned MCQ questions | . Here are some code segments you can practice fixing: . alphabet = &quot;abcdefghijklmnopqrstuvwxyz&quot; alphabetList = [] for i in alphabet: alphabetList.append(i) print(alphabetList) . [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;, &#39;f&#39;, &#39;g&#39;, &#39;h&#39;, &#39;i&#39;, &#39;j&#39;, &#39;k&#39;, &#39;l&#39;, &#39;m&#39;, &#39;n&#39;, &#39;o&#39;, &#39;p&#39;, &#39;q&#39;, &#39;r&#39;, &#39;s&#39;, &#39;t&#39;, &#39;u&#39;, &#39;v&#39;, &#39;w&#39;, &#39;x&#39;, &#39;y&#39;, &#39;z&#39;] . The intended outcome is to determine where the letter is in the alphabet using a while loop . What is a good test case to check the current outcome? Why? | Make changes to get the intended outcome. | . letter = input(&quot;What letter would you like to check?&quot;) i = 0 while i &lt; 26: if alphabetList[i] == letter: print(&quot;The letter &quot; + letter + &quot; is the &quot; + str(i) + &quot; letter in the alphabet&quot;) i += 1 . The intended outcome is to determine where the letter is in the alphabet using a for loop . What is a good test case to check the current outcome? Why? | Make changes to get the intended outcome. | . count = 0 letter = input(&quot;What letter would you like to check?&quot;) for i in alphabetList: if i == letter: print(&quot;The letter &quot; + letter + &quot; is the &quot; + str(count+1) + &quot; letter in the alphabet&quot;) count += 1 . This code outputs the even numbers from 0 - 10 using a while loop. . Analyze this code to determine what can be changed to get the outcome to be odd numbers. (Code block below) | . evens = [] i = 1 while i &lt;= 10: evens.append(i) i += 2 print(evens) . [1, 3, 5, 7, 9] . This code should output the odd numbers from 0 - 10 using a while loop. . odds = [] i = 0 while i &lt;= 10: odds.append(i) i += 2 print(odds) . [0, 2, 4, 6, 8, 10] . This code outputs the even numbers from 0 - 10 using a for loop. . Analyze this code to determine what can be changed to get the outcome to be odd numbers. (Code block below) | . numbers = [0,1,2,3,4,5,6,7,8,9,10] evens = [] for i in numbers: if (numbers[i] % 2 == 1): evens.append(numbers[i]) print(evens) . [1, 3, 5, 7, 9] . This code should output the odd numbers from 0 - 10 using a for loop. . numbers = [0,1,2,3,4,5,6,7,8,9,10] odds = [] for i in numbers: if (numbers[i] % 2 == 0): odds.append(numbers[i]) print(odds) . [0, 2, 4, 6, 8, 10] . The intended outcome is printing a number between 1 and 100 once, if it is a multiple of 2 or 5 . What values are outputted incorrectly. Why? | Make changes to get the intended outcome. | . numbers = [] newNumbers = [] i = 1 while i &lt; 100: numbers.append(i) i += 1 for i in numbers: if numbers[i-1] % 5 == 0: newNumbers.append(numbers[i-1]) elif numbers[i-1] % 2 == 0: newNumbers.append(numbers[i-1]) print(newNumbers) . [2, 4, 5, 6, 8, 10, 12, 14, 15, 16, 18, 20, 22, 24, 25, 26, 28, 30, 32, 34, 35, 36, 38, 40, 42, 44, 45, 46, 48, 50, 52, 54, 55, 56, 58, 60, 62, 64, 65, 66, 68, 70, 72, 74, 75, 76, 78, 80, 82, 84, 85, 86, 88, 90, 92, 94, 95, 96, 98] . Challenge . This code segment is at a very early stage of implementation. . What are some ways to (user) error proof this code? | The code should be able to calculate the cost of the meal of the user | . Hint: . write a “single” test describing an expectation of the program of the program | test - input burger, expect output of burger price | run the test, which should fail because the program lacks that feature | write “just enough” code, the simplest possible, to make the test pass | . Then repeat this process until you get program working like you want it to work. . menu = {&quot;burger&quot;: 3.99, &quot;fries&quot;: 1.99, &quot;drink&quot;: 0.99} total = 0 #shows the user the menu and prompts them to select an item print(&quot;Menu&quot;) for k,v in menu.items(): print(k + &quot; $&quot; + str(v)) #why does v have &quot;str&quot; in front of it? #ideally the code should prompt the user multiple times item = input(&quot;Please select an item from the menu&quot;) if item == &quot;burger&quot;: print(&quot;3.99&quot;) elif item == &quot;fries&quot;: print(&quot;1.99&quot;) elif item == &quot;drink&quot;: print(&quot;0.99&quot;) else: print(&quot;you are a idoit you don&#39;t no how to spul&quot;) #code should add the price of the menu items selected by the user . Menu burger $3.99 fries $1.99 drink $0.99 you are a idoit you don&#39;t no how to spul . Hacks . Now is a good time to think about Testing of your teams final project... . What errors may arise in your project? | What are some test cases that can be used? | Make sure to document any bugs you encounter and how you solved the problem. | What are “single” tests that you will perform on your project? Or, your part of the project? As Hack Design and Test plan action … Divide these “single” tests into Issues for Scrum Board prior to coding. FYI, related tests could be in same Issue by using markdown checkboxes to separate tests. | . | .",
            "url": "https://samarthkalanke.github.io/SamarthKalanke/collegeboard/error",
            "relUrl": "/collegeboard/error",
            "date": " • Oct 3, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "Table",
            "content": "&lt;!DOCTYPE html&gt; . Home Group Roles-HTML Table . Names Age Sport . Samarth | 16 | Basketball,Volleyball | . AJ | 16 | Nothing | . Paaras | 16 | Tea Drinking | . Houxan | 16 | Nothing | . .",
            "url": "https://samarthkalanke.github.io/SamarthKalanke/2022/09/27/table.html",
            "relUrl": "/2022/09/27/table.html",
            "date": " • Sep 27, 2022"
        }
        
    
  
    
        ,"post5": {
            "title": "NBA quiz",
            "content": "Notes . Design . Purpose . The test that I made was on basic information about the NBA I wanted to make a test that had the variable score and it would keep on getting bigger or smaller based on wether your answer was right I wanted to have every question about the NBA but just the basics of it I used the on event to activate the quiz and change between screens when a button was clicked At the end I wanted the test to tell the score that you got once the button was clicked . Data Abstraction . I got the Data from google I put the questions and the answers in the design tab of code.org . Managing Complexity . I made a score variable that kept track of score and goes down or up based on if they clicked the right answer. If they clicked the right answer it took them to a right answer page and the same thing for if they clicked the wrong answer. At the end I made it so that it will give the percentage of your correct anserwers when a button is clicked on . Algorithim Implemantion . Step 1 Display home page Step 2 When Click to start is pressed then Step 2.1 next quiz question shows with the MC answers Step 2.2 When correct answer is selceted then Step 2.2.1 Correct page is displayed Step 2.2.2 the score variable increases by 1 Step 2.3 else Step 2.3.1 incorrect page is shown Step 2.4 go to step 2.1 and repeat for all 3 questions Step 3 Count of correct answers is shown . Finished Project . NBA quiz . var score = 0; onEvent(&quot;startButton&quot;, &quot;click&quot;, function( ) { console.log(&quot;startbutton clicked&quot;); setScreen(&quot;quiz1&quot;); playSpeech(&quot;Quiz Started&quot;, &quot;male&quot;, &quot;English&quot;); }); onEvent(&quot;correct1&quot;, &quot;click&quot;, function( ) { score = score += 1; setScreen(&quot;CorrectContinue&quot;); onEvent(&quot;Correct&quot;, &quot;click&quot;, function( ) { setScreen(&quot;quiz2&quot;); }); }); onEvent(&quot;incorrect1quiz1&quot;, &quot;click&quot;, function( ) { score = score -= 1; setScreen(&quot;IncorrectContinue&quot;); onEvent(&quot;Incorrect&quot;, &quot;click&quot;, function( ) { setScreen(&quot;quiz2&quot;); }); }); onEvent(&quot;incorrect2quiz1&quot;, &quot;click&quot;, function( ) { score = score -= 1; setScreen(&quot;IncorrectContinue&quot;); onEvent(&quot;Incorrect&quot;, &quot;click&quot;, function( ) { setScreen(&quot;quiz2&quot;); }); }); onEvent(&quot;incorrect3quiz1&quot;, &quot;click&quot;, function( ) { score = score -= 1; setScreen(&quot;IncorrectContinue&quot;); onEvent(&quot;Incorrect&quot;, &quot;click&quot;, function( ) { setScreen(&quot;quiz2&quot;); }); }); onEvent(&quot;correctquiz2&quot;, &quot;click&quot;, function( ) { score = score += 1; setScreen(&quot;CorrectContinue&quot;); onEvent(&quot;Correct&quot;, &quot;click&quot;, function( ) { setScreen(&quot;quiz3&quot;); }); }); onEvent(&quot;incorrect1quiz2&quot;, &quot;click&quot;, function( ) { score = score -= 1; setScreen(&quot;IncorrectContinue&quot;); onEvent(&quot;Incorrect&quot;, &quot;click&quot;, function( ) { setScreen(&quot;quiz3&quot;); }); }); onEvent(&quot;correct3&quot;, &quot;click&quot;, function( ) { score = score += 1; setScreen(&quot;CorrectContinue&quot;); onEvent(&quot;Correct&quot;, &quot;click&quot;, function( ) { setScreen(&quot;finallesui&quot;); }); }); onEvent(&quot;incorrect1quiz3&quot;, &quot;click&quot;, function( ) { score = score -= 1; setScreen(&quot;IncorrectContinue&quot;); onEvent(&quot;Incorrect&quot;, &quot;click&quot;, function( ) { playSound(&quot;sound://default.mp3&quot;, false); setScreen(&quot;finallesui&quot;); }); }); onEvent(&quot;finallesui&quot;, &quot;click&quot;, function( ) { console.log(score); var finalscore = score/3 *100 + &quot;%&quot;; setText(&quot;label&quot;, finalscore); }); onEvent(&quot;label1&quot;, &quot;click&quot;, function( ) { console.log(&quot;label1 clicked!&quot;); }); .",
            "url": "https://samarthkalanke.github.io/SamarthKalanke/2022/09/27/javaproof.html",
            "relUrl": "/2022/09/27/javaproof.html",
            "date": " • Sep 27, 2022"
        }
        
    
  
    
        ,"post6": {
            "title": "Notes for Yale Video",
            "content": "Video notes and Vocab . Enerprise: A project that is difficult and requires effort Our life circumstances don’t matter as much as we think Intuitions: We can understand things without conscious reasoning Taking care of happines doesn’t work without putting practices to work GI Joe Fantasy: Simply knowing about a bias is enough to pu tthe idea into practice The mind mugs up about what it means to be happy. It often lies Happy people make time for connections Sleeping is good Savoring the moment is often better Affluence: The state of having a great deal of money Be affluent in time Happy people prioritize time over money . List of Gratitude . People I am greatful for My family My friends Andrew Tate . Goals Get all As Do all my things outside of school well Pursue any hobbies that I have . Not of Gratitue: . I am grateful for my team in CSP. Paaras, Houshin, and AJ are all really smart people and I enjoy working with them. .",
            "url": "https://samarthkalanke.github.io/SamarthKalanke/notes/2022/09/21/Yale-Vidnotes.html",
            "relUrl": "/notes/2022/09/21/Yale-Vidnotes.html",
            "date": " • Sep 21, 2022"
        }
        
    
  
    
        ,"post7": {
            "title": "Notes for AP Classroom",
            "content": "Video 1.1 Pt1 Notes . Companies use collaboration for inovation and this shows parts of every collaborator Inovations can be tangible or intangible Collaboration that has multiple people waters down bias Effective collaboration prduces a computing innoavation the reflecst the diversity of talents . Video 1.1 Pt2 Notes . Pair Programming a way that every person has a job and a certain role Think-pair-share A methode that breaks everyones thinking down to make the job easier Leave Comments Allows everyone to know each others flaw .",
            "url": "https://samarthkalanke.github.io/SamarthKalanke/notes/2022/09/21/Notes-for-AP-Classroom.html",
            "relUrl": "/notes/2022/09/21/Notes-for-AP-Classroom.html",
            "date": " • Sep 21, 2022"
        }
        
    
  
    
        ,"post8": {
            "title": "NBA quiz",
            "content": "Notes . Design . Purpose . The test that I made was on basic information about the NBA I wanted to make a test that had the variable score and it would keep on getting bigger or smaller based on wether your answer was right I wanted to have every question about the NBA but just the basics of it I used the on event to activate the quiz and change between screens when a button was clicked At the end I wanted the test to tell the score that you got once the button was clicked . Data Abstraction . I got the Data from google I put the questions and the answers in the design tab of code.org . Managing Complexity . I made a score variable that kept track of score and goes down or up based on if they clicked the right answer. If they clicked the right answer it took them to a right answer page and the same thing for if they clicked the wrong answer. At the end I made it so that it will give the percentage of your correct anserwers when a button is clicked on . Algorithim Implemantion . Step 1 Display home page Step 2 When Click to start is pressed then Step 2.1 next quiz question shows with the MC answers Step 2.2 When correct answer is selceted then Step 2.2.1 Correct page is displayed Step 2.2.2 the score variable increases by 1 Step 2.3 else Step 2.3.1 incorrect page is shown Step 2.4 go to step 2.1 and repeat for all 3 questions Step 3 Count of correct answers is shown . Finished Project . NBA quiz .",
            "url": "https://samarthkalanke.github.io/SamarthKalanke/quiz/2022/09/14/design-for-project.html",
            "relUrl": "/quiz/2022/09/14/design-for-project.html",
            "date": " • Sep 14, 2022"
        }
        
    
  
    
        ,"post9": {
            "title": "Schedule",
            "content": "Introduction to Samarth’s Schedule . This is the first 3 weeks of my schedule for APCSP. . 2 | Data Abstraction | Me and my partner did more in the seperate languages in. | . 1 | Introduction to Python | We made a quiz in Python and used Bash for the tool check as well. | . 0 | Tool Setup | We installed Anaconda, python, vscode and WSl. | .",
            "url": "https://samarthkalanke.github.io/SamarthKalanke/schedule",
            "relUrl": "/schedule",
            "date": " • Sep 3, 2022"
        }
        
    
  
    
        ,"post10": {
            "title": "my theme changes",
            "content": "This is my theme change. .",
            "url": "https://samarthkalanke.github.io/SamarthKalanke/hacks/2022/09/03/themechangepic.html",
            "relUrl": "/hacks/2022/09/03/themechangepic.html",
            "date": " • Sep 3, 2022"
        }
        
    
  
    
        ,"post11": {
            "title": "Week 2 hacks",
            "content": "myDict = [] myDict.append({ &quot;FirstName&quot;: &quot;Samarth&quot;, &quot;LastNameInitial&quot;: &quot;K.&quot;, &quot;DOB&quot;: &quot;October 19&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Family Members&quot;: &quot;4&quot;, &quot;Age&quot;: &quot;15&quot; }) myDict.append({ &quot;FirstName&quot;: &quot;Paaras&quot;, &quot;LastNameInitial&quot;: &quot;P.&quot;, &quot;DOB&quot;: &quot;June 9&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Family Members&quot;: &quot;1&quot;, &quot;Age&quot;: &quot;15&quot; }) . [{&#39;FirstName&#39;: &#39;Samarth&#39;, &#39;LastNameInitial&#39;: &#39;K.&#39;, &#39;DOB&#39;: &#39;October 19&#39;, &#39;Residence&#39;: &#39;San Diego&#39;, &#39;Family Members&#39;: &#39;4&#39;, &#39;Age&#39;: &#39;15&#39;}, {&#39;FirstName&#39;: &#39;Paaras&#39;, &#39;LastNameInitial&#39;: &#39;P.&#39;, &#39;DOB&#39;: &#39;June 9&#39;, &#39;Residence&#39;: &#39;San Diego&#39;, &#39;Family Members&#39;: &#39;1&#39;, &#39;Age&#39;: &#39;15&#39;}] Looped data below Samarth K. DOB: October 19 Residence: San Diego Family Members: 4 Age: 15 Paaras P. DOB: June 9 Residence: San Diego Family Members: 1 Age: 15 . myDict = [] myDict.append({ &quot;FirstName&quot;: &quot;Samarth&quot;, &quot;LastNameInitial&quot;: &quot;K.&quot;, &quot;DOB&quot;: &quot;October 19&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Family Members&quot;: &quot;4&quot;, &quot;Age&quot;: &quot;15&quot; }) myDict.append({ &quot;FirstName&quot;: &quot;Paaras&quot;, &quot;LastNameInitial&quot;: &quot;P.&quot;, &quot;DOB&quot;: &quot;June 9&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Family Members&quot;: &quot;1&quot;, &quot;Age&quot;: &quot;15&quot; }) for i in range(len(myDict)): print(myDict[i-1]) . {&#39;FirstName&#39;: &#39;Paaras&#39;, &#39;LastNameInitial&#39;: &#39;P.&#39;, &#39;DOB&#39;: &#39;June 9&#39;, &#39;Residence&#39;: &#39;San Diego&#39;, &#39;Family Members&#39;: &#39;1&#39;, &#39;Age&#39;: &#39;15&#39;} {&#39;FirstName&#39;: &#39;Samarth&#39;, &#39;LastNameInitial&#39;: &#39;K.&#39;, &#39;DOB&#39;: &#39;October 19&#39;, &#39;Residence&#39;: &#39;San Diego&#39;, &#39;Family Members&#39;: &#39;4&#39;, &#39;Age&#39;: &#39;15&#39;} . dictionary = ({ &quot;What is 1+1 &quot;: &quot;5&quot;, &quot;What is the meaning of life &quot;: &quot;420&quot;, &quot;What is happiness &quot;: &quot;nonexistent&quot;, }) score = 0 for key,value in dictionary.items(): questions = input(f&quot;{key}&quot;) if questions == value: print(&quot;Correct&quot;) score += 1 else: print(&quot;Incorrect&quot;) print(score) . Correct Correct Correct 3 .",
            "url": "https://samarthkalanke.github.io/SamarthKalanke/fastpages/2022/09/03/dictionarytest.html",
            "relUrl": "/fastpages/2022/09/03/dictionarytest.html",
            "date": " • Sep 3, 2022"
        }
        
    
  
    
        ,"post12": {
            "title": "Title",
            "content": ". toc: true layout: post description: A minimal example of using markdown with fastpages. categories: [markdown] . title: basketball quiz . Basketball Quiz . from http.client import GATEWAY_TIMEOUT points= 0 answer = input(&quot;What does NBA stand for? &quot;) print(answer) if answer == &quot;National Basketball Association&quot;: print (&quot;nice job that&#39;s correct&quot;) points += 1 else: print (&quot;sorry that&#39;s incorrect&quot;) points -= 0 answer = input(&quot;Who is the NBA&#39;s commisioner? &quot;) print(answer) if answer == &quot;Adam Silver&quot;: print (&quot;nice job that&#39;s correct&quot;) points += 1 else: print (&quot;sorry that&#39;s incorrect&quot;) points -= 0 answer = input(&quot;What is the WNBA&quot;) print(answer) if answer == &quot;irrelevant&quot;: print (&quot;nice job that&#39;s correct&quot;) points += 1 else: print (&quot;sorry that&#39;s incorrec&quot;) points -= 0 . National basketball Association sorry that&#39;s incorrect Adam Silver nice job that&#39;s correct Irrelavent sorry that&#39;s incorrect .",
            "url": "https://samarthkalanke.github.io/SamarthKalanke/2022/08/30/quizzes.html",
            "relUrl": "/2022/08/30/quizzes.html",
            "date": " • Aug 30, 2022"
        }
        
    
  
    
        ,"post13": {
            "title": "Title",
            "content": "echo &quot;Using conditional statement to create a project directory and project&quot; # Variable section export project_dir=$HOME/vscode # change vscode to different name to test git clone export project=$project_dir/APCSP # change APCSP to name of project from git clone export project_repo=&quot;https://github.com/nighthawkcoders/APCSP.git&quot; # change to project of choice cd ~ # start in home directory # Conditional block to make a project directory if [ ! -d $project_dir ] then echo &quot;Directory $project_dir does not exists... makinng directory $project_dir&quot; mkdir -p $project_dir fi echo &quot;Directory $project_dir exists.&quot; # Conditional block to git clone a project from project_repo if [ ! -d $project ] then echo &quot;Directory $project does not exists... cloning $project_repo&quot; cd $project_dir git clone $project_repo cd ~ fi echo &quot;Directory $project exists.&quot; . Running cells with &#39;Python 3.8.10 64-bit&#39; requires ipykernel package. Run the following command to install &#39;ipykernel&#39; into the Python environment. Command: &#39;/bin/python3 -m pip install ipykernel -U --user --force-reinstall&#39; .",
            "url": "https://samarthkalanke.github.io/SamarthKalanke/2022/08/30/bash.html",
            "relUrl": "/2022/08/30/bash.html",
            "date": " • Aug 30, 2022"
        }
        
    
  
    
        ,"post14": {
            "title": "Other Classwork",
            "content": "This is my myconnect for AP Chemistry https://poway.instructure.com/courses/126331 . This is my myconnect for AP Calculus https://poway.instructure.com/courses/126842 .",
            "url": "https://samarthkalanke.github.io/SamarthKalanke/markdown/2022/08/29/Otherclasswork.html",
            "relUrl": "/markdown/2022/08/29/Otherclasswork.html",
            "date": " • Aug 29, 2022"
        }
        
    
  
    
        ,"post15": {
            "title": "Zapost1",
            "content": "Killua Zolldyck HunterXHunter . He is a 11 year old assain with lightning abilites and an overpowered family . .",
            "url": "https://samarthkalanke.github.io/SamarthKalanke/2022/08/26/zapost1.html",
            "relUrl": "/2022/08/26/zapost1.html",
            "date": " • Aug 26, 2022"
        }
        
    
  
    
        ,"post16": {
            "title": "Title",
            "content": "print(&quot;hello there&quot;) . hello there . print(&quot;hello there&quot;) . hello there .",
            "url": "https://samarthkalanke.github.io/SamarthKalanke/2022/08/23/blogpost1.html",
            "relUrl": "/2022/08/23/blogpost1.html",
            "date": " • Aug 23, 2022"
        }
        
    
  
    
        ,"post17": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://samarthkalanke.github.io/SamarthKalanke/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "CSP notes",
          "content": "What I’ve learned so far: I have learned a little bit about fastpages . Notes: Print: Function used to output a string into a terminal Def: Used to create functions that can do anything import: Used to import a variety of python libraries. .",
          "url": "https://samarthkalanke.github.io/SamarthKalanke/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  
      ,"page2": {
          "title": "Submenu",
          "content": "&lt;!DOCTYPE html&gt; . . Home Javascript Post Home Javascript Post Notebook .",
          "url": "https://samarthkalanke.github.io/SamarthKalanke/_pages/Submenu.html",
          "relUrl": "/_pages/Submenu.html",
          "date": ""
      }
      
  

  
      ,"page3": {
          "title": "About Samarth",
          "content": "Samarth is a student in APCSP trying to learns the ins and outs of a computer Samarth Kalanke 1. . Someone who wants to learn and grow in this field who wants to create an amazing foundation. &#8617; . |",
          "url": "https://samarthkalanke.github.io/SamarthKalanke/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  

  
  

  
      ,"page13": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://samarthkalanke.github.io/SamarthKalanke/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}
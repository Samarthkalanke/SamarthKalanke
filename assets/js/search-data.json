{
  
    
        "post0": {
            "title": "Performance task table",
            "content": "Student 1 . Reporting Category Student Score College Board Score Comments . Program Purpose and Function | 1 | 0 | He had all that he needed but just describe | . Data Abstraction | 1 | 0 | He met all the scoring criteria | . Managing Complexity | 0 | 0 | He didn’t have any of the requirements | . Procedral Abstraction | 1 | 0 | Had everything he needed to have | . Algorithim Implentation | 1 | 0 | Had everything that he needed to have | . Testing | 1 | 1 | Tested correctly and had everything | .",
            "url": "https://samarthkalanke.github.io/SamarthKalanke/markdown/2023/11/01/PerformancetaskScoring2.html",
            "relUrl": "/markdown/2023/11/01/PerformancetaskScoring2.html",
            "date": " • Nov 1, 2023"
        }
        
    
  
    
        ,"post1": {
            "title": "Data Structures Guide",
            "content": "Objectives: . Students will be able to... . Understand the concept of data structures, including lists, dictionaries, and 2D arrays | Learn how to iterate through data structures using loops | Able to visualize data structures and iteration processes | Able to apply their knowledge to build simulations/interactions using lists and iteration | Learn how to store list and dictionary content in databases | . Lesson 1: Lists and Iteration . Lists (Ethan) . Lists are a type of data structure that can store multiple items in a single variable | Lists are defined using square brackets [ ] | Each item in a list is separated by a comma | Lists are indexed, starting at 0 | . fruits = [&quot;apple&quot;, &quot;banana&quot;, &quot;orange&quot;, &quot;grape&quot;] print(fruits) . [&#39;apple&#39;, &#39;banana&#39;, &#39;orange&#39;, &#39;grape&#39;] . Accessing Lists . To access individual items in a list, we use the index of the item. | Python uses zero-based indexing, which means the first item in the list has an index of 0, the second item has an index of 1, and so on. | . print(fruits[0]) print(fruits[2]) . apple orange . Slicing Lists . We can also extract a specific portion of a list using slicing. | We use the colon : operator to specify a range of indices to include. | . print(fruits[0:2]) . [&#39;apple&#39;, &#39;banana&#39;] . Modifying List Items . Lists are mutable, meaning that we can change the value of an item in a list. | To change the value of an item in a list, we can use the indexing operator (square brackets) to access the item and then assign a new value to it. | . fruits[2] = &quot;pear&quot; print(fruits) . [&#39;apple&#39;, &#39;banana&#39;, &#39;pear&#39;, &#39;grape&#39;, &#39;kiwi&#39;] . Adding and Removing List Items . Adding . Use the append() method to add an item to the end of a list. | . fruits.append(&quot;kiwi&quot;) # Adds &#39;kiwi&#39; to the end of the list print(fruits) . [&#39;apple&#39;, &#39;banana&#39;, &#39;pear&#39;, &#39;grape&#39;, &#39;kiwi&#39;, &#39;kiwi&#39;] . Use the insert() method to add an item to a specific index in a list. | . fruits.insert(1, &quot;peach&quot;) # Inserts &quot;peach&quot; at index 1 print(fruits) . [&#39;apple&#39;, &#39;peach&#39;, &#39;banana&#39;, &#39;pear&#39;, &#39;grape&#39;, &#39;kiwi&#39;, &#39;kiwi&#39;] . Removing . Use the remove() method to remove the first occurrence of an item from a list. | . fruits.remove(&#39;pear&#39;) # Removes the first occurrence of &#39;pear&#39; print(fruits) . [&#39;apple&#39;, &#39;peach&#39;, &#39;banana&#39;, &#39;grape&#39;, &#39;kiwi&#39;, &#39;kiwi&#39;] . Use the pop() method to remove the item at a specific index from a list. | . fruits.pop(2) # Removes the item at index 2 print(fruits) . [&#39;apple&#39;, &#39;peach&#39;, &#39;grape&#39;, &#39;kiwi&#39;, &#39;kiwi&#39;] . Use the clear() method to remove all items from a list. | . fruits.clear() # Removes all items from the list print(fruits) . [] . Function Explanation . InsertToList . This function is designed to insert a new item into a list at a specific index. | It first retrieves the new item to be added and the index at which to add it from the HTML document. | It checks if the retrieved values are both valid integers and if the index is within the range of the list. | If the values are valid, the function uses the splice() method to insert the new item into the list at the specified index. | In JavaScript, the splice() method modifies an array by removing, replacing, or adding elements. | The splice() method takes three arguments:the index at which to start changing the list, the number of elements to remove, and the new item to add. - The item is inserted without removing any elements, so we pass 0 as the second argument. | Finally, the function calls the visualizeList() function to display the updated list on the web page. | . // Get the value of the new item and the index where it should be inserted function insertToList() { let newItem = parseInt(document.getElementById(&quot;newItem&quot;).value); let index = parseInt(document.getElementById(&quot;index&quot;).value); if (!isNaN(newItem) &amp;&amp; !isNaN(index) &amp;&amp; index &gt;= 0 &amp;&amp; index &lt;= myList.length) { // splice() method to insert the new item into the list myList.splice(index - 1, 0, newItem); // Call the visualizeList() function to update the display of the list visualizeList(); } } . SortList . In JavaScript, sort() is a built-in method used to sort the elements of an array in place. The default sort order is ascending, but you can also specify a descending sort order. | In this case, the function sorts myList in ascending order based on their numerical value. | . // Sort myList array in ascending order function sortList() { // The function a - b is used, which subtracts the second element b from the first element a. // If the result is negative, a is sorted before b. If the result is positive, b is sorted before a. If the result is zero, the order of the elements is unchanged. myList.sort((a, b) =&gt; a - b); visualizeList(); } . Applications of Lists . Data processing: Lists are commonly used to store and process large amounts of data. In data analysis and machine learning, lists are often used to store datasets. . | Gaming: Lists are used extensively in game development to store game objects, player statistics, and game maps. . | Finance: Lists are used in finance to store and process financial data, such as stock prices and market trends. The data from these lists can also be used to calculate financial metrics and to create financial models. . | . Hacks (0.3) . Make your own list and manipulate it via accessing specific elements, adding or removing elements, etc. | Extra: Make an interactable visualization that can manipulate elements in a list such as the one demonstrated in our flask repository | . My own list . marvel_movies = [&quot;Iron Man&quot;, &quot;Captain America: The First Avenger&quot;, &quot;Marvel&#39;s The Avengers&quot;, &quot;Thor: Ragnarok&quot;, &quot;Black Panther&quot;, &quot;Avengers: Infinity War&quot;, &quot;Captain Marvel&quot;, &quot;Avengers: Endgame&quot;] #append method marvel_movies.append(&quot;Spider-Man: Far From Home&quot;) #insert method marvel_movies.insert(3, &quot;Guardians of the Galaxy&quot;) #remove method marvel_movies.remove(&quot;Captain America: The First Avenger&quot;) #sort method marvel_movies.sort() #reverse method marvel_movies.reverse() #len method num_movies = len(marvel_movies) print(marvel_movies) print(&quot;Number of movies:&quot;, num_movies) . [&#39;Thor: Ragnarok&#39;, &#39;Spider-Man: Far From Home&#39;, &#34;Marvel&#39;s The Avengers&#34;, &#39;Iron Man&#39;, &#39;Guardians of the Galaxy&#39;, &#39;Captain Marvel&#39;, &#39;Black Panther&#39;, &#39;Avengers: Infinity War&#39;, &#39;Avengers: Endgame&#39;] Number of movies: 9 . names = [&quot;Ananya&quot;, &quot;Alexa&quot;, &quot;Ava&quot;, &quot;Samarth&quot;, &quot;Theo&quot;, &quot;Haseeb&quot;] # here I am accessing the index 0 print(names[0]) # here the name Mort is being added to the end of the list names.append(&quot;Mort&quot;) print(names) # here I am removing an element from the list the value names.remove(&quot;Theo&quot;) print(names) # here I am removing an element from the list by the index del names[2] print(names) # here I am replacinng an element by index names[3] = &quot;Hi&quot; print(names) . Ananya [&#39;Ananya&#39;, &#39;Alexa&#39;, &#39;Ava&#39;, &#39;Samarth&#39;, &#39;Theo&#39;, &#39;Haseeb&#39;, &#39;Mort&#39;] [&#39;Ananya&#39;, &#39;Alexa&#39;, &#39;Ava&#39;, &#39;Samarth&#39;, &#39;Haseeb&#39;, &#39;Mort&#39;] [&#39;Ananya&#39;, &#39;Alexa&#39;, &#39;Samarth&#39;, &#39;Haseeb&#39;, &#39;Mort&#39;] [&#39;Ananya&#39;, &#39;Alexa&#39;, &#39;Samarth&#39;, &#39;Hi&#39;, &#39;Mort&#39;] . names = [&quot;Ananya&quot;, &quot;Alexa&quot;, &quot;Ava&quot;, &quot;Samarth&quot;, &quot;Theo&quot;, &quot;Haseeb&quot;] new_names = [] for x in names: if &quot;e&quot; in x: new_names.append(x) print(new_names) . [&#39;Alexa&#39;, &#39;Theo&#39;, &#39;Haseeb&#39;] . names = [&quot;Ananya&quot;, &quot;Alexa&quot;, &quot;Ava&quot;, &quot;Samarth&quot;, &quot;Theo&quot;, &quot;Haseeb&quot;] new_names = [x for x in names if &quot;A&quot; in x] print(new_names) . [&#39;Ananya&#39;, &#39;Alexa&#39;, &#39;Ava&#39;] . names = [&quot;Ananya&quot;, &quot;Alexa&quot;, &quot;Ava&quot;, &quot;Samarth&quot;, &quot;Theo&quot;, &quot;Haseeb&quot;] print(names[0:4]) . [&#39;Ananya&#39;, &#39;Alexa&#39;, &#39;Ava&#39;, &#39;Samarth&#39;] . print(names[:5]) . [&#39;Ananya&#39;, &#39;Alexa&#39;, &#39;Ava&#39;, &#39;Samarth&#39;, &#39;Theo&#39;] . singers = [&#39;Adele&#39;, &#39;Beyonce&#39;, &#39;Ed Sheeran&#39;, &#39;Taylor Swift&#39;, &#39;Bruno Mars&#39;] while True: print(&quot;Current list of favorite singers:&quot;, singers) choice = input(&quot;Do you want to append, remove or replace a singer? (a/r/p): &quot;) if choice == &#39;a&#39;: new_singer = input(&quot;Enter the name of the new singer: &quot;) singers.append(new_singer) elif choice == &#39;r&#39;: singer_to_remove = input(&quot;Enter the name of the singer to remove: &quot;) if singer_to_remove in singers: singers.remove(singer_to_remove) else: print(&quot;The singer is not in the list.&quot;) elif choice == &#39;p&#39;: singer_to_replace = input(&quot;Enter the name of the singer to replace: &quot;) if singer_to_replace in singers: index = singers.index(singer_to_replace) new_singer = input(&quot;Enter the name of the new singer: &quot;) singers[index] = new_singer else: print(&quot;The singer is not in the list.&quot;) else: print(&quot;Invalid choice.&quot;) continue_choice = input(&quot;Do you want to make another change? (y/n): &quot;) if continue_choice != &#39;y&#39;: break print(&quot;Final list of favorite singers:&quot;, singers) . Current list of favorite singers: [&#39;Adele&#39;, &#39;Beyonce&#39;, &#39;Ed Sheeran&#39;, &#39;Taylor Swift&#39;, &#39;Bruno Mars&#39;] Current list of favorite singers: [&#39;Adele&#39;, &#39;Beyonce&#39;, &#39;Ed Sheeran&#39;, &#39;Taylor Swift&#39;, &#39;Bruno Mars&#39;, &#39;Ariana&#39;] Current list of favorite singers: [&#39;Adele&#39;, &#39;Beyonce&#39;, &#39;Taylor Swift&#39;, &#39;Bruno Mars&#39;, &#39;Ariana&#39;] Final list of favorite singers: [&#39;Adele&#39;, &#39;Beyonce&#39;, &#39;Taylor Swift&#39;, &#39;Bruno Mars&#39;, &#39;Ariana&#39;, &#39;BTS&#39;] . Iteration (Alex) . What is iteration? . In programming, iteration refers to the process of repeating a set of instructions until a specific condition is met. This can be achieved using loop structures like for loops and while loops. | . For Loops . A for loop is used to iterate over a sequence (e.g. a list, tuple, string, etc.) and execute a set of statements for each item in the sequence. Here&#39;s the basic syntax of a for loop in Python: | . sequence = [1,2,3,4,5,6,7] for variable in sequence: print(variable) . 1 2 3 4 5 6 7 . my_string = &quot;Hello, World!&quot; for character in my_string: print(character) . H e l l o , W o r l d ! . While Loops A while loop is used to repeat a set of statements as long as a condition is true. Here&#39;s the basic syntax of a while loop in Python: . num = 0 while num &lt; 5: print(num) num += 1 . 0 1 2 3 4 . Applications of Iteration . Iteration is a fundamental concept in computer programming and is used in a variety of real-life applications. Here are some examples:Data Processing . Data processing often involves iterating over large datasets to perform specific operations on each element. For example, in a data analysis task, you might iterate over a list of numbers to compute the average, or iterate over a list of strings to find the longest string. | . User Interfaces . User interfaces often involve iteration to display and handle data from various sources. For example, in a web application, you might iterate over a list of users to display their information in a table. Similarly, in a desktop application, you might iterate over a list of files to display them in a file explorer. | . Machine Learning . Machine learning algorithms often involve iterative processes to train models and improve their accuracy. For example, in a gradient descent algorithm, you might iterate over a set of training data to update the model&#39;s parameters and minimize the loss function. | . Popcorn hack (0.3) . Make a list related to your CPT project | Make a while loop that will print each term in the list | Make a for loop that will print each term in the list | . Simulation mechanics . In Python, pop() is a method that is used to remove and return an element from a list. The syntax for using pop() is as follows: | . List related to my cpt project: . My cpt project is related to nutrtition, so I will make a food list. . nutrition_wizard = [&quot;1 cup rice&quot;, &quot;10 oz milk,&quot;, &quot;1 apple&quot;, &quot;2 pound chicken&quot;] i = 0 while i &lt; len(nutrition_wizard): print(nutrition_wizard[i]) i += 1 . 1 cup rice 10 oz milk, 1 apple 2 pound chicken . nutrition_wizard = [&quot;1 cup rice&quot;, &quot;10 oz milk,&quot;, &quot;1 apple&quot;, &quot;2 pound chicken&quot;] for a in nutrition_wizard: print(a) . 1 cup rice 10 oz milk, 1 apple 2 pound chicken . nutrition_wizard = [&quot;1 cup rice&quot;, &quot;10 oz milk,&quot;, &quot;1 apple&quot;, &quot;2 pound chicken&quot;] for var in nutrition_wizard: print(var) . 1 cup rice 10 oz milk, 1 apple 2 pound chicken . my_list = [1, 2, 3, 4, 5] print(my_list) my_list.pop() print(my_list) my_list.pop(1) print(my_list) . [1, 2, 3, 4, 5] [1, 2, 3, 4] [1, 3, 4] . In Python, append() is a built-in method that is used to add an element to the end of a list. The syntax for using append() is as follows: . my_list = [] my_list.append(1) my_list.append(2) my_list.append(3) print(my_list) . [1, 2, 3] . Dictionary Lesson / 2D Arrays . Lesson 2: Dictionary&#39;s and 2 Dimensional Arrays . Advay Shindikar and Amay Advani . Objective: . Understand the concept of dictionaries and how they can be applied | Learn how to add, modify, and delete entries in a dictionary using the assignment operator and the del keyword | Understand the concept of 2D arrays and how they can be used to store data in rows and columns | Learn how to create a 2D array in Python using a nested list | Understand how to access values in a 2D array using row and column indices | Learn how to use indexing and slicing to access a subset of a 2D array | . . student = {&#39;name&#39;: &#39;Advay&#39;, &#39;age&#39;: 16, &#39;Sophomore&#39;} . students = [&#39;advay&#39;, &#39;amay&#39;, &#39;rohin&#39;, &#39;alex&#39;, &#39;ethan&#39;] . . Check In: . Of the above code segments, which is a list and which is a dictionary? The dictionary is called student with the key and value pairs. &lt;/li&gt; What is a dictionary and how is it used? The dictionary is called &quot;student: It has key and value pairs. The keys being name and age. The values being Advay and 16.&lt;/li&gt; What is a 2D Array? An array of arrays, where each element in the array represents a row, and each nested array represents a column of elements.&lt;/p&gt; &lt;/li&gt; How are 2D Arrays different from 1D Arrays or Lists and what can they be used for? . | &lt;/ul&gt; A 2D array is a way to store data in a table with rows and columns, whereas a 1D array or list is just a sequence of data in a single row. 2D arrays are useful for organizing and accessing data in a tabular format.&lt;/p&gt; Manipulating Dictionaries . &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; grocery_dict = {} # ask the user to enter grocery items and their prices while True: item = input(&quot;Enter an item for your grocery list (or &#39;done&#39; to exit): &quot;) if item == &quot;done&quot;: break else: price = float(input(&quot;Enter the price of {}: &quot;.format(item))) grocery_dict[item] = price # print the grocery list and total cost total_cost = 0 while True: print(&quot;Your grocery list:&quot;) for item, price in grocery_dict.items(): print(&quot;- {}: ${}&quot;.format(item, price)) print(&quot;Total cost: ${}&quot;.format(total_cost)) # ask the user to choose an action action = input(&quot;What would you like to do? (add/remove/done) &quot;) # add a new item to the grocery list if action == &quot;add&quot;: item = input(&quot;Enter the name of the item you would like to add: &quot;) price = float(input(&quot;Enter the price of {}: &quot;.format(item))) grocery_dict[item] = price total_cost += price # remove an item from the j item = input(&quot;Enter the name of the item you would like to remove: &quot;) if item in grocery_dict: total_cost -= grocery_dict[item] del grocery_dict[item] else: print(&quot;Item not found in grocery list!&quot;) # exit the loop and print the final grocery list and total cost elif action == &quot;done&quot;: break print(&quot;Final grocery list:&quot;) for item, price in grocery_dict.items(): print(&quot;- {}: ${}&quot;.format(item, price)) print(&quot;Total cost: ${}&quot;.format(total_cost)) . Your grocery list: - apple: $2.99 - milk: $3.99 Total cost: $0 Item not found in grocery list! Your grocery list: - apple: $2.99 - milk: $3.99 - chocolate: $1.99 Total cost: $1.99 Final grocery list: - apple: $2.99 - milk: $3.99 - chocolate: $1.99 Total cost: $1.99 . Movies . movies_dict = {} # ask the user to enter movie titles and their ratings while True: title = input(&quot;Enter a movie title for your list (or &#39;done&#39; to exit): &quot;) if title == &quot;done&quot;: break else: rating = float(input(&quot;Enter the rating (out of 10) of {}: &quot;.format(title))) movies_dict[title] = rating # print the movie list and average rating while True: print(&quot;Your movie list:&quot;) for title, rating in movies_dict.items(): print(&quot;- {}: {} / 10&quot;.format(title, rating)) average_rating = sum(movies_dict.values()) / len(movies_dict) print(&quot;Average rating: {:.2f} / 10&quot;.format(average_rating)) # ask the user to choose an action action = input(&quot;What would you like to do? (add/remove/done) &quot;) # add a new movie to the list if action == &quot;add&quot;: title = input(&quot;Enter the title of the movie you would like to add: &quot;) rating = float(input(&quot;Enter the rating (out of 10) of {}: &quot;.format(title))) movies_dict[title] = rating # remove a movie from the list elif action == &quot;remove&quot;: title = input(&quot;Enter the title of the movie you would like to remove: &quot;) if title in movies_dict: del movies_dict[title] else: print(&quot;Movie not found in list!&quot;) # exit the loop and print the final movie list and average rating elif action == &quot;done&quot;: break print(&quot;Final movie list:&quot;) for title, rating in movies_dict.items(): print(&quot;- {}: {} / 10&quot;.format(title, rating)) average_rating = sum(movies_dict.values()) / len(movies_dict) print(&quot;Average rating: {:.2f} / 10&quot;.format(average_rating)) . Your movie list: - Avatar: 9.0 / 10 - Frozen: 6.0 / 10 - Endgame: 7.0 / 10 - Sing: 4.0 / 10 - Conjuring: 10.0 / 10 Average rating: 7.20 / 10 Your movie list: - Avatar: 9.0 / 10 - Frozen: 6.0 / 10 - Endgame: 7.0 / 10 - Sing: 4.0 / 10 - Conjuring: 10.0 / 10 - Evil Dead: 10.0 / 10 Average rating: 7.67 / 10 Final movie list: - Avatar: 9.0 / 10 - Frozen: 6.0 / 10 - Endgame: 7.0 / 10 - Sing: 4.0 / 10 - Conjuring: 10.0 / 10 - Evil Dead: 10.0 / 10 Average rating: 7.67 / 10 . &lt;/div&gt; . | | | .",
            "url": "https://samarthkalanke.github.io/SamarthKalanke/2023/05/04/EAARHAX.html",
            "relUrl": "/2023/05/04/EAARHAX.html",
            "date": " • May 4, 2023"
        }
        
    
  
    
        ,"post2": {
            "title": "Model and Object-Oriented Programming",
            "content": "Class and Object Terms . The foundations of Object-Oriented Programming is defining a Class . In Object-Oriented Programming (OOP), a class is a blueprint for creating an Object. (a data structure). An Object is used like many other Python variables. | A Class has ... a collection of data, these are called Attributes and in Python are pre-fixed using the keyword self | a collection of Functions/Procedures. These are called *Methods when they exist inside a Class definition. | . | An Object is created from the Class/Template. Characteristics of objects ... an Object is an Instance of the Class/Template | there can be many Objects created from the same Class | each Object contains its own Instance Data | the data is setup by the Constructor, this is the &quot;init&quot; method in a Python class | all methods in the Class/Template become part of the Object, methods are accessed using dot notation (object.method()) | . | A Python Class allow for the definition of @ decorators, these allow access to instance data without the use of functions ... @property decorator (aka getter). This enables developers to reference/get instance data in a shorthand fashion (object.name versus object.get_name()) | @name.setter decorator (aka setter). This enables developers to update/set instance data in a shorthand fashion (object.name = &quot;John&quot; versus object.set_name(&quot;John&quot;)) | observe all instance data (self._name, self.email ...) are prefixed with &quot;&quot;, this convention allows setters and getters to work with more natural variable name (name, email ...) | . | . Class and Object Code . # Werkzeug is a collection of libraries that can be used to create a WSGI (Web Server Gateway Interface) # A gateway in necessary as a web server cannot communicate directly with Python. # In this case, imports are focused on generating hash code to protect passwords. from werkzeug.security import generate_password_hash, check_password_hash import json # Define a User Class/Template # -- A User represents the data we want to manage class User: # constructor of a User object, initializes the instance variables within object (self) def __init__(self, name, uid, password): self._name = name # variables with self prefix become part of the object, self._uid = uid self.set_password(password) # a name getter method, extracts name from object @property def name(self): return self._name # a setter function, allows name to be updated after initial object creation @name.setter def name(self, name): self._name = name # a getter method, extracts email from object @property def uid(self): return self._uid # a setter function, allows name to be updated after initial object creation @uid.setter def uid(self, uid): self._uid = uid # check if uid parameter matches user id in object, return boolean def is_uid(self, uid): return self._uid == uid @property def password(self): return self._password[0:10] + &quot;...&quot; # because of security only show 1st characters # update password, this is conventional setter def set_password(self, password): &quot;&quot;&quot;Create a hashed password.&quot;&quot;&quot; self._password = generate_password_hash(password, method=&#39;sha256&#39;) # check password parameter versus stored/encrypted password def is_password(self, password): &quot;&quot;&quot;Check against hashed password.&quot;&quot;&quot; result = check_password_hash(self._password, password) return result # output content using str(object) in human readable form, uses getter def __str__(self): return f&#39;name: &quot;{self.name}&quot;, id: &quot;{self.uid}&quot;, psw: &quot;{self.password}&quot;&#39; # output command to recreate the object, uses attribute directly def __repr__(self): return f&#39;Person(name={self._name}, uid={self._uid}, password={self._password})&#39; def __dir__(self): return [&quot;name&quot;, &quot;uid&quot;] # tester method to print users def tester(users, uid, psw): result = None for user in users: # test for match in database if user.uid == uid and user.is_password(psw): # check for match print(&quot;* &quot;, end=&quot;&quot;) result = user # print using __str__ method print(str(user)) return result # place tester code inside of special if! This allows include without tester running if __name__ == &quot;__main__&quot;: # define user objects u1 = User(name=&#39;Thomas Edison&#39;, uid=&#39;toby&#39;, password=&#39;123toby&#39;) u2 = User(name=&#39;Nicholas Tesla&#39;, uid=&#39;nick&#39;, password=&#39;123nick&#39;) u3 = User(name=&#39;Alexander Graham Bell&#39;, uid=&#39;lex&#39;, password=&#39;123lex&#39;) u4 = User(name=&#39;Eli Whitney&#39;, uid=&#39;eli&#39;, password=&#39;123eli&#39;) u5 = User(name=&#39;Hedy Lemarr&#39;, uid=&#39;hedy&#39;, password=&#39;123hedy&#39;) # put user objects in list for convenience users = [u1, u2, u3, u4, u5] # Find user print(&quot;Test 1, find user 3&quot;) u = tester(users, u3.uid, &quot;123lex&quot;) # Change user print(&quot;Test 2, change user 3&quot;) u.name = &quot;John Mortensen&quot; u.uid = &quot;jm1021&quot; u.set_password(&quot;123qwerty&quot;) u = tester(users, u.uid, &quot;123qwerty&quot;) # Make dictionary &#39;&#39;&#39; The __dict__ in Python represents a dictionary or any mapping object that is used to store the attributes of the object. Every object in Python has an attribute that is denoted by __dict__. Use the json.dumps() method to convert the list of Users to a JSON string. &#39;&#39;&#39; print(&quot;Test 3, make a dictionary&quot;) json_string = json.dumps([user.__dict__ for user in users]) print(json_string) print(&quot;Test 4, make a dictionary&quot;) json_string = json.dumps([vars(user) for user in users]) print(json_string) . Test 1, find user 3 name: &#34;Thomas Edison&#34;, id: &#34;toby&#34;, psw: &#34;sha256$VZ6...&#34; name: &#34;Nicholas Tesla&#34;, id: &#34;nick&#34;, psw: &#34;sha256$5mG...&#34; * name: &#34;Alexander Graham Bell&#34;, id: &#34;lex&#34;, psw: &#34;sha256$50p...&#34; name: &#34;Eli Whitney&#34;, id: &#34;eli&#34;, psw: &#34;sha256$qpx...&#34; name: &#34;Hedy Lemarr&#34;, id: &#34;hedy&#34;, psw: &#34;sha256$Qrr...&#34; Test 2, change user 3 name: &#34;Thomas Edison&#34;, id: &#34;toby&#34;, psw: &#34;sha256$VZ6...&#34; name: &#34;Nicholas Tesla&#34;, id: &#34;nick&#34;, psw: &#34;sha256$5mG...&#34; * name: &#34;John Mortensen&#34;, id: &#34;jm1021&#34;, psw: &#34;sha256$rXF...&#34; name: &#34;Eli Whitney&#34;, id: &#34;eli&#34;, psw: &#34;sha256$qpx...&#34; name: &#34;Hedy Lemarr&#34;, id: &#34;hedy&#34;, psw: &#34;sha256$Qrr...&#34; Test 3, make a dictionary [{&#34;_name&#34;: &#34;Thomas Edison&#34;, &#34;_uid&#34;: &#34;toby&#34;, &#34;_password&#34;: &#34;sha256$VZ6YE3wOIKULazyt$67f2b4ad2470130819590b895b77c0dc593c2c0a1f1d0cbb6f716b250ebc7b9c&#34;}, {&#34;_name&#34;: &#34;Nicholas Tesla&#34;, &#34;_uid&#34;: &#34;nick&#34;, &#34;_password&#34;: &#34;sha256$5mGpLjBkE8isXPtN$2818a6d2924984c1064a835ef291304fe2157c3019ac84be00b928e7882b90f9&#34;}, {&#34;_name&#34;: &#34;John Mortensen&#34;, &#34;_uid&#34;: &#34;jm1021&#34;, &#34;_password&#34;: &#34;sha256$rXFrLFStOrylsCS5$c00b00b23720c426299a68f67be0a31d80b4181de13ddf549d6e07b7a293bec5&#34;}, {&#34;_name&#34;: &#34;Eli Whitney&#34;, &#34;_uid&#34;: &#34;eli&#34;, &#34;_password&#34;: &#34;sha256$qpxtmahbzDD5kLpc$9e26c77bd2811f27f554ddecd36a6bf24a805e1936627c10e05ee1ba3e508bd0&#34;}, {&#34;_name&#34;: &#34;Hedy Lemarr&#34;, &#34;_uid&#34;: &#34;hedy&#34;, &#34;_password&#34;: &#34;sha256$QrriRqg3xp5GNkFQ$ea6642c3ad6db03094bb69e72b42f6d78e816ff3f3ead8f90da702580cecb151&#34;}] Test 4, make a dictionary [{&#34;_name&#34;: &#34;Thomas Edison&#34;, &#34;_uid&#34;: &#34;toby&#34;, &#34;_password&#34;: &#34;sha256$VZ6YE3wOIKULazyt$67f2b4ad2470130819590b895b77c0dc593c2c0a1f1d0cbb6f716b250ebc7b9c&#34;}, {&#34;_name&#34;: &#34;Nicholas Tesla&#34;, &#34;_uid&#34;: &#34;nick&#34;, &#34;_password&#34;: &#34;sha256$5mGpLjBkE8isXPtN$2818a6d2924984c1064a835ef291304fe2157c3019ac84be00b928e7882b90f9&#34;}, {&#34;_name&#34;: &#34;John Mortensen&#34;, &#34;_uid&#34;: &#34;jm1021&#34;, &#34;_password&#34;: &#34;sha256$rXFrLFStOrylsCS5$c00b00b23720c426299a68f67be0a31d80b4181de13ddf549d6e07b7a293bec5&#34;}, {&#34;_name&#34;: &#34;Eli Whitney&#34;, &#34;_uid&#34;: &#34;eli&#34;, &#34;_password&#34;: &#34;sha256$qpxtmahbzDD5kLpc$9e26c77bd2811f27f554ddecd36a6bf24a805e1936627c10e05ee1ba3e508bd0&#34;}, {&#34;_name&#34;: &#34;Hedy Lemarr&#34;, &#34;_uid&#34;: &#34;hedy&#34;, &#34;_password&#34;: &#34;sha256$QrriRqg3xp5GNkFQ$ea6642c3ad6db03094bb69e72b42f6d78e816ff3f3ead8f90da702580cecb151&#34;}] . Hacks . Add new attributes/variables to the Class. Make class specific to your CPT work. . Add classOf attribute to define year of graduation Add setter and getter for classOf | . | Add dob attribute to define date of birth This will require investigation into Python datetime objects as shown in example code below | Add setter and getter for dob | . | Add instance variable for age, make sure if dob changes age changes Add getter for age, but don&#39;t add/allow setter for age | . | Update and format tester function to work with changes | . Start a class design for each of your own Full Stack CPT sections of your project . Use new code cell in this notebook | Define init and self attributes | Define setters and getters | Make a tester | . Start Code for Hacks . from datetime import date def calculate_age(born): today = date.today() return today.year - born.year - ((today.month, today.day) &lt; (born.month, born.day)) dob = date(2004, 12, 31) age = calculate_age(dob) print(age) . Hack Helper . This ended up being harder than anticipated, complete hacks from this update. . from werkzeug.security import generate_password_hash, check_password_hash from datetime import date import json class User: def __init__(self, name, uid, password, dob): self._name = name # variables with self prefix become part of the object, self._uid = uid self.set_password(password) self._dob = dob @property def name(self): return self._name # a setter function, allows name to be updated after initial object creation @name.setter def name(self, name): self._name = name # a getter method, extracts email from object @property def uid(self): return self._uid # a setter function, allows name to be updated after initial object creation @uid.setter def uid(self, uid): self._uid = uid # check if uid parameter matches user id in object, return boolean def is_uid(self, uid): return self._uid == uid # dob property is returned as string, to avoid unfriendly outcomes @property def dob(self): dob_string = self._dob.strftime(&#39;%m-%d-%Y&#39;) return dob_string # dob should be have verification for type date @dob.setter def dob(self, dob): self._dob = dob # age is calculated and returned each time it is accessed @property def age(self): today = date.today() return today.year - self._dob.year - ((today.month, today.day) &lt; (self._dob.month, self._dob.day)) # dictionary is customized, removing password for security purposes @property def dictionary(self): dict = { &quot;name&quot; : self.name, &quot;uid&quot; : self.uid, &quot;dob&quot; : self.dob, &quot;age&quot; : self.age } return dict # update password, this is conventional setter def set_password(self, password): &quot;&quot;&quot;Create a hashed password.&quot;&quot;&quot; self._password = generate_password_hash(password, method=&#39;sha256&#39;) # check password parameter versus stored/encrypted password def is_password(self, password): &quot;&quot;&quot;Check against hashed password.&quot;&quot;&quot; result = check_password_hash(self._password, password) return result # output content using json dumps, this is ready for API response def __str__(self): return json.dumps(self.dictionary) # output command to recreate the object, uses attribute directly def __repr__(self): return f&#39;User(name={self._name}, uid={self._uid}, password={self._password},dob={self._dob})&#39; if __name__ == &quot;__main__&quot;: u1 = User(name=&#39;Thomas Edison&#39;, uid=&#39;toby&#39;, password=&#39;123toby&#39;, dob=date(1847, 2, 11)) print(&quot;JSON ready string: n&quot;, u1, &quot; n&quot;) print(&quot;Raw Variables of object: n&quot;, vars(u1), &quot; n&quot;) print(&quot;Raw Attributes and Methods of object: n&quot;, dir(u1), &quot; n&quot;) print(&quot;Representation to Re-Create the object: n&quot;, repr(u1), &quot; n&quot;) . JSON ready string: {&#34;name&#34;: &#34;Thomas Edison&#34;, &#34;uid&#34;: &#34;toby&#34;, &#34;dob&#34;: &#34;02-11-1847&#34;, &#34;age&#34;: 175} Raw Variables of object: {&#39;_name&#39;: &#39;Thomas Edison&#39;, &#39;_uid&#39;: &#39;toby&#39;, &#39;_password&#39;: &#39;sha256$dBncgmYQ6KfvH4Uj$d1330a19a97f1af9262576651e59fa257dc1649cd94a91fa0c097de3795f9940&#39;, &#39;_dob&#39;: datetime.date(1847, 2, 11)} Raw Attributes and Methods of object: [&#39;__class__&#39;, &#39;__delattr__&#39;, &#39;__dict__&#39;, &#39;__dir__&#39;, &#39;__doc__&#39;, &#39;__eq__&#39;, &#39;__format__&#39;, &#39;__ge__&#39;, &#39;__getattribute__&#39;, &#39;__gt__&#39;, &#39;__hash__&#39;, &#39;__init__&#39;, &#39;__init_subclass__&#39;, &#39;__le__&#39;, &#39;__lt__&#39;, &#39;__module__&#39;, &#39;__ne__&#39;, &#39;__new__&#39;, &#39;__reduce__&#39;, &#39;__reduce_ex__&#39;, &#39;__repr__&#39;, &#39;__setattr__&#39;, &#39;__sizeof__&#39;, &#39;__str__&#39;, &#39;__subclasshook__&#39;, &#39;__weakref__&#39;, &#39;_dob&#39;, &#39;_name&#39;, &#39;_password&#39;, &#39;_uid&#39;, &#39;age&#39;, &#39;dictionary&#39;, &#39;dob&#39;, &#39;is_password&#39;, &#39;is_uid&#39;, &#39;name&#39;, &#39;set_password&#39;, &#39;uid&#39;] Representation to Re-Create the object: Person(name=Thomas Edison, uid=toby, password=sha256$dBncgmYQ6KfvH4Uj$d1330a19a97f1af9262576651e59fa257dc1649cd94a91fa0c097de3795f9940,dob=1847-02-11) .",
            "url": "https://samarthkalanke.github.io/SamarthKalanke/2023/05/03/Mehacks.html",
            "relUrl": "/2023/05/03/Mehacks.html",
            "date": " • May 3, 2023"
        }
        
    
  
    
        ,"post3": {
            "title": "P4-M 4/24 Big Idea 3",
            "content": "Introduction: Zeen . Hello, my name is zeen and today we will be presenting big idea 3. Our topics include 2d arrays, iteration, and lists and dictionaries. . Objectives . Master the concepts of iteration, list, 2d-arrays, Dictionaries, and APIs . Vocab . Here is some vocab during the lesson, you should be familar with them already no need for me to read these out, now I will pass the speaking off to Kush . Iteration: A process that repates itself | Array: Sometimes called a list, can keep strings and intergers inside it | 2D-Array: A collection of data elements arranged in a grid-like structure with rows and columns | Mutable: the ability to be changed or modified | Key: A Singular identifier that is associated with a certin value | . 1: 2D Array . Tic Tac Toe:Kush Sirohi . What are some examples of 2d Arrays? | . Examples of 2D Arrays include: A chessboard where each row represents a row of the board and each column represents a column of the board. A spreadsheet, where each row represents a record and each column represents a specific field. Or a basic game board, where each row represents a row of the board and each column represents a column of the board. . What is a modern day game that could be classified as a 2D array? | . Tetris is a modern day puzzle game where players must stack falling blocks into complete rows. The game board is a 2D array, with each row representing a row of the board and each column representing a column of the board. . array = [&quot;Hello&quot;, &quot;Hi&quot;, &quot;Whats up&quot;] twoDArray = [[&quot;Name&quot;, &quot;ID&quot;, &quot;Age&quot;], [&quot;Kush&quot;, &quot;1&quot;, &quot;16&quot;], [&quot;Finn&quot;, &quot;2&quot;, &quot;16&quot;]] print(f&quot;This is a normal array: {array}&quot;) print(&quot;This is a 2D array&quot;) for row in twoDArray: print(row) . This is a normal array: [&#39;Hello&#39;, &#39;Hi&#39;, &#39;Whats up&#39;] This is a 2D array [&#39;Name&#39;, &#39;ID&#39;, &#39;Age&#39;] [&#39;Kush&#39;, &#39;1&#39;, &#39;16&#39;] [&#39;Finn&#39;, &#39;2&#39;, &#39;16&#39;] . How I used 2D Arrays (game example) . Describe a 2D array in your own words | . A 2D array is one with two dimensions, or axes. This means it can be viewed as a rectangular grid of elements. A 2D array element is uniquely recognized by its row and column indexes. . board = [[&#39; &#39;, &#39; &#39;, &#39; &#39;], [&#39; &#39;, &#39; &#39;, &#39; &#39;], [&#39; &#39;, &#39; &#39;, &#39; &#39;]] # Function to print the current state of the game board def print_board(): print(&quot; 0 1 2&quot;) for i in range(3): print(i, end=&#39; &#39;) for j in range(3): print(board[i][j], end=&#39; &#39;) print() # Function to check if a player has won the game def check_win(player): # Check rows for a win for i in range(3): if board[i][0] == player and board[i][1] == player and board[i][2] == player: return True # Check columns for a win for j in range(3): if board[0][j] == player and board[1][j] == player and board[2][j] == player: return True # Check diagonals for a win if board[0][0] == player and board[1][1] == player and board[2][2] == player: return True if board[0][2] == player and board[1][1] == player and board[2][0] == player: return True # If no win condition is met, return False return False # Function to check if the game is a tie def check_tie(): for i in range(3): for j in range(3): if board[i][j] == &#39; &#39;: return False return True # Function to play the game def play_game(): # Initialize player and turn counter player = &#39;X&#39; turns = 0 # Loop until the game is over while True: # Print the current state of the board print_board() # Get the player’s move row = int(input(f&quot;{player}&#39;s turn. Enter row (0-2): &quot;)) col = int(input(f&quot;{player}&#39;s turn. Enter column (0-2): &quot;)) # Check if the move is valid if board[row][col] == &#39; &#39;: board[row][col] = player turns += 1 # Check if the player has won if check_win(player): print_board() print(f&quot;{player} wins!&quot;) return # Check if the game is a tie if check_tie(): print_board() print(&quot;It&#39;s a tie!&quot;) return # Switch players player = &#39;O&#39; if player == &#39;X&#39; else &#39;X&#39; else: print(&quot;That space is already taken. Try again.&quot;) # Start the game play_game() . 2: Iteration . Robot Game:Finn Carpenter- What is the definition of iteration in your own words . Iteration is the process of repeating a procedure until the desired result is obtained. For example, a for loop can use iteration to step though objects in a list or array. . times = 0 numbers = [1, 2, 3, 4, 5] ## Loops for i in range(5): print(&quot;hi&quot;) while times &lt;= 5: print(&quot;hello&quot;) times = times + 1 ## Function with a parameters def print_numbers(x): for num in x: print(num) print_numbers(numbers) . hi hi hi hi hi hello hello hello hello hello hello 1 2 3 4 5 . Iteration Game . Link to the game | Play the levels (only play the first 2 in class) | Explain how the game relates to iteration | . The game is played by repeatedly pressing the arrow keys to move the square around the screen. This is an example of iteration, as the player is repeatedly performing the same action in order to achieve a goal. . How I used iteration (game example) . What parts of the code use iteration | . The for loops in the movements array. These loops iterate over the UPinput, DOWNinput, LEFTinput, and RIGHTinput variables to create an array of movements. . function run() { // Read input values from the HTML document and convert them to integers. UPinput = parseInt(document.getElementById(&quot;up&quot;).value); DOWNinput = parseInt(document.getElementById(&quot;down&quot;).value); LEFTinput = parseInt(document.getElementById(&quot;left&quot;).value); RIGHTinput = parseInt(document.getElementById(&quot;right&quot;).value); looper = parseInt(document.getElementById(&quot;loop&quot;).value); runner.style.opacity = 0; // Create an array to hold the movements. let movements = []; // Push &#39;up&#39; movements to the array. for (let l = 0; l &lt; looper; l++) { for (let k = 0; k &lt; UPinput; k++) { movements.push(up); } // Push &#39;down&#39; movements to the array. for (let i = 0; i &lt; DOWNinput; i++) { movements.push(down); } // Push &#39;left&#39; movements to the array. for (let a = 0; a &lt; LEFTinput; a++) { movements.push(left); } // Push &#39;right&#39; movements to the array. for (let c = 0; c &lt; RIGHTinput; c++) { movements.push(right); } } // Set the initial index to 0 and execute each movement in sequence with a delay of 800 milliseconds. let index = 0; let intervalId = setInterval(() =&gt; { // If the end of the movements array has been reached, stop executing movements. if (index &gt;= movements.length) { clearInterval(intervalId); win(); // Call the win function. return; } movements[index](); // Execute the movement at the current index. index++; // Increment the index. }, 800); } . 3: List and Dictionaries . Scramble Game:Edwin . List = [1, 2, 3, 4, 5] Dict = { 1: &quot;Hi&quot;, 2: &quot;Hello&quot;, 3: &quot;Whats Up&quot; } # Why Do I call 0 for the first thing in a list, but 1 for Dict # print(List[0]) print(Dict[1]) . 1 Hi . How I used a dictonary to make a game . Memory Game:James- Link . | . How I used List to make a game . Explain which parts of the code use lists | . First, the word_list variable is a list of computer science words. Secondly, the scrambled_word variable is a list of the letters in the randomly selected word, in a random order. Lastly, the guesses variable is a list of the number of guesses the user has made. . Explain what list manipulation is happening in that part | . The random.sample() function selects a random sample of elements from a list and is used to select a random sample of letters from the word string. The letters in the scrambled_word list are then placed in a random order. . import random word_list = [&quot;python&quot;, &quot;computer&quot;, &quot;programming&quot;, &quot;algorithm&quot;, &quot;database&quot;, &quot;function&quot;, &quot;variable&quot;, &quot;loop&quot;, &quot;iteration&quot;, &quot;array&quot;, &quot;mutable&quot;, &quot;insertion&quot;, &quot;deletion&quot;, &quot;key&quot;, &quot;API&quot;] word = random.choice(word_list) scrambled_word = &quot;&quot;.join(random.sample(word, len(word))) print(f&quot;Unscramble the following Computer Science Word: {scrambled_word}&quot;) hints = 1 guesses = 1 guess = &quot;&quot; while guess != word and guesses &lt;= 4: guess = input(&quot;What&#39;s the unscrambled word? &quot;).lower() if guess != word: print(&quot;Sorry, that&#39;s not the word. Try again!&quot;) if guesses == 1: guesses += 1 elif guesses == 2: print(f&quot;Hint 1: The first letter of the word is &#39;{word[0]}&#39;&quot;) guesses += 1 elif guesses == 3: print(f&quot;Hint 2: The second letter of the word is &#39;{word[1]}&#39;&quot;) guesses += 1 else: print(f&quot;All 4 Guesses have been used, you didn&#39;t unscramble the word, the word was {word}&quot;) guesses += 1 else: print(&quot;Congratulations, you unscrambled the word!&quot;) . Unscramble the following Computer Science Word: uatlmeb Congratulations, you unscrambled the word! . Hacks: Your Score/1 . General 0.3 . Copy this noteboook into your personal fastpages | Answer all questions put the question in a new markdown block (so we can grade faster) | . | . What are some examples of 2d Arrays? | Examples of 2D Arrays include: A chessboard where each row represents a row of the board and each column represents a column of the board. A spreadsheet, where each row represents a record and each column represents a specific field. Or a basic game board, where each row represents a row of the board and each column represents a column of the board. . What is a modern day game that could be classified as a 2D array? | Tetris is a modern day puzzle game where players must stack falling blocks into complete rows. The game board is a 2D array, with each row representing a row of the board and each column representing a column of the board. . Describe a 2D array in your own words | A 2D array is one with two dimensions, or axes. This means it can be viewed as a rectangular grid of elements. A 2D array element is uniquely recognized by its row and column indexes. . What is the definition of iteration in your own words | Iteration is the process of repeating a procedure until the desired result is obtained. For example, a for loop can use iteration to step though objects in a list or array. . Explain how the game relates to iteration | The game is played by repeatedly pressing the arrow keys to move the square around the screen. This is an example of iteration, as the player is repeatedly performing the same action in order to achieve a goal. . What parts of the code use iteration | The for loops in the movements array. These loops iterate over the UPinput, DOWNinput, LEFTinput, and RIGHTinput variables to create an array of movements. . Explain which parts of the code use lists | First, the word_list variable is a list of computer science words. Secondly, the scrambled_word variable is a list of the letters in the randomly selected word, in a random order. Lastly, the guesses variable is a list of the number of guesses the user has made. . Explain what list manipulation is happening in that part | The random.sample() function selects a random sample of elements from a list and is used to select a random sample of letters from the word string. The letters in the scrambled_word list are then placed in a random order. . a, b = 0, 1 # loop through 10 times to generate the first 10 numbers # First ten numbers in the Fibonacci sequence for i in range(10): print(a) a, b = b, a + b . 0 1 1 2 3 5 8 13 21 34 . 2D array 0.2 (can get up to 0.23) . Explain how the tic tac toe game works | . The code for the game creates a 3x3 grid and allows two players to take turns placing X&#39;s and O&#39;s. The first player to get three of their marks in a row wins the game. If all 9 squares are filled and no player has three marks in a row, the game is a tie. . Give 3 Examples of games that can be made from 2D arrays | . Connect four: This is another classic game that can be played by two players. Each player takes turns dropping their colored disc into a 7x6 grid. The first player to get four of their discs in a row, either horizontally, vertically, or diagonally, wins the game. . | Minesweeper: This is a single-player game where the player must clear a grid of mines without detonating any of them. The player is given clues about the location of the mines, and must use this information to safely navigate the grid. . | Sudoku: This is a single-player puzzle game where the player must fill a 9x9 grid with numbers from 1 to 9. Each row, column, and 3x3 subgrid must contain each number exactly once. . | List and Dictionaries 0.2 (can get up to 0.23) . Explain the differences between Lists and Dictionaries | . Lists are ordered data compilations. They can hold a wide range of data types, including strings, numbers, and objects. Lists are formed with square brackets, and their elements are separated by commas. Dictionaries, on the other hand, are unorganized compilations of facts. Curly brackets are used to build them, and dictionary items are key-value pairs. A key is a value&#39;s unique identifier. Any data type, including texts, numbers, and objects, can be used as a value. . Overall: . Lists are faster than dictionaries for accessing elements by index. | Dictionaries are faster than lists for accessing elements by key. | Lists can store duplicate elements. | Dictionaries cannot store duplicate keys. | Make a code block that manipulates either a list or a dictionary | . Code that manipulates a list . my_list = [&quot;apple&quot;, &quot;banana&quot;, &quot;cherry&quot;] # Add an element to the list my_list.append(&quot;orange&quot;) # Remove an element from the list my_list.remove(&quot;banana&quot;) # Sort the list my_list.sort() # Reverse the order of the list my_list.reverse() # Get the length of the list print(len(my_list)) # Print the list print(my_list) . 3 [&#39;orange&#39;, &#39;cherry&#39;, &#39;apple&#39;] . Code that manipulates a dictionary . dictionary = {&quot;key1&quot;: &quot;value1&quot;, &quot;key2&quot;: &quot;value2&quot;} # Add a new key-value pair to the dictionary dictionary[&quot;key3&quot;] = &quot;value3&quot; # Remove a key-value pair from the dictionary del dictionary[&quot;key2&quot;] # Get the value of a key in the dictionary value = dictionary[&quot;key1&quot;] # Get the length of the dictionary length = len(dictionary) # Print the dictionary print(dictionary) . {&#39;key1&#39;: &#39;value1&#39;, &#39;key3&#39;: &#39;value3&#39;} .",
            "url": "https://samarthkalanke.github.io/SamarthKalanke/2023/04/24/1sthax.html",
            "relUrl": "/2023/04/24/1sthax.html",
            "date": " • Apr 24, 2023"
        }
        
    
  
    
        ,"post4": {
            "title": "Title",
            "content": "import random # The list of all the correct words in the game word_list = [&quot;World&quot;,&quot;Hello&quot;,&quot;Alert&quot;,&quot;Crane&quot;,&quot;Magic&quot;,&quot;Extreme&quot;] # A list of all the user inputed letters that they have guessed guessed_letters = [] global dash_counter # Function to choose a random word from the list def get_random_word_from_the_word_list(): chosen_word = random.choice(word_list) return chosen_word.upper() def play_word_guessing_game(chosen_word): # print (&quot;hint :&quot;, chosen_word) DELETE after word_solved_so_far = &quot;_&quot; * len(chosen_word) #All the letters will be substituted for dashes in the beginning print(&quot;welcome to the game n&quot;) print(&quot;Guess the word in 6 attempts n&quot;) print(word_solved_so_far) print(&quot; n&quot;) word_len = len(word_list) # We are finding the length of the word dash_counter = word_len # dash_counter shows how many letters are not guessed print (&quot;dash counter &quot;, dash_counter, &quot; n&quot;) strikes = 0 #Shows unsuccessful atempts allowed in the game, it is 6 because that is the rule of the game # Strkies &lt; 6 or dash_counter &gt; 0 means the game runs when there is still strikes or the word is still unsolved while strikes &lt; 6 or dash_counter &gt; 0: guess = input(&quot;Please guess a letter in the word: &quot;).upper() # check if only one letter is input and it is a valid alphabet if len(guess) == 1 and guess.isalpha(): # If the letter has already been guessed by the user it will tell the user and not mark it as a strike and let him enter again if guess in guessed_letters: print(&quot;You already guessed the letter&quot;, guess) print(&quot; n&quot;) elif guess not in chosen_word: # If the user guessed letter is not in the word a strike is deducted and it informs the user and lets the user guess again print(guess, &quot;is not in the word. Strike &quot;, strikes + 1) print(&quot; n&quot;) strikes += 1 # Adds letter that user guessed to list guessed_letters.append(guess) else: # Substituted dash for guessed letter print (&quot;You guessed a correct letter&quot;) word_solved_so_far = substitute_dash_by_letter(guess, chosen_word, word_solved_so_far) guessed_letters.append(guess) print (&quot;Game End n&quot;) def substitute_dash_by_letter(guess, chosen_word, word_solved_so_far): position_of_letter_in_word = [i for i, alphabet in enumerate(chosen_word) if alphabet == guess] print (&quot;Letter &quot;, guess, &quot; is &quot;, position_of_letter_in_word, &quot;in this word n&quot;) print (&quot;number of times the letter is in the word =&quot; , len(position_of_letter_in_word), &quot; n&quot; ) word_as_list = list(word_solved_so_far) print (&quot;word as list is : &quot;, word_as_list,&quot; n&quot;) for i in position_of_letter_in_word: word_as_list[i] = guess word_solved_so_far = &quot;&quot;.join(word_as_list) print (&quot;word solved so far&quot;, word_solved_so_far, &quot; n&quot;) print(&quot;dash_counter before decrement is &quot;, dash_counter, &quot; n&quot;) dash_counter = dash_counter - len(position_of_letter_in_word) print (&quot;dash counter &quot;, dash_counter, &quot; n&quot;) return word_solved_so_far # Main function to start the game def main(): word = get_random_word_from_the_word_list() play_word_guessing_game(word) main() . hint : MAGIC welcome to the game Guess the word in 6 attempts _____ dash counter 6 You guessed a correct letter Letter A is [1] in this word number of times the letter is in the word = 1 word as list is : [&#39;_&#39;, &#39;_&#39;, &#39;_&#39;, &#39;_&#39;, &#39;_&#39;] word solved so far _A___ . UnboundLocalError Traceback (most recent call last) c: Users samar vscode SamarthKalanke _notebooks 2023-04-08-OtherCPTdraft.ipynb Cell 1 in &lt;cell line: 76&gt;() &lt;a href=&#39;vscode-notebook-cell:/c%3A/Users/samar/vscode/SamarthKalanke/_notebooks/2023-04-08-OtherCPTdraft.ipynb#W0sZmlsZQ%3D%3D?line=73&#39;&gt;74&lt;/a&gt; word = get_random_word_from_the_word_list() &lt;a href=&#39;vscode-notebook-cell:/c%3A/Users/samar/vscode/SamarthKalanke/_notebooks/2023-04-08-OtherCPTdraft.ipynb#W0sZmlsZQ%3D%3D?line=74&#39;&gt;75&lt;/a&gt; play_word_guessing_game(word) &gt; &lt;a href=&#39;vscode-notebook-cell:/c%3A/Users/samar/vscode/SamarthKalanke/_notebooks/2023-04-08-OtherCPTdraft.ipynb#W0sZmlsZQ%3D%3D?line=75&#39;&gt;76&lt;/a&gt; main() c: Users samar vscode SamarthKalanke _notebooks 2023-04-08-OtherCPTdraft.ipynb Cell 1 in main() &lt;a href=&#39;vscode-notebook-cell:/c%3A/Users/samar/vscode/SamarthKalanke/_notebooks/2023-04-08-OtherCPTdraft.ipynb#W0sZmlsZQ%3D%3D?line=72&#39;&gt;73&lt;/a&gt; def main(): &lt;a href=&#39;vscode-notebook-cell:/c%3A/Users/samar/vscode/SamarthKalanke/_notebooks/2023-04-08-OtherCPTdraft.ipynb#W0sZmlsZQ%3D%3D?line=73&#39;&gt;74&lt;/a&gt; word = get_random_word_from_the_word_list() &gt; &lt;a href=&#39;vscode-notebook-cell:/c%3A/Users/samar/vscode/SamarthKalanke/_notebooks/2023-04-08-OtherCPTdraft.ipynb#W0sZmlsZQ%3D%3D?line=74&#39;&gt;75&lt;/a&gt; play_word_guessing_game(word) c: Users samar vscode SamarthKalanke _notebooks 2023-04-08-OtherCPTdraft.ipynb Cell 1 in play_word_guessing_game(chosen_word) &lt;a href=&#39;vscode-notebook-cell:/c%3A/Users/samar/vscode/SamarthKalanke/_notebooks/2023-04-08-OtherCPTdraft.ipynb#W0sZmlsZQ%3D%3D?line=43&#39;&gt;44&lt;/a&gt; else: &lt;a href=&#39;vscode-notebook-cell:/c%3A/Users/samar/vscode/SamarthKalanke/_notebooks/2023-04-08-OtherCPTdraft.ipynb#W0sZmlsZQ%3D%3D?line=44&#39;&gt;45&lt;/a&gt; # Substituted dash for guessed letter &lt;a href=&#39;vscode-notebook-cell:/c%3A/Users/samar/vscode/SamarthKalanke/_notebooks/2023-04-08-OtherCPTdraft.ipynb#W0sZmlsZQ%3D%3D?line=45&#39;&gt;46&lt;/a&gt; print (&#34;You guessed a correct letter&#34;) &gt; &lt;a href=&#39;vscode-notebook-cell:/c%3A/Users/samar/vscode/SamarthKalanke/_notebooks/2023-04-08-OtherCPTdraft.ipynb#W0sZmlsZQ%3D%3D?line=46&#39;&gt;47&lt;/a&gt; word_solved_so_far = substitute_dash_by_letter(guess, chosen_word, word_solved_so_far) &lt;a href=&#39;vscode-notebook-cell:/c%3A/Users/samar/vscode/SamarthKalanke/_notebooks/2023-04-08-OtherCPTdraft.ipynb#W0sZmlsZQ%3D%3D?line=47&#39;&gt;48&lt;/a&gt; guessed_letters.append(guess) &lt;a href=&#39;vscode-notebook-cell:/c%3A/Users/samar/vscode/SamarthKalanke/_notebooks/2023-04-08-OtherCPTdraft.ipynb#W0sZmlsZQ%3D%3D?line=49&#39;&gt;50&lt;/a&gt; print (&#34;Game End n&#34;) c: Users samar vscode SamarthKalanke _notebooks 2023-04-08-OtherCPTdraft.ipynb Cell 1 in substitute_dash_by_letter(guess, chosen_word, word_solved_so_far) &lt;a href=&#39;vscode-notebook-cell:/c%3A/Users/samar/vscode/SamarthKalanke/_notebooks/2023-04-08-OtherCPTdraft.ipynb#W0sZmlsZQ%3D%3D?line=62&#39;&gt;63&lt;/a&gt; word_solved_so_far = &#34;&#34;.join(word_as_list) &lt;a href=&#39;vscode-notebook-cell:/c%3A/Users/samar/vscode/SamarthKalanke/_notebooks/2023-04-08-OtherCPTdraft.ipynb#W0sZmlsZQ%3D%3D?line=63&#39;&gt;64&lt;/a&gt; print (&#34;word solved so far&#34;, word_solved_so_far, &#34; n&#34;) &gt; &lt;a href=&#39;vscode-notebook-cell:/c%3A/Users/samar/vscode/SamarthKalanke/_notebooks/2023-04-08-OtherCPTdraft.ipynb#W0sZmlsZQ%3D%3D?line=65&#39;&gt;66&lt;/a&gt; print(&#34;dash_counter before decrement is &#34;, dash_counter, &#34; n&#34;) &lt;a href=&#39;vscode-notebook-cell:/c%3A/Users/samar/vscode/SamarthKalanke/_notebooks/2023-04-08-OtherCPTdraft.ipynb#W0sZmlsZQ%3D%3D?line=66&#39;&gt;67&lt;/a&gt; dash_counter = dash_counter - len(position_of_letter_in_word) &lt;a href=&#39;vscode-notebook-cell:/c%3A/Users/samar/vscode/SamarthKalanke/_notebooks/2023-04-08-OtherCPTdraft.ipynb#W0sZmlsZQ%3D%3D?line=67&#39;&gt;68&lt;/a&gt; print (&#34;dash counter &#34;, dash_counter, &#34; n&#34;) UnboundLocalError: local variable &#39;dash_counter&#39; referenced before assignment .",
            "url": "https://samarthkalanke.github.io/SamarthKalanke/2023/04/08/OtherCPTdraft.html",
            "relUrl": "/2023/04/08/OtherCPTdraft.html",
            "date": " • Apr 8, 2023"
        }
        
    
  
    
        ,"post5": {
            "title": "Title",
            "content": "import random # List of words to choose from word_list = [&quot;word&quot;, &quot;help&quot;, &quot;Rin&quot;, &quot;worse&quot;, &quot;than&quot;, &quot;Isagi&quot;, &quot;Kageyama&quot;, &quot;goat&quot;] # Function to choose a random word from the list def get_word(): word = random.choice(word_list) return word.upper() # Function to play the game def play(word): word_completion = &quot;_&quot; * len(word) guessed = False guessed_letters = [] guessed_words = [] tries = 6 print(&quot;Let&#39;s play Hangman!&quot;) print(display_hangman(tries)) print(word_completion) print(&quot; n&quot;) while not guessed and tries &gt; 0: guess = input(&quot;Please guess a letter or word: &quot;).upper() if len(guess) == 1 and guess.isalpha(): if guess in guessed_letters: print(&quot;You already guessed the letter&quot;, guess) print(&quot; n&quot;) elif guess not in word: print(guess, &quot;is not in the word.&quot;) print(&quot; n&quot;) tries -= 1 guessed_letters.append(guess) else: print(&quot;Good job,&quot;, guess, &quot;is in the word!&quot;) print(&quot; n&quot;) guessed_letters.append(guess) word_as_list = list(word_completion) indices = [i for i, letter in enumerate(word) if letter == guess] for index in indices: word_as_list[index] = guess word_completion = &quot;&quot;.join(word_as_list) if &quot;_&quot; not in word_completion: guessed = True elif len(guess) == len(word) and guess.isalpha(): if guess in guessed_words: print(&quot;You already guessed the word&quot;, guess) print(&quot; n&quot;) elif guess != word: print(guess, &quot;is not the word.&quot;) print(&quot; n&quot;) tries -= 1 guessed_words.append(guess) else: guessed = True word_completion = word else: print(&quot;Not a valid guess.&quot;) print(&quot; n&quot;) print(display_hangman(tries)) print(word_completion) print(&quot; n&quot;) if guessed: print(&quot;Congratulations, you guessed the word!&quot;) else: print(&quot;Sorry, you ran out of tries. The word was &quot; + word + &quot;.&quot;) # Function to display the hangman def display_hangman(tries): stages = [&quot;&quot;&quot; -- | | | O | |/ | | | / - &quot;&quot;&quot;, &quot;&quot;&quot; -- | | | O | |/ | | | / - &quot;&quot;&quot;, &quot;&quot;&quot; -- | | | O | |/ | | | - &quot;&quot;&quot;, &quot;&quot;&quot; -- | | | O | | | | | - &quot;&quot;&quot;, &quot;&quot;&quot; -- | | | O | | | | | - &quot;&quot;&quot;, &quot;&quot;&quot; -- | | | O | | | - &quot;&quot;&quot;, &quot;&quot;&quot; -- | | | | | | - &quot;&quot;&quot; ] return stages[tries] # Main function to start the game def main(): word = get_word() play(word) main() . Let&#39;s play Hangman! -- | | | | | | - ____ A is not in the word. -- | | | O | | | - ____ You already guessed the letter A -- | | | O | | | - ____ B is not in the word. -- | | | O | | | | | - ____ C is not in the word. -- | | | O | | | | | - ____ T is not in the word. -- | | | O | |/ | | | - ____ R is not in the word. -- | | | O | |/ | | | / - ____ I is not in the word. -- | | | O | |/ | | | / - ____ Sorry, you ran out of tries. The word was HELP. .",
            "url": "https://samarthkalanke.github.io/SamarthKalanke/2023/04/08/CPTDraft.html",
            "relUrl": "/2023/04/08/CPTDraft.html",
            "date": " • Apr 8, 2023"
        }
        
    
  
    
        ,"post6": {
            "title": "MCQ4 corrections",
            "content": "Questions I got Wrong . The only question I got wrong was question 29. The answer was D and not A which was data compressions have trade offs. I said that the answer was A which was Data compresssion was only transmissible over the internet. .",
            "url": "https://samarthkalanke.github.io/SamarthKalanke/markdown/2023/04/04/MCQ4corrections.html",
            "relUrl": "/markdown/2023/04/04/MCQ4corrections.html",
            "date": " • Apr 4, 2023"
        }
        
    
  
    
        ,"post7": {
            "title": "Collegeboard Practice Problems Corrections and Reflections",
            "content": "Collegeboard . I did this with a friend named Raunak because College board was not working for me. . So we hopped on a discord voice call to finish this together and these were the questions that we got wrong. . Collegeboard Practice Problems for 2.2 . . For Question 1, answer A is incorrect because the ability to keep data secure is not a primary function of a compression algorithm. answer B is correct because lossless compression algorithms are guaranteed to be able to reconstruct the original data, while lossy compression algorithms are not. . Collegeboard Practice Problems for 2.3 . . Additional Practice Quizzes: . On the latter quiz for question 4, Answer D is correct because sorting by year will sort the spreadsheet on column C from least to greatest. Filtering by year will remove any entries with unknown years. Filtering by photographer will remove any entries with unknown photographers. Since the order of the entries is not affected by the filters, the photograph with the lowest year value will be in the first row of the spreadsheet. Answer C is incorrect because this sequence of steps does not remove any entries with an unknown year, so the entry in the first row of the spreadsheet will have a year value of -1. .",
            "url": "https://samarthkalanke.github.io/SamarthKalanke/markdown/week%2025/collegeboard/2023/03/28/CSPQuiz.html",
            "relUrl": "/markdown/week%2025/collegeboard/2023/03/28/CSPQuiz.html",
            "date": " • Mar 28, 2023"
        }
        
    
  
    
        ,"post8": {
            "title": "Final CPT Plans for CB",
            "content": "What do I need to Do? . Start the project | Make a tic tac toe project. | . What is Completed? . Nothing . When do I want to be done? . GOAL: finish by the end of Spring Break | .",
            "url": "https://samarthkalanke.github.io/SamarthKalanke/2023/03/27/CPTplaning.html",
            "relUrl": "/2023/03/27/CPTplaning.html",
            "date": " • Mar 27, 2023"
        }
        
    
  
    
        ,"post9": {
            "title": "Unit 2.4b Using Programs with Data, SQL",
            "content": "Database Programming is Program with Data . Each Tri 2 Final Project should be an example of a Program with Data. . Prepare to use SQLite in common Imperative Technique . Explore SQLite Connect object to establish database connection- Explore SQLite Cursor Object to fetch data from a table within a database | . Schema of Users table in Sqlite.db . Uses PRAGMA statement to read schema. . Describe Schema, here is resource Resource- What is a database schema? . Database schema are the constraints placed on the data that is going to be inputted in to the sqlite database. What is the purpose of identity Column in SQL database? | . | The purpose of the ID column is to differentiate each user from one another. This is because each individual user is unique in terms of ID, thus they can be differed. What is the purpose of a primary key in SQL database? | . | The purpose of the primary key is similar to the identity column, it is to differ each user from one another, allowing code to affect the intended object. What are the Data Types in SQL table? | . | Some data types in an SQL table are floats, integers, strings, dates, etc. | . import sqlite3 database = &#39;instance/sqlite.db&#39; # this is location of database def schema(): # Connect to the database file conn = sqlite3.connect(database) #connection to db # Create a cursor object to execute SQL queries cursor = conn.cursor() # executes queries # Fetch results of Schema # query to DB results = cursor.execute(&quot;PRAGMA table_info(&#39;users&#39;)&quot;).fetchall() # Print the results for row in results: print(row) # Close the database connection conn.close() # prevents data leaks schema() # run fnction . (0, &#39;id&#39;, &#39;INTEGER&#39;, 1, None, 1) (1, &#39;_name&#39;, &#39;VARCHAR(255)&#39;, 1, None, 0) (2, &#39;_uid&#39;, &#39;VARCHAR(255)&#39;, 1, None, 0) (3, &#39;_password&#39;, &#39;VARCHAR(255)&#39;, 1, None, 0) (4, &#39;_dob&#39;, &#39;DATE&#39;, 0, None, 0) . Reading Users table in Sqlite.db . Uses SQL SELECT statement to read data . What is a connection object? After you google it, what do you think it does? The connection object is the connection to the database. I think it provides a reference to a database in a different area, allowing the user to manipulate the table | . | Same for cursor object? Cursors are probably a cursor to a sqlite terminal like object, allowing you to execute specific commands to the database, allowing for usage within the table. Both of these need to be closed to not leak data. | . | Look at conn object and cursor object in VSCode debugger. What attributes are in the object? Conn and cursor have function and class variables, each which are initialized when the cursor itself is initialized. Abstraction of stuff | . | Is &quot;results&quot; an object? How do you know? Results is an object, because it appears in the debug menu. | . | . import sqlite3 def read(): # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL queries cursor = conn.cursor() # Execute a SELECT statement to retrieve data from a table results = cursor.execute(&#39;SELECT * FROM users&#39;).fetchall() # * unpacks everything, returning everything # Print the results if len(results) == 0: print(&quot;Table is empty&quot;) else: for row in results: print(row) # Close the cursor and connection objects cursor.close() conn.close() read() # runs functions . Create a new User in table in Sqlite.db . Uses SQL INSERT to add row . Compore create() in both SQL lessons. What is better or worse in the two implementations? the create function from an OOP paradigm must be called on the object, which is good if you are creating objects. However, an imperative paradigm results in you having to create the user every single time and hand input it. Less error prone in imperative, less efficient in create(). Does not censor password | . | Explain purpose of SQL INSERT. Is this the same as User init? This inserts stuff into the table. This creates the user, like init. | . | . import sqlite3 # creates baiyyah def create(): name = input(&quot;Enter your name:&quot;) uid = input(&quot;Enter your user id:&quot;) password = input(&quot;Enter your password&quot;) dob = input(&quot;Enter your date of birth &#39;YYYY-MM-DD&#39;&quot;) # gets data # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL commands cursor = conn.cursor() try: # Execute an SQL command to insert data into a table cursor.execute(&quot;INSERT INTO users (_name, _uid, _password, _dob) VALUES (?, ?, ?, ?)&quot;, (name, uid, password, dob)) # this is creation of a user # Commit the changes to the database conn.commit() print(f&quot;A new user record {uid} has been created&quot;) except sqlite3.Error as error: # ensures errors do not occur print(&quot;Error while executing the INSERT:&quot;, error) # Close the cursor and connection objects cursor.close() conn.close() create() # run function . A new user record has been created . Updating a User in table in Sqlite.db . Uses SQL UPDATE to modify password . What does the hacked part do? The hacked portion checks in order to make sure that the password is of ample length, in order to ensure that you would not be hacked | . | Explain try/except, when would except occur? Except would occur when there is an error in the code, specifically if an sqlite error occurs or an error occurs when updating | . | What code seems to be repeated in each of these examples to point, why is it repeated? The closing of the cursor seems to be repeated, ensures that data is not leaking. | . | . import sqlite3 def update(): uid = input(&quot;Enter user id to update&quot;) password = input(&quot;Enter updated password&quot;) if len(password) &lt; 2: # prevents bad passwords message = &quot;hacked&quot; password = &#39;gothackednewpassword123&#39; # sets a new password (unethical? maybe ask first) else: message = &quot;successfully updated&quot; # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL commands cursor = conn.cursor() try: # Execute an SQL command to update data in a table cursor.execute(&quot;UPDATE users SET _password = ? WHERE _uid = ?&quot;, (password, uid)) if cursor.rowcount == 0: # The uid was not found in the table print(f&quot;No uid {uid} was not found in the table&quot;) else: print(f&quot;The row with user id {uid} the password has been {message}&quot;) conn.commit() except sqlite3.Error as error: print(&quot;Error while executing the UPDATE:&quot;, error) # Close the cursor and connection objects cursor.close() conn.close() update() . The row with user id the password has been hacked . Delete a User in table in Sqlite.db . Uses a delete function to remove a user based on a user input of the id. . Is DELETE a dangerous operation? Why? DELETE is a dangerous operation because it results in the permanent removal of data, and unless you can remember it, there&#39;s no way to purposefully remove it. | . | In the print statemements, what is the &quot;f&quot; and what does {uid} do? f is an f string, where you can place variables into a string using {} and have them return their string counterparts. for example:pythoninteger = 3 print(f&quot;hello world, my number is {integer}&quot;) return value: hello world, my number is 3 | . | . import sqlite3 def delete(): uid = input(&quot;Enter user id to delete&quot;) # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL commands cursor = conn.cursor() try: cursor.execute(&quot;DELETE FROM users WHERE _uid = ?&quot;, (uid,)) if cursor.rowcount == 0: # The uid was not found in the table print(f&quot;No uid {uid} was not found in the table&quot;) else: # The uid was found in the table and the row was deleted print(f&quot;The row with uid {uid} was successfully deleted&quot;) conn.commit() except sqlite3.Error as error: # checks for errors print(&quot;Error while executing the DELETE:&quot;, error) # Close the cursor and connection objects cursor.close() conn.close() # literally just deletes delete() . The row with uid was successfully deleted . Menu Interface to CRUD operations . CRUD and Schema interactions from one location by running menu. Observe input at the top of VSCode, observe output underneath code cell. . Why does the menu repeat? Repeats as a result of recursion, the function calls itself | . | Could you refactor this menu? Make it work with a List? Yea, we could take multiple inputs, get multiple queries, and return every query at once. We could also check to see if the input is within a list to see if it can be selected | . | . def menu(): operation = input(&quot;Enter: (C)reate (R)ead (U)pdate or (D)elete or (S)chema&quot;) if operation.lower() == &#39;c&#39;: # checks each for input create() elif operation.lower() == &#39;r&#39;: read() elif operation.lower() == &#39;u&#39;: update() elif operation.lower() == &#39;d&#39;: delete() # makes sure to see if everything can be called elif operation.lower() == &#39;s&#39;: schema() elif len(operation)==0: # Escape Key return else: print(&quot;Please enter c, r, u, or d&quot;) menu() # recursion, repeat menu try: menu() # start menu except: print(&quot;Perform Jupyter &#39;Run All&#39; prior to starting menu&quot;) . def menuList(): valid = [&#39;c&#39;, &#39;r&#39;, &#39;u&#39;, &#39;d&#39;] # lit of valid input inp = input(&quot;Enter a letter&quot;) if inp == &quot;&quot;: # checks input print(&quot;nothing will happen&quot;) elif inp in valid: # checks if in list print(&quot;Input is validated! Do something!&quot;) else: print(&quot;Input invalid, enter valid input&quot;) for i in range(3): menuList() . Input is validated! Do something! Input invalid, enter valid input nothing will happen . # functions def create(): print(&#39;create&#39;) def read(): print(&#39;read&#39;) def update(): print(&#39;update&#39;) def delete(): print(&#39;delete&#39;) def nothing(): print(&quot;nothing to do&quot;) def menuDic(): valid = {&#39;c&#39;:create, &#39;r&#39;:read, &quot;u&quot;:update, &#39;d&#39;:delete, &quot;&quot;:nothing} # map of letter to function inp = input(&quot;Enter a letter!&quot;) # gets input if inp in list(valid.keys()): # checks to see if it is a key in a list valid[inp]() # runs function (calls) from dictionary # can also be used to eliminate escape else: print(&quot;please enter valid input&quot;) for i in range(3): # runs menu three times to test menuDic() . create nothing to do please enter valid input . Hacks . Add this Blog to you own Blogging site. In the Blog add notes and observations on each code cell. | In this implementation, do you see procedural abstraction? I saw procedural abstraction through the abstracting of various components, such as the sqlite tables and the cursor to the table. These abstractions also occured in functions which abstracted functions such as creating and reading to the database | . | In 2.4a or 2.4b lecture Do you see data abstraction? Complement this with Debugging example. I see data abstraction in the abstraction of the table and the cursor into objects. I also saw the results abstracted into an object that was later called and we accessed this object to return data. | . | Use Imperative or OOP style to Create a new Table or do something that applies to your CPT project. See previous | . | . | . Reference... sqlite documentation . from PIL import Image print(&quot;Debugging Example&quot;) emaad = Image.open(&#39;images/debugging.png&#39;) display(emaad) . Debugging Example .",
            "url": "https://samarthkalanke.github.io/SamarthKalanke/2023/03/20/2.4banswers.html",
            "relUrl": "/2023/03/20/2.4banswers.html",
            "date": " • Mar 20, 2023"
        }
        
    
  
    
        ,"post10": {
            "title": "Unit 2.4a Answers",
            "content": "Database and SQLAlchemy . In this blog we will explore using programs with data, focused on Databases. We will use SQLite Database to learn more about using Programs with Data. Use Debugging through these examples to examine Objects created in Code. . College Board talks about ideas like . Program Usage. &quot;iterative and interactive way when processing information&quot; | Managing Data. &quot;classifying data are part of the process in using programs&quot;, &quot;data files in a Table&quot; | Insight &quot;insight and knowledge can be obtained from ... digitally represented information&quot; | Filter systems. &#39;tools for finding information and recognizing patterns&quot; | Application. &quot;the preserve has two databases&quot;, &quot;an employee wants to count the number of book&quot; | . | PBL, Databases, Iterative/OOP . Iterative. Refers to a sequence of instructions or code being repeated until a specific end result is achieved | OOP. A computer programming model that organizes software design around data, or objects, rather than functions and logic | SQL. Structured Query Language, abbreviated as SQL, is a language used in programming, managing, and structuring data | . | . Imports and Flask Objects . Defines and key object creations . Comment on where you have observed these working? Provide a defintion of purpose. Flask app object | SQLAlchemy db object | | . &quot;&quot;&quot; These imports define the key objects &quot;&quot;&quot; from flask import Flask from flask_sqlalchemy import SQLAlchemy &quot;&quot;&quot; These object and definitions are used throughout the Jupyter Notebook. &quot;&quot;&quot; # Setup of key Flask object (app) app = Flask(__name__) # Setup SQLAlchemy object and properties for the database (db) database = &#39;sqlite:///files/sqlite.db&#39; # path and filename of database app.config[&#39;SQLALCHEMY_TRACK_MODIFICATIONS&#39;] = False app.config[&#39;SQLALCHEMY_DATABASE_URI&#39;] = database app.config[&#39;SECRET_KEY&#39;] = &#39;SECRET_KEY&#39; db = SQLAlchemy() # This belongs in place where it runs once per project db.init_app(app) . Questions . I&#39;ve seen the flask object operate in the AWS backend on my localhost in order to run a flask app and flask code. | The SQLAlchemy class has also been seen with AWS backend, in order to protect the SQLite database and operate with it. | . Model Definition . Define columns, initialization, and CRUD methods for users table in sqlite.db . Comment on these items in the class, purpose and defintion. class User | db.Model inheritance | init method | @property, @&lt;column&gt;.setter | create, read, update, delete methods | . | . &quot;&quot;&quot; database dependencies to support sqlite examples &quot;&quot;&quot; import datetime from datetime import datetime import json import uuid from sqlalchemy.exc import IntegrityError from werkzeug.security import generate_password_hash, check_password_hash &#39;&#39;&#39; Tutorial: https://www.sqlalchemy.org/library.html#tutorials, try to get into a Python shell and follow along &#39;&#39;&#39; class Animal(db.Model): # inherited, we can use what db.Model has # uses the methods and class variable (need to call .super()) __tablename__ = &#39;monke&#39; id = db.Column(db.Integer, primary_key=True) _lbs_food = db.Column(db.Integer) _animal_type = db.Column(db.String(255), unique=False, nullable=False) _uid = db.Column(db.String(255), unique=True, nullable=False) _name = db.Column(db.String(255), unique=False, nullable=False) _dob = db.Column(db.Date) # constructor of a User object # __init__ initializes an attribute and makes a class item def __init__(self, name, animal, uid, food, dob=datetime.today()): self._name = name self._uid = uid self._lbs_food = food self._animal_type = animal if isinstance(dob, str): # not a date type dob = date=datetime.today() self._dob = dob ### # getters and setters # Getters get, setters set # @ used for get. @name.set are setters # These are decorator functions, which &quot;decorate&quot; the function when it is called # this is done when it is actively set. ### # a name getter method, extracts name from object @property def name(self): return self._name # a setter function, allows name to be updated after initial object creation @name.setter def name(self, name): self._name = name # a getter method, extracts uid from object @property def uid(self): return self._uid # a setter function, allows uid to be updated after initial object creation @uid.setter def uid(self, uid): self._uid = uid # check if uid parameter matches user id in object, return boolean def is_uid(self, uid): return self._uid == uid @property def animal_type(self): return self._animal_type # because of security only show 1st characters # dob property is returned as string, a string represents date outside object @property def dob(self): dob_string = self._dob.strftime(&#39;%m-%d-%Y&#39;) return dob_string # dob setter, verifies date type before it is set or default to today @dob.setter def dob(self, dob): if isinstance(dob, str): # not a date type dob = date=datetime.today() self._dob = dob # age is calculated field, age is returned according to date of birth @property def age(self): today = datetime.today() return today.year - self._dob.year - ((today.month, today.day) &lt; (self._dob.month, self._dob.day)) # output content using str(object) is in human readable form # output content using json dumps, this is ready for API response def __str__(self): return json.dumps(self.read()) # CRUD create/add a new record to the table # returns self or None on error def create(self): try: # creates a person object from User(db.Model) class, passes initializers db.session.add(self) # add prepares to persist person object to Users table db.session.commit() # SqlAlchemy &quot;unit of work pattern&quot; requires a manual commit return self except IntegrityError: db.session.remove() return None # CRUD read converts self to dictionary # returns dictionary def read(self): return { &quot;id&quot;: self.id, &quot;name&quot;: self.name, &quot;uid&quot;: self.uid, &quot;lbs&quot; : self._lbs_food, &quot;animal&quot; : self._animal_type, &quot;dob&quot;: self.dob, &quot;age&quot;: self.age, } # CRUD update: updates user name, password, phone # returns self def update(self, name=&quot;&quot;, uid=&quot;&quot;, lbs=&quot;&quot;): &quot;&quot;&quot;only updates values with length&quot;&quot;&quot; if len(name) &gt; 0: self.name = name if len(uid) &gt; 0: self.uid = uid if len(lbs) &gt; 0: self._lbs_food = int(lbs) db.session.commit() return self # CRUD delete: remove self # None def delete(self): db.session.delete(self) db.session.commit() return ### # db.Session.commit used to commit changes. # Wonder what would happen if that didn&#39;t happen ;) # you can actually directly edit the object # This would be an object oriented paradigm ### . Initial Data . Uses SQLALchemy db.create_all() to initialize rows into sqlite.db . Comment on how these work? Create All Tables from db Object | User Object Constructors | Try / Except | | . &quot;&quot;&quot;Database Creation and Testing &quot;&quot;&quot; # Builds working data for testing def initUsers(): with app.app_context(): &quot;&quot;&quot;Create database and tables&quot;&quot;&quot; db.create_all() &quot;&quot;&quot;Tester data for table&quot;&quot;&quot; u1 = Animal(name=&#39;Emaad&#39;, uid=&#39;emu&#39;, animal=&quot;emu&quot;, dob=datetime(1847, 2, 11), food=1000) u2 = Animal(name=&#39;Ryan&#39;, uid=&#39;mcwe&#39;, animal=&quot;bison&quot;, food=9000) u3 = Animal(name=&#39;Harsha&#39;, uid=&#39;harsh&#39;, animal=&quot;sloth&quot;, food=1000000) u4 = Animal(name=&#39;Lucas&#39;, uid=&#39;luke&#39;, animal=&quot;sparrow&quot;, food=4) u5 = Animal(name=&#39;Steven&#39;, uid=&#39;stevey&#39;, animal=&quot;Elephant&quot;, dob=datetime(1920, 10, 21), food=330) u6 = Animal(name=&#39;Varalu&#39;, uid=&#39;vlu&#39;, animal=&quot;Goose&quot;, dob=datetime(1921, 10, 21), food=10) # initializes classes and class variables. # password not required, assigned a default value otherwise # in function definition users = [u1, u2, u3, u4, u5, u6] &quot;&quot;&quot;Builds sample user/note(s) data&quot;&quot;&quot; for user in users: # intializes the stuff try: &#39;&#39;&#39;add user to table&#39;&#39;&#39; object = user.create() print(f&quot;Created new uid {object.uid}&quot;) except: # error raised if object nit created &#39;&#39;&#39;fails with bad or duplicate data&#39;&#39;&#39; print(f&quot;Records exist uid {user.uid}, or error.&quot;) initUsers() # actually calling function, tf breakpoint called first . Created new uid emu Created new uid mcwe Created new uid harsh Created new uid luke Created new uid stevey Created new uid vlu . Check for given Credentials in users table in sqlite.db . Use of ORM Query object and custom methods to identify user to credentials uid and password . Comment on purpose of following User.query.filter_by | user.password | | . def find_by_uid(uid): with app.app_context(): user = Animal.query.filter_by(_uid=uid).first() # User is table, asks for query which is filtered by UID, and then it gets the first. return user # returns user object # Check credentials by finding user and verify password def check_credentials(uid, password): # query email and return user record user = find_by_uid(uid) if user == None: return False # checks to see if everything works return False #check_credentials(&quot;indi&quot;, &quot;123qwerty&quot;) . Create a new User in table in Sqlite.db . Uses SQLALchemy and custom user.create() method to add row. . Comment on purpose of following user.find_by_uid() and try/except | user = User(...) | user.dob and try/except | user.create() and try/except | | . def create(): # optimize user time to see if uid exists uid = input(&quot;Enter your user id:&quot;) user = find_by_uid(uid) try: print(&quot;Found n&quot;, user.read()) return except: pass # keep going # request value that ensure creating valid object name = input(&quot;Enter your name:&quot;) nanimal = input(&quot;Enter animal type: &quot;) lbs = input(&quot;Enter pounds of food to eat (per day in pounds): &quot;) # Initialize User object before date user = Animal(name=name, uid=uid, animal=nanimal, food=lbs ) # create user.dob, fail with today as dob dob = input(&quot;Enter your date of birth &#39;YYYY-MM-DD&#39;&quot;) try: user.dob = datetime.strptime(dob, &#39;%Y-%m-%d&#39;).date() except ValueError: user.dob = datetime.today() print(f&quot;Invalid date {dob} require YYYY-mm-dd, date defaulted to {user.dob}&quot;) # write object to database with app.app_context(): try: object = user.create() print(&quot;Created n&quot;, object.read()) except: # error raised if object not created print(&quot;Unknown error uid {uid}&quot;) create() . Created {&#39;id&#39;: 7, &#39;name&#39;: &#39;Fuck&#39;, &#39;uid&#39;: &#39;No&#39;, &#39;lbs&#39;: 12321428391208, &#39;animal&#39;: &#39;You&#39;, &#39;dob&#39;: &#39;01-01-0101&#39;, &#39;age&#39;: 1922} . Reading users table in sqlite.db . Uses SQLALchemy query.all method to read data . Comment on purpose of following User.query.all | json_ready assignment, google List Comprehension | | . # SQLAlchemy extracts all users from database, turns each user into JSON def read(): with app.app_context(): table = Animal.query.all() json_ready = [user.read() for user in table] # &quot;List Comprehensions&quot;, for each user add user.read() to list return json_ready read() . [{&#39;id&#39;: 1, &#39;name&#39;: &#39;Emaad&#39;, &#39;uid&#39;: &#39;emu&#39;, &#39;lbs&#39;: 1000, &#39;animal&#39;: &#39;emu&#39;, &#39;dob&#39;: &#39;02-11-1847&#39;, &#39;age&#39;: 176}, {&#39;id&#39;: 2, &#39;name&#39;: &#39;Ryan&#39;, &#39;uid&#39;: &#39;mcwe&#39;, &#39;lbs&#39;: 9000, &#39;animal&#39;: &#39;bison&#39;, &#39;dob&#39;: &#39;03-15-2023&#39;, &#39;age&#39;: 0}, {&#39;id&#39;: 3, &#39;name&#39;: &#39;Harsha&#39;, &#39;uid&#39;: &#39;harsh&#39;, &#39;lbs&#39;: 1000000, &#39;animal&#39;: &#39;sloth&#39;, &#39;dob&#39;: &#39;03-15-2023&#39;, &#39;age&#39;: 0}, {&#39;id&#39;: 4, &#39;name&#39;: &#39;Lucas&#39;, &#39;uid&#39;: &#39;luke&#39;, &#39;lbs&#39;: 4, &#39;animal&#39;: &#39;sparrow&#39;, &#39;dob&#39;: &#39;03-15-2023&#39;, &#39;age&#39;: 0}, {&#39;id&#39;: 5, &#39;name&#39;: &#39;Steven&#39;, &#39;uid&#39;: &#39;stevey&#39;, &#39;lbs&#39;: 330, &#39;animal&#39;: &#39;Elephant&#39;, &#39;dob&#39;: &#39;10-21-1920&#39;, &#39;age&#39;: 102}, {&#39;id&#39;: 6, &#39;name&#39;: &#39;Varalu&#39;, &#39;uid&#39;: &#39;vlu&#39;, &#39;lbs&#39;: 10, &#39;animal&#39;: &#39;Goose&#39;, &#39;dob&#39;: &#39;10-21-1921&#39;, &#39;age&#39;: 101}, {&#39;id&#39;: 7, &#39;name&#39;: &#39;Fuck&#39;, &#39;uid&#39;: &#39;No&#39;, &#39;lbs&#39;: 12321428391208, &#39;animal&#39;: &#39;You&#39;, &#39;dob&#39;: &#39;01-01-0101&#39;, &#39;age&#39;: 1922}] . def update(): currid = input(&quot;ID of user to update: &quot;) if currid == &quot;&quot;: print(&quot;not updating!&quot;) return user = find_by_uid(currid) print(&quot;user before: &quot; + str(user)) nUid = input(&quot;New UID? (Leave blank if no change): &quot;) nName = input(&quot;New name? (Leave blank if no change): &quot;) nFood = input(&quot;New food category? (Leave blank if no change): &quot;) with app.app_context(): user.update(nUid, nName, nFood) print(&quot;user after: &quot; + str(user)) update() . not updating! . def delete(): uid = input(&quot;Username of person to delete: &quot;) if uid == &quot;&quot;: print(&quot;Not deleting anyone!&quot;) return user = find_by_uid(uid) with app.app_context(): user.delete() print(&quot;Deleted!&quot;) return None delete() . Deleted! . Hacks . Add this Blog to you own Blogging site. In the Blog add notes and observations on each code cell. | Change blog to your own database. | Add additional CRUD Add Update functionality to this blog. | Add Delete functionality to this blog. | . | .",
            "url": "https://samarthkalanke.github.io/SamarthKalanke/2023/03/20/2.4answers.html",
            "relUrl": "/2023/03/20/2.4answers.html",
            "date": " • Mar 20, 2023"
        }
        
    
  
    
        ,"post11": {
            "title": "Week 25:2.3 Pandas",
            "content": "import pandas as pd nba_data = pd.read_csv(&#39;./player_data.csv&#39;) print(nba_data) print(nba_data.columns) . name year_start year_end position height weight 0 Alaa Abdelnaby 1991 1995 F-C 6-10 240.0 1 Zaid Abdul-Aziz 1969 1978 C-F 6-9 235.0 2 Kareem Abdul-Jabbar 1970 1989 C 7-2 225.0 3 Mahmoud Abdul-Rauf 1991 2001 G 6-1 162.0 4 Tariq Abdul-Wahad 1998 2003 F 6-6 223.0 ... ... ... ... ... ... ... 4545 Ante Zizic 2018 2018 F-C 6-11 250.0 4546 Jim Zoet 1983 1983 C 7-1 240.0 4547 Bill Zopf 1971 1971 G 6-1 170.0 4548 Ivica Zubac 2017 2018 C 7-1 265.0 4549 Matt Zunic 1949 1949 G-F 6-3 195.0 birth_date college 0 June 24, 1968 Duke University 1 April 7, 1946 Iowa State University 2 April 16, 1947 University of California, Los Angeles 3 March 9, 1969 Louisiana State University 4 November 3, 1974 San Jose State University ... ... ... 4545 January 4, 1997 NaN 4546 December 20, 1953 Kent State University 4547 June 7, 1948 Duquesne University 4548 March 18, 1997 NaN 4549 December 19, 1919 George Washington University [4550 rows x 8 columns] Index([&#39;name&#39;, &#39;year_start&#39;, &#39;year_end&#39;, &#39;position&#39;, &#39;height&#39;, &#39;weight&#39;, &#39;birth_date&#39;, &#39;college&#39;], dtype=&#39;object&#39;) . In the above code we simply view the Player Data and the columns associated with the Data Set. We are outputted with the head and the tail end of the data. The information is difficult to read and therefore must be preprocessed before analyzed. We can also see the immense length of the data set as there are 4550 rows of information. Therefore we must limit the rows being analyzed as 4550 will require too much time and energy. . import pandas as pd from sklearn.preprocessing import OneHotEncoder nba_data = pd.read_csv(&#39;./player_data.csv&#39;, nrows=15) nba_data.drop([&#39;birth_date&#39;, &#39;college&#39;], axis=1, inplace=True) nba_data.dropna(inplace=True) # Encode categorical variables enc = OneHotEncoder(sparse=False, handle_unknown=&#39;ignore&#39;) enc.fit(nba_data[[&#39;position&#39;]]) onehot = enc.transform(nba_data[[&#39;position&#39;]]) cols = [&#39;position_&#39; + val for val in enc.get_feature_names([&#39;position&#39;])] nba_data[cols] = pd.DataFrame(onehot, columns=cols) nba_data.drop([&#39;position&#39;], axis=1, inplace=True) nba_data[&#39;height&#39;] = nba_data[&#39;height&#39;].apply(lambda x: int(x.split(&#39;-&#39;)[0]) * 12 + int(x.split(&#39;-&#39;)[1])) with pd.option_context(&#39;display.max_rows&#39;, None, &#39;display.max_columns&#39;, None): print(nba_data) # Calculate the average height and weight avg_height = nba_data[&#39;height&#39;].mean() avg_weight = nba_data[&#39;weight&#39;].mean() # Print the average height and weight print(f&quot;Average height: {round(avg_height, 2)} inches&quot;) print(f&quot;Average weight: {round(avg_weight, 2)} pounds&quot;) . name year_start year_end height weight 0 Alaa Abdelnaby 1991 1995 82 240 1 Zaid Abdul-Aziz 1969 1978 81 235 2 Kareem Abdul-Jabbar 1970 1989 86 225 3 Mahmoud Abdul-Rauf 1991 2001 73 162 4 Tariq Abdul-Wahad 1998 2003 78 223 5 Shareef Abdur-Rahim 1997 2008 81 225 6 Tom Abernethy 1977 1981 79 220 7 Forest Able 1957 1957 75 180 8 John Abramovic 1947 1948 75 195 9 Alex Abrines 2017 2018 78 190 10 Alex Acker 2006 2009 77 185 11 Don Ackerman 1954 1954 72 183 12 Mark Acres 1988 1993 83 220 13 Bud Acton 1968 1968 78 210 14 Quincy Acy 2013 2018 79 240 position_position_C position_position_C-F position_position_F 0 0.0 0.0 0.0 1 0.0 1.0 0.0 2 1.0 0.0 0.0 3 0.0 0.0 0.0 4 0.0 0.0 1.0 5 0.0 0.0 1.0 6 0.0 0.0 1.0 7 0.0 0.0 0.0 8 0.0 0.0 1.0 9 0.0 0.0 0.0 10 0.0 0.0 0.0 11 0.0 0.0 0.0 12 0.0 0.0 0.0 13 0.0 0.0 1.0 14 0.0 0.0 1.0 position_position_F-C position_position_G position_position_G-F 0 1.0 0.0 0.0 1 0.0 0.0 0.0 2 0.0 0.0 0.0 3 0.0 1.0 0.0 4 0.0 0.0 0.0 5 0.0 0.0 0.0 6 0.0 0.0 0.0 7 0.0 1.0 0.0 8 0.0 0.0 0.0 9 0.0 0.0 1.0 10 0.0 1.0 0.0 11 0.0 1.0 0.0 12 1.0 0.0 0.0 13 0.0 0.0 0.0 14 0.0 0.0 0.0 Average height: 78.47 inches Average weight: 208.87 pounds . /Users/advayshindikar/opt/anaconda3/lib/python3.9/site-packages/sklearn/utils/deprecation.py:87: FutureWarning: Function get_feature_names is deprecated; get_feature_names is deprecated in 1.0 and will be removed in 1.2. Please use get_feature_names_out instead. warnings.warn(msg, category=FutureWarning) . In the above code I was able to process the information and drop 2 of the columns to shorten the data. I was also able to encode the categorical variables in order to view the data better. Finally I converted the height and weight column to inches and pounds so that it could be compared and so that I can take the average. I found that when working on this data set, it needed a counter as it was not able to iterate through 4550 rows. To fix this I had to set a limit of the first 100 rows. . import pandas as pd # Load data season_data = pd.read_csv(&#39;./Seasons_Stats.csv&#39;) # Drop unnecessary columns season_data = season_data.drop(&#39;Unnamed: 0&#39;, axis=1) # Fill missing values season_data = season_data.fillna(0) # Convert data types season_data[&#39;Year&#39;] = season_data[&#39;Year&#39;].astype(int) # Print cleaned data print(season_data) print(season_data.columns) . Year Player Pos Age Tm G GS MP PER 0 1950 Curly Armstrong G-F 31.0 FTW 63.0 0.0 0.0 0.0 1 1950 Cliff Barker SG 29.0 INO 49.0 0.0 0.0 0.0 2 1950 Leo Barnhorst SF 25.0 CHS 67.0 0.0 0.0 0.0 3 1950 Ed Bartels F 24.0 TOT 15.0 0.0 0.0 0.0 4 1950 Ed Bartels F 24.0 DNN 13.0 0.0 0.0 0.0 ... ... ... ... ... ... ... ... ... ... 24686 2017 Cody Zeller PF 24.0 CHO 62.0 58.0 1725.0 16.7 24687 2017 Tyler Zeller C 27.0 BOS 51.0 5.0 525.0 13.0 24688 2017 Stephen Zimmerman C 20.0 ORL 19.0 0.0 108.0 7.3 24689 2017 Paul Zipser SF 22.0 CHI 44.0 18.0 843.0 6.9 24690 2017 Ivica Zubac C 19.0 LAL 38.0 11.0 609.0 17.0 TS% ... FT% ORB DRB TRB AST STL BLK TOV PF 0 0.368 ... 0.705 0.0 0.0 0.0 176.0 0.0 0.0 0.0 217.0 1 0.435 ... 0.708 0.0 0.0 0.0 109.0 0.0 0.0 0.0 99.0 2 0.394 ... 0.698 0.0 0.0 0.0 140.0 0.0 0.0 0.0 192.0 3 0.312 ... 0.559 0.0 0.0 0.0 20.0 0.0 0.0 0.0 29.0 4 0.308 ... 0.548 0.0 0.0 0.0 20.0 0.0 0.0 0.0 27.0 ... ... ... ... ... ... ... ... ... ... ... ... 24686 0.604 ... 0.679 135.0 270.0 405.0 99.0 62.0 58.0 65.0 189.0 24687 0.508 ... 0.564 43.0 81.0 124.0 42.0 7.0 21.0 20.0 61.0 24688 0.346 ... 0.600 11.0 24.0 35.0 4.0 2.0 5.0 3.0 17.0 24689 0.503 ... 0.775 15.0 110.0 125.0 36.0 15.0 16.0 40.0 78.0 24690 0.547 ... 0.653 41.0 118.0 159.0 30.0 14.0 33.0 30.0 66.0 PTS 0 458.0 1 279.0 2 438.0 3 63.0 4 59.0 ... ... 24686 639.0 24687 178.0 24688 23.0 24689 240.0 24690 284.0 [24691 rows x 52 columns] Index([&#39;Year&#39;, &#39;Player&#39;, &#39;Pos&#39;, &#39;Age&#39;, &#39;Tm&#39;, &#39;G&#39;, &#39;GS&#39;, &#39;MP&#39;, &#39;PER&#39;, &#39;TS%&#39;, &#39;3PAr&#39;, &#39;FTr&#39;, &#39;ORB%&#39;, &#39;DRB%&#39;, &#39;TRB%&#39;, &#39;AST%&#39;, &#39;STL%&#39;, &#39;BLK%&#39;, &#39;TOV%&#39;, &#39;USG%&#39;, &#39;blanl&#39;, &#39;OWS&#39;, &#39;DWS&#39;, &#39;WS&#39;, &#39;WS/48&#39;, &#39;blank2&#39;, &#39;OBPM&#39;, &#39;DBPM&#39;, &#39;BPM&#39;, &#39;VORP&#39;, &#39;FG&#39;, &#39;FGA&#39;, &#39;FG%&#39;, &#39;3P&#39;, &#39;3PA&#39;, &#39;3P%&#39;, &#39;2P&#39;, &#39;2PA&#39;, &#39;2P%&#39;, &#39;eFG%&#39;, &#39;FT&#39;, &#39;FTA&#39;, &#39;FT%&#39;, &#39;ORB&#39;, &#39;DRB&#39;, &#39;TRB&#39;, &#39;AST&#39;, &#39;STL&#39;, &#39;BLK&#39;, &#39;TOV&#39;, &#39;PF&#39;, &#39;PTS&#39;], dtype=&#39;object&#39;) . The above code is the Season Data form 1951 to Present. Similar to the previous data set we can see that we have an extrordianry amount of rows and therefore must process the data in order to understand and analyze it. . import pandas as pd pd.set_option(&#39;display.max_rows&#39;, None) # Load data season_data = pd.read_csv(&#39;./Seasons_Stats.csv&#39;) # Drop unnecessary columns season_data = season_data.drop(&#39;Unnamed: 0&#39;, axis=1) # Fill missing values season_data = season_data.fillna(0) # Convert data types season_data[&#39;Year&#39;] = season_data[&#39;Year&#39;].astype(int) # Organize data by greatest points per game ppg_data = season_data[[&#39;Player&#39;, &#39;Pos&#39;, &#39;Tm&#39;, &#39;Year&#39;, &#39;PTS&#39;, &#39;G&#39;]].groupby([&#39;Player&#39;, &#39;Pos&#39;, &#39;Tm&#39;, &#39;Year&#39;]).sum().reset_index() ppg_data[&#39;PPG&#39;] = round(ppg_data[&#39;PTS&#39;] / ppg_data[&#39;G&#39;], 1) ppg_data = ppg_data.sort_values(by=[&#39;PPG&#39;], ascending=False) print(&quot;Top 10 Leaders in PPG:&quot;) print(ppg_data[[&#39;Player&#39;, &#39;Pos&#39;, &#39;Tm&#39;, &#39;Year&#39;, &#39;PPG&#39;]].head(10)) # Organize data by greatest steals per game spg_data = season_data[[&#39;Player&#39;, &#39;Pos&#39;, &#39;Tm&#39;, &#39;Year&#39;, &#39;STL&#39;, &#39;G&#39;]].groupby([&#39;Player&#39;, &#39;Pos&#39;, &#39;Tm&#39;, &#39;Year&#39;]).sum().reset_index() spg_data[&#39;SPG&#39;] = round(spg_data[&#39;STL&#39;] / spg_data[&#39;G&#39;], 1) spg_data = spg_data.sort_values(by=[&#39;SPG&#39;], ascending=False) print(&quot; nTop 10 Leaders in SPG:&quot;) print(spg_data[[&#39;Player&#39;, &#39;Pos&#39;, &#39;Tm&#39;, &#39;Year&#39;, &#39;SPG&#39;]].head(10)) # Organize data by greatest assists per game apg_data = season_data[[&#39;Player&#39;, &#39;Pos&#39;, &#39;Tm&#39;, &#39;Year&#39;, &#39;AST&#39;, &#39;G&#39;]].groupby([&#39;Player&#39;, &#39;Pos&#39;, &#39;Tm&#39;, &#39;Year&#39;]).sum().reset_index() apg_data[&#39;APG&#39;] = round(apg_data[&#39;AST&#39;] / apg_data[&#39;G&#39;], 1) apg_data = apg_data.sort_values(by=[&#39;APG&#39;], ascending=False) print(&quot; nTop 10 Leaders in APG:&quot;) print(apg_data[[&#39;Player&#39;, &#39;Pos&#39;, &#39;Tm&#39;, &#39;Year&#39;, &#39;APG&#39;]].head(10)) # Organize data by greatest blocks per game bpg_data = season_data[[&#39;Player&#39;, &#39;Pos&#39;, &#39;Tm&#39;, &#39;Year&#39;, &#39;BLK&#39;, &#39;G&#39;]].groupby([&#39;Player&#39;, &#39;Pos&#39;, &#39;Tm&#39;, &#39;Year&#39;]).sum().reset_index() bpg_data[&#39;BPG&#39;] = round(bpg_data[&#39;BLK&#39;] / bpg_data[&#39;G&#39;], 1) bpg_data = bpg_data.sort_values(by=[&#39;BPG&#39;], ascending=False) print(&quot; nTop 10 Leaders in BPG:&quot;) print(bpg_data[[&#39;Player&#39;, &#39;Pos&#39;, &#39;Tm&#39;, &#39;Year&#39;, &#39;BPG&#39;]].head(10)) # Organize data by greatest rebounds per game rpg_data = season_data[[&#39;Player&#39;, &#39;Pos&#39;, &#39;Tm&#39;, &#39;Year&#39;, &#39;TRB&#39;, &#39;G&#39;]].groupby([&#39;Player&#39;, &#39;Pos&#39;, &#39;Tm&#39;, &#39;Year&#39;]).sum().reset_index() rpg_data[&#39;RPG&#39;] = round(rpg_data[&#39;TRB&#39;] / rpg_data[&#39;G&#39;], 1) rpg_data = rpg_data.sort_values(by=[&#39;RPG&#39;], ascending=False) print(&quot; nTop 10 Leaders in RPG:&quot;) print(rpg_data[[&#39;Player&#39;, &#39;Pos&#39;, &#39;Tm&#39;, &#39;Year&#39;, &#39;RPG&#39;]].head(10)) . Top 10 Leaders in PPG: Player Pos Tm Year PPG 24409 Wilt Chamberlain* C PHW 1962 50.4 24410 Wilt Chamberlain* C SFW 1963 44.8 24412 Wilt Chamberlain* C SFW 1965 38.9 24408 Wilt Chamberlain* C PHW 1961 38.4 7813 Elgin Baylor* SF LAL 1962 38.2 24407 Wilt Chamberlain* C PHW 1960 37.6 16750 Michael Jordan* SG CHI 1987 37.1 24411 Wilt Chamberlain* C SFW 1964 36.8 19666 Rick Barry* SF SFW 1967 35.6 14333 Kobe Bryant SG LAL 2006 35.4 Top 10 Leaders in SPG: Player Pos Tm Year SPG 641 Alvin Robertson SG SAS 1986 3.7 22834 Tom Gugliotta PF WSB 1995 3.5 6855 Don Buse PG IND 1977 3.5 15594 Magic Johnson* SG LAL 1981 3.4 12759 John Stockton* PG UTA 1989 3.2 21545 Slick Watts PG SEA 1976 3.2 642 Alvin Robertson SG SAS 1987 3.2 16844 Micheal Ray SG NYK 1980 3.2 16751 Michael Jordan* SG CHI 1988 3.2 16836 Micheal Ray PG GSW 1983 3.1 Top 10 Leaders in APG: Player Pos Tm Year APG 12760 John Stockton* PG UTA 1990 14.5 12761 John Stockton* PG UTA 1991 14.2 10132 Isiah Thomas* PG DET 1985 13.9 12758 John Stockton* PG UTA 1988 13.8 12762 John Stockton* PG UTA 1992 13.7 12759 John Stockton* PG UTA 1989 13.6 14150 Kevin Porter PG DET 1979 13.4 15585 Magic Johnson* PG LAL 1984 13.1 6333 Deron Williams PG NJN 2011 12.8 15590 Magic Johnson* PG LAL 1989 12.8 Top 10 Leaders in BPG: Player Pos Tm Year BPG 7768 Edy Tavares C CLE 2017 6.0 15984 Mark Eaton C UTA 1985 5.6 15711 Manute Bol C WSB 1986 5.0 19155 Rasheed Wallace PF ATL 2004 5.0 7864 Elmore Smith C LAL 1974 4.9 9562 Hakeem Olajuwon* C HOU 1990 4.6 15985 Mark Eaton C UTA 1986 4.6 6703 Dikembe Mutombo* C DEN 1996 4.5 5887 David Robinson* C SAS 1992 4.5 22455 Theo Ratliff C POR 2004 4.4 Top 10 Leaders in RPG: Player Pos Tm Year RPG 24408 Wilt Chamberlain* C PHW 1961 27.2 24407 Wilt Chamberlain* C PHW 1960 27.0 24409 Wilt Chamberlain* C PHW 1962 25.6 1953 Bill Russell* C BOS 1964 24.7 24404 Wilt Chamberlain* C PHI 1966 24.6 24410 Wilt Chamberlain* C SFW 1963 24.3 24405 Wilt Chamberlain* C PHI 1967 24.2 1954 Bill Russell* C BOS 1965 24.1 1949 Bill Russell* C BOS 1960 24.0 1950 Bill Russell* C BOS 1961 23.9 . import pandas as pd import matplotlib.pyplot as plt import seaborn as sns # Load data season_data = pd.read_csv(&#39;./Seasons_Stats.csv&#39;) # Drop unnecessary columns season_data = season_data.drop(&#39;Unnamed: 0&#39;, axis=1) # Fill missing values season_data = season_data.fillna(0) # Convert data types season_data[&#39;Year&#39;] = season_data[&#39;Year&#39;].astype(int) # Filter data to include only relevant columns df = season_data[[&#39;Year&#39;, &#39;PTS&#39;, &#39;AST&#39;, &#39;TRB&#39;]] # Compute correlations between variables corr = df.corr() # Create linear regression plot for points and assists sns.lmplot(x=&#39;PTS&#39;, y=&#39;AST&#39;, data=df) # Set title and axes labels plt.title(&#39;Points vs. Assists&#39;) plt.xlabel(&#39;Points&#39;) plt.ylabel(&#39;Assists&#39;) # Show the plot plt.show() . Fontconfig warning: ignoring UTF-8: not a valid region tag . I tried to have a graph with Assists and Points to see the correlation between Great Scorers and Great Team Players. However this does not help at all as this graph is simply a clump of data. I would like to learn more about how I can analyze the data and create a more accurate graph. .",
            "url": "https://samarthkalanke.github.io/SamarthKalanke/2023/03/09/panda.html",
            "relUrl": "/2023/03/09/panda.html",
            "date": " • Mar 9, 2023"
        }
        
    
  
    
        ,"post12": {
            "title": "Discussion de la Class",
            "content": "5.4 .",
            "url": "https://samarthkalanke.github.io/SamarthKalanke/markdown/2023/01/24/BlogPost51.html",
            "relUrl": "/markdown/2023/01/24/BlogPost51.html",
            "date": " • Jan 24, 2023"
        }
        
    
  
    
        ,"post13": {
            "title": "Performance task table",
            "content": "Student 1 . Reporting Category Student Score College Board Score Comments . Program Purpose and Function | 1 | 0 | He had all that he needed but just describe | . Data Abstraction | 1 | 1 | He met all the scoring criteria | . Managing Complexity | 0 | 0 | He didn’t have any of the requirements | . Procedral Abstraction | 1 | 1 | Had everything he needed to have | . Algorithim Implentation | 1 | 1 | Had everything that he needed to have | . Testing | 1 | 1 | Tested correctly and had everything | . Student 2 . Reporting Category Student Score College Board Score Comments . Program Purpose and Function | 1 | 1 | He had all that he needed and met given requirements | . Data Abstraction | 1 | 1 | He met all the scoring criteria, he went indepth in the written response | . Managing Complexity | 1 | 1 | He succeeded all of the requirements | . Procedral Abstraction | 1 | 1 | Succeded everything he needed to have | . Algorithim Implentation | 1 | 1 | Had everything that he needed to have, it is detailed | . Testing | 1 | 1 | Tested correctly and had everything | .",
            "url": "https://samarthkalanke.github.io/SamarthKalanke/markdown/2023/01/04/PerformanceScoring.html",
            "relUrl": "/markdown/2023/01/04/PerformanceScoring.html",
            "date": " • Jan 4, 2023"
        }
        
    
  
    
        ,"post14": {
            "title": "Homework/Hacks for Sections 17-18",
            "content": "HACK 1 . Please write a short 1-2 sentence explanation describing the difference between decidable and undecidable problems. Make sure to provide at least one example of each. . &lt;font color=#FF0000&gt;Undecidable problems are problems that algorithms simply cannot solve. One of the first problems discovered is the halting problem. Most of these problems are paradoxical and theoretical situations where answers are most likely are subjective. However, some of these problems can have situations where some inputs have values. But not all values are going to have outputs.&lt;/p&gt; Decidable problems are problems that algorithms can return an output for all inputs. Mostly, these are algebraical problems that are simply solvable. . &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; HACK 2 . Which of the following is a 3 step algorithm? . A. 2 x 6 x 8 . B. 4^5 . C. (3 x 8)^2 . D. None of the above . E. All of the above . &lt;font color=#FF0000&gt;ANSWER: C&lt;/p&gt; STEP 1: 3 x 8 . STEP 2 &amp; 3: (24)^2 . The first step is simply multiplying two numbers. The second and third is squaring the result of step one. . &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; HACK 3: Rewrite this JavaScript Code in a More Efficient Way (Hint: Use Binary Search) . function peak_finder(array){ let counter = 0 let peak = 0 let peak_index =0 while (counter &lt;= array.length){ console.log(counter) if (counter === 0){ if (a[0]&gt;=a[1]){ peak = a[0] peak_index = counter counter = array.length return `The ${counter-1} indexed number, ${peak} is a peak` }else{ counter+=1 } }else if(counter === array.length-1){ if (a[array.length-1] &gt;= a[array.length-2]){ peak = a[array.length-1] peak_index = counter counter = array.length return `The ${counter-1} indexed number, ${peak} is a peak` } }else{ if (a[counter]&gt; a[counter+1] &amp;&amp; a[counter]&gt; a[counter-1]){ peak = a[counter] peak_index = counter counter = array.length return `The ${counter-1} indexed number, ${peak} is a peak` }else{ counter += 1 } } } } . new one below . function sum(n) { if (n &lt;= 1) { return n; } return n + sum(n - 1); } . HACK 4: Rewrite this Python Code in a More Efficient Way . def merge_sort(data): if len(data) &lt;= 1: return #splits data in half, defines left and right mid = len(data) // 2 left_data = data[:mid] right_data = data[mid:] merge_sort(left_data) merge_sort(right_data) left_index = 0 right_index = 0 data_index = 0 while left_index &lt; len(left_data) and right_index &lt; len(right_data): if left_data[left_index] &lt; right_data[right_index]: data[data_index] = left_data[left_index] left_index += 1 else: data[data_index] = right_data[right_index] right_index += 1 data_index += 1 if left_index &lt; len(left_data): del data[data_index:] data += left_data[left_index:] elif right_index &lt; len(right_data): del data[data_index:] data += right_data[right_index:] if __name__ == &#39;__main__&#39;: data = [9, 1, 7, 6, 2, 8, 5, 3, 4, 0] merge_sort(data) print(data) . [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] . data = [9, 1, 7, 6, 2, 8, 5, 3, 4, 0] print(&quot;original list&quot;) print(data) data.sort() print(&quot;--&quot;) print(&quot;sorted list&quot;) print(data) . original list [9, 1, 7, 6, 2, 8, 5, 3, 4, 0] -- sorted list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] . HACK 5: Rewrite this Python Code in a More Efficient Way . def heap_permutation(data, n): if n == 1: print(data) return for i in range(n): heap_permutation(data, n - 1) if n % 2 == 0: data[i], data[n-1] = data[n-1], data[i] else: data[0], data[n-1] = data[n-1], data[0] if __name__ == &#39;__main__&#39;: data = [1, 2, 3] heap_permutation(data, len(data)) . [1, 2, 3] [2, 1, 3] [3, 1, 2] [1, 3, 2] [2, 3, 1] [3, 2, 1] . from itertools import permutations perm = permutations([1, 2, 3]) for i in list(perm): print(i) . (1, 2, 3) (1, 3, 2) (2, 1, 3) (2, 3, 1) (3, 1, 2) (3, 2, 1) . &lt;/div&gt; .",
            "url": "https://samarthkalanke.github.io/SamarthKalanke/2022/12/15/Hacks17-18.html",
            "relUrl": "/2022/12/15/Hacks17-18.html",
            "date": " • Dec 15, 2022"
        }
        
    
  
    
        ,"post15": {
            "title": "Group 8 HACKS (Section 16)",
            "content": "HACKS . Question Answer . Name(First+Last) | Samarth Kalanke | . 1 | A | . 2 | A | . 3 | C | . 4 | C | . 5 | C | . 6 | A | . 7 | B | . 8 | no #8 | . 9 | B | . Notes and Vocabulary (Extra Work) . Notes . Pseudo-random number generators are used to mock the imperfections that are always in the real world and save resources | When making a simulation you should consider: | Removing details by using pseudo-random number generators | Using other ideas; like procedure, flowcharts and conditionals | Not suitable if the circumstances are very complicated or if an experiment would be easier | Simulations replicate real world scenarios digitally | Experiments are held in the real world | Simulations are easier to repeat to obtain more estimations | Simulation: a way to simulate real-world environments to test safety or logistics | Simulations will not have the same result | Simulation investigates phenomenon without real world constraints of time etc. | Experiments are more accurate than simulations | Should remove other details to improve functionality of the simulation | . Simulations . A simulation is an simpler abstraction of an very complicated natural phenomena. It removes details that are unnecessary or are too difficult to simulate. The level of abstraction in a simulation depends on why we&#39;re creating it in the first place. . Why would you make a simulation? . Safer: Many safety hazards that can be encountered through experimentation can be avoided with simulations. Ex: Designing a boat to travel to an island . Less Expensive: Since real world equipment isn’t needed to make and run a simulation (only computer and programmer needed), this makes simulations an inexpensive way to test something. Ex: Boat example again . Repeatable: Once a simulation is created, it’s easy to repeat it to get different but similar results. Can Make Predictions: Something that can’t be done with experiments is making predictions. Simulations are useful for this because previous data can be used to predict what will happen in the future. Ex: Global population . Extra Credit Code . import random, time, math def d6(): return random.randint(1,6) def run_sim(): my_dic = {} for i in range(10000): num = d6() if num not in my_dic: my_dic[num] = 1 else: my_dic[num] = my_dic[num] + 1 for number in sorted(my_dic): print(f&quot;Number of {number}s on 10000 rolls: {my_dic[number]}, or {round(((my_dic[number])/10000)*100, 2)}%&quot;) for i in range(3): print(&quot;Simulation &quot; + str(i+1)) run_sim() . Simulation 1 Number of 1s on 10000 rolls: 1722, or 17.22% Number of 2s on 10000 rolls: 1699, or 16.99% Number of 3s on 10000 rolls: 1570, or 15.7% Number of 4s on 10000 rolls: 1669, or 16.69% Number of 5s on 10000 rolls: 1682, or 16.82% Number of 6s on 10000 rolls: 1658, or 16.58% Simulation 2 Number of 1s on 10000 rolls: 1706, or 17.06% Number of 2s on 10000 rolls: 1700, or 17.0% Number of 3s on 10000 rolls: 1692, or 16.92% Number of 4s on 10000 rolls: 1646, or 16.46% Number of 5s on 10000 rolls: 1599, or 15.99% Number of 6s on 10000 rolls: 1657, or 16.57% Simulation 3 Number of 1s on 10000 rolls: 1718, or 17.18% Number of 2s on 10000 rolls: 1662, or 16.62% Number of 3s on 10000 rolls: 1666, or 16.66% Number of 4s on 10000 rolls: 1694, or 16.94% Number of 5s on 10000 rolls: 1641, or 16.41% Number of 6s on 10000 rolls: 1619, or 16.19% . import random print(&quot;Welcome to a coin flip simulation!&quot;) print(&quot;-&quot;) n = 10000 #this value can easily be changed to change the sample size heads = 0 tails = 0 for i in range(n): flip = random.randint(1,2) # get a random number between 1 and 2 if flip == 1: # head heads = heads + 1 else: # tail tails = tails + 1 print(&#39;Number of heads:&#39;, heads) print(&#39;Number of tails:&#39;, tails) . Welcome to a coin flip simulation! - Number of heads: 4940 Number of tails: 5060 . import random num_rolls = int(input(&quot;how many times would you like to roll?&quot;)) for i in range(num_rolls): roll = random.randint(1, 6) print(f&#39;Roll {i+1}: {roll}&#39;) . Roll 1: 1 Roll 2: 3 Roll 3: 3 Roll 4: 6 Roll 5: 1 Roll 6: 4 Roll 7: 1 Roll 8: 1 Roll 9: 2 Roll 10: 6 Roll 11: 5 Roll 12: 2 Roll 13: 4 Roll 14: 6 Roll 15: 4 Roll 16: 4 Roll 17: 1 Roll 18: 5 Roll 19: 1 Roll 20: 2 Roll 21: 3 Roll 22: 6 Roll 23: 4 Roll 24: 4 Roll 25: 1 Roll 26: 3 Roll 27: 6 Roll 28: 6 Roll 29: 4 Roll 30: 6 Roll 31: 5 Roll 32: 1 Roll 33: 4 Roll 34: 4 Roll 35: 4 Roll 36: 2 Roll 37: 4 Roll 38: 4 Roll 39: 1 Roll 40: 1 Roll 41: 1 Roll 42: 5 Roll 43: 4 Roll 44: 2 Roll 45: 5 Roll 46: 3 Roll 47: 6 Roll 48: 5 Roll 49: 6 Roll 50: 1 Roll 51: 6 Roll 52: 5 Roll 53: 3 Roll 54: 1 Roll 55: 3 Roll 56: 3 Roll 57: 3 Roll 58: 2 Roll 59: 1 Roll 60: 5 Roll 61: 2 Roll 62: 2 Roll 63: 2 Roll 64: 4 Roll 65: 2 Roll 66: 2 Roll 67: 6 Roll 68: 6 Roll 69: 2 Roll 70: 5 Roll 71: 4 Roll 72: 4 Roll 73: 3 Roll 74: 3 Roll 75: 5 Roll 76: 3 Roll 77: 6 Roll 78: 4 Roll 79: 4 Roll 80: 2 Roll 81: 6 Roll 82: 4 Roll 83: 4 Roll 84: 5 Roll 85: 5 Roll 86: 3 Roll 87: 2 Roll 88: 4 Roll 89: 1 Roll 90: 6 Roll 91: 4 Roll 92: 3 Roll 93: 5 Roll 94: 6 Roll 95: 1 Roll 96: 6 Roll 97: 5 Roll 98: 2 Roll 99: 6 Roll 100: 4 . import random data = [] for i in range(5): one = random.randint(1, 6) two = random.randint(1, 6) d = { &quot;First Dice&quot;: one, &quot;Second Dice&quot;: two} data.append(d) print(data) . [{&#39;First Dice&#39;: 2, &#39;Second Dice&#39;: 6}, {&#39;First Dice&#39;: 2, &#39;Second Dice&#39;: 5}, {&#39;First Dice&#39;: 6, &#39;Second Dice&#39;: 2}, {&#39;First Dice&#39;: 3, &#39;Second Dice&#39;: 6}, {&#39;First Dice&#39;: 2, &#39;Second Dice&#39;: 5}] .",
            "url": "https://samarthkalanke.github.io/SamarthKalanke/2022/12/15/Hacks16.html",
            "relUrl": "/2022/12/15/Hacks16.html",
            "date": " • Dec 15, 2022"
        }
        
    
  
    
        ,"post16": {
            "title": "Sections 14-15 Hacks",
            "content": "Reflection: . In the lesson, I learned about software libraries, the use for existing code segments, APIs, and the importance of documentation for these APIs and software libraries. First off, I learned that it is very useful to use existing procedures in code, as this can make the creation of the program more efficient. Furthermore, it is important to accompany these procedures with the proper documentation, which explains what the procedure is doing and what the program is attempting to accomplish. Furthermore, I also learned more about the &quot;random&quot; module that is often used in Python. It can serve as a random number generator and a number shuffler as well, which is very cool. . Multiple Choice: . What does random (a,b) function generate? | A. A random integer from a to b exclusive . B. A random integer from a to b inclusive . C. A random word from variable a to variable b exclusive . D. A random word from variable a to variable b inclusive . Option B is the correct answer, since the random function is used to generate a random number from a range a to b, and the random number can be the bounds of that range as well, therefore rendering it INCLUSIVE. . What is x, y, and z in random.randrange(x, y, z)? | A. x = start, y = stop, z = step . B. x = start, y = step, z = stop . C. x = stop, y = start, z = step . D. x = step, y = start, z = stop . Which of the following is NOT part of the random library? | A. random.item . B. random.random . C. random.shuffle . D. random.randint . Short Answer Questions: . Libraries allow us to use already tested and functional code in our own procedures. This creates a more efficient programming process. . | This procedure goes through a series of steps. First of all, the random module is imported to be used in this procedure. Then, an input is provided for the user to input everyone&#39;s names. The &quot;names&quot; variable is then defined as everyone&#39;s names split with a comma in between. Then, there is a variable defined as &quot;num_items&quot;, which measures the number of names inputted. . | Then, the random module comes into place by selecting a random number in between 0 and the number of names - 1, inclusive. Then, in order to figure out the person who will pay the bill, the numbers corresponding to the names are randomized, and the name of the person that the code lands on is printed at the end. . Coding Challenges . import random namesList = [&quot;Safin&quot;,&quot;Aarav&quot;,&quot;Boomin&quot;,&quot;G&quot;,&quot;Navan&quot;,&quot;Shaurya&quot;,&quot;Justin&quot;,&quot;Theo&quot;,&quot;James&quot;,&quot;Mihir&quot;,&quot;Aryan&quot;,&quot;Karthik&quot;,&quot;Rohan&quot;,&quot;Rohit&quot;,&quot;Zach&quot;] sample_namesList = random.sample(namesList, k=5) # here, k = number of items to select print(f&quot;you got these 5 random names: {sample_namesList}&quot;) . you got these 5 random names: [&#39;Aarav&#39;, &#39;Shaurya&#39;, &#39;G&#39;, &#39;James&#39;, &#39;Rohan&#39;] . import random player1= random.randrange(1,6) player1t2 = random.randrange(1,6) print(&quot;Player 1 landed on a&quot;, player1, &quot;and&quot;, player1t2, &quot;adding up to:&quot;, player1+player1t2) player2 = random.randrange(1,6) player2t2 = random.randrange(1,6) print(&quot;Player 2 landed on a&quot;, player2, &quot;and&quot;, player2t2, &quot;adding up to:&quot;, player2+player2t2) player1score = player1 + player1t2 player2score = player2 + player2t2 if player1score &gt; player2score: print(&quot;Player 1 is the winner.&quot;) elif player1score == player2score: print(&quot;It&#39;s a tie.&quot;) else: print(&quot;Player 2 is the winner.&quot;) . Extra Credit Try . import random directions = [&quot;up&quot;, &quot;down&quot;, &quot;left&quot;, &quot;right&quot;] start_move = random.choice(directions) start_point = random.randint(1,25) end_point = random.randint(1,25) print(&quot;You are starting in this direction: &quot; + start_move) print(&quot;You will start at this block number: &quot; + str(start_point)) print(&quot;Your mission if you choose to accept it is to make it to this block: &quot; + str(end_point)) print(&quot;The obstacles are in the following areas: &quot;) i = 1 while i &lt;= 6: obstacle = random.randint(1,25) print(str(obstacle)) i += 1 . You are starting in this direction: up You will start at this block number: 7 Your mission if you choose to accept it is to make it to this block: 20 The obstacles are in the following areas: 11 12 4 5 24 17 . I wasn&#39;t really sure where to go from here, so this was my attempt. .",
            "url": "https://samarthkalanke.github.io/SamarthKalanke/jupyter/2022/12/14/Hacks14n15.html",
            "relUrl": "/jupyter/2022/12/14/Hacks14n15.html",
            "date": " • Dec 14, 2022"
        }
        
    
  
    
        ,"post17": {
            "title": "Group 6 HACKS",
            "content": "Vocab section 12 . Method/Function/Procedure - A set of code that can be run as a package, that takes in parameters and returns a return value Example: add(1, 2), which adds two numbers | Catch all terms for a set of code | . | Parameter - Input values for procedures # Vocab Section 13 | Procedure: is a named group of programming instructions that serves a purpose | Parameter: are input values of a procedure ^ There are two types of procedures, one that returns a value or some type of data and on that just executes a block of statements (void) | Modularity - the practice of breaking a complex program into smaller, independent parts or modules that can be used and reused in different parts of the program | . Notes: . Make your names descriptive! | Make your program into smaller independent modules that can be used multiple times | Utilize update functions and recursive | . 3.12 Hacks Part 1 . Problem 1: Qais is writing code to calculate formulas from his math class. He&#39;s currently working on a procedure to calculate average speed, based on this formula: . Average speed = Total Distance/Total Time . Highlight which of these is the best procedure for calculating and displaying average speed: . PROCEDURE calcAvgSpeed (distance, time) { DISPLAY (distance/time) } PROCEDURE calcAvgSpeed (distance) { DISPLAY (distance/time) } PROCEDURE calcAvgSpeed (distance, time) { DISPLAY (time/distance) } . Explanation: Since the first option uses the correct formula for average speed (distance over time) and the two parameters are properly utilized (distance and time), that would be the best procedure for calculating and displaying average speed. . Problem 2: James Hunter is looking through his classmate&#39;s program and sees a procedure called heightenEmotions: PROCEDURE heightenEmotions(myEmotion). That procedure manipulates strings using two built-in procedures, CONCAT for concatenating two strings together, and UPPER for converting a string to uppercase. . James Hunter then sees this line of code: . heightenEmotions(&quot;im mad&quot;) . After that line of code runs, will nothing be displayed? . A. True B. False . Explanation: Nothing is going to be displayed, since there is no DISPLAY(__) line in the program. . Problem 3: Which of these code snippets successfully calculates and stores her total footprint? Highlight 2 answers. . totalFootprint ← calcFlightFootprint(2451, 118) + calcFlightFootprint(3442, 252) | totalFootprint ← calcFlightFootprint(2451, 118 + 3442, 252) . totalFootprint ← calcFlightFootprint((2451, 118) + (3442, 252)) | laNyCarbon ← calcFlightFootprint(2451, 118) nyLondonCarbon ← calcFlightFootprint(3442, 252) totalFootprint ← laNyCarbon + nyLondonCarbon . Explanation: The first code snippet works, since the total footprint is outputted by adding the two flight&#39;s footprints separately and then adding them together. Then, the third code snippet also works, because it is adding the two components with each other from both flights, setting it as the entire &quot;calcFlightFootprint&quot;, and then showing it as the &quot;totalFootprint&quot;. . 3.12 Hacks Part 2 . Problem 1: . Find a. . c = 9 . b = 9 * 9 = 81 . a = b c = 81 9 = 729 . Problem #2: . Find the cost. . &#39;Temp&#39; becomes equal to 110 (100 + percent taxed, and the percent taxed is 10%.) . Then, it is divided by 100. 110/100 = 1.1 . Then, to find the final cost, the initial cost ($173) is multiplied by 1.1, which yields **$190.30**. . Problem #3: . Find the temperature in degrees Celsius. . Initial Temperature: 103 degrees Fahrenheit . 103 - 32 = 71 . 71 x (5/9) = 39.44 degrees Celsius . 3.13 Hacks . def replaceRByards(toprbyardspg, currentrbyards, totalGames): if ((toprbyardspg/totalGames) &lt; (currentrbyards/totalGames)): toprbyardspg = currentrbyards print(toprbyardspg) replaceRByards(100, 1260, 12) . PROCEDURE aPlus() { if (canMoveForward): moveForward else (canMoveRight): rotateRight moveForward if (canMoveLeft): rotateLeft moveForward } . Problem 3: Which is the correct way to define the name of a procedure? . A. PROCEDURE MYLIST B. PROCEDURE MyList C. procedure mylist . Explanation: Option B is definitely the right answer, as the procedure name is supposed to have some capital letters (not all capitals), and the word procedure should be in all caps. . PROCEDURE greenSquare { rotateLeft . moveForward moveForward moveForward moveForward moveForward moveForward rotateLeft rotateLeft rotateLeft . } .",
            "url": "https://samarthkalanke.github.io/SamarthKalanke/2022/12/13/Hacks12.html",
            "relUrl": "/2022/12/13/Hacks12.html",
            "date": " • Dec 13, 2022"
        }
        
    
  
    
        ,"post18": {
            "title": "Total Hacks notes",
            "content": "Vocab Unit 3 Unit 3 Vocab Bits, Bytes, Hexadecimal / Nibbles : Various ways of representing data. Binary Numbers: Unsigned Integer, Signed Integer, Floating Point - Floating points are decimals, unsigned integers are integers without a sing (abs value), and signed integers have signs Binary Data Abstractions: Boolean, ASCII, Unicode, RGB - these are various representations of binary, ASCII is characters, unicode and RGB are colors, booleans are 1s and 0, on and off Data Compression: Lossy, Lossless (not discussed yet) - lossy is compressing, but you may lose data. Lossless is the opposite, as it does not lose data. . Unit 3… Algorithm/Programming Terms - . Variables, Data Types, Assignment Operators - Variables are variable holders of values, data types are the types of what they can be, and assignment operators assign values to variables . Managing Complexity with Variables: Lists, 2D Lists, Dictionaries, Class Algorithms, Sequence, Selection, Iteration - These are ways to manage complexity through abstraction of various data and procedures that influence . Expressions and Iteration, Truth Tables - ways of representing true and false operators, mainly between the 1s and 0s of binary. True trumps false in OR, but fails to in AND. . Characters, Strings, Length, Concatenation, Upper, Lower, Traversing Strings - Strings are plaintext, and these are various ways of manipulating strings. Making them upper and lower case, adding more string to the string, and iterating over them. . Python If, Elif, Else conditionals; Nested Selection Statements - Conditionals, if checks if something is true. Elif checks if the above if statement isn’t true, and else checks if nothing above ois true. . Python For, While loops with Range, with List - various loops to iterate over iterables. While loops have a conditional, loop over range loops over a range of numbers, and for loops over an iterable. . Combining loops with conditionals to Break, Continue - continue resets the loop, break breaks out of it . Procedural Abstraction, Python Def procedures, Parameters, Return Values - Ways of managing complexity in repeatable procedures (def in python). These return return values and contain parameters that influence the output. . Decidable problems: You can develop an algorithm for these problems, specifically yes or no . Undecidable problem: No algorithm can be used in order to provide a correct yes or no problems. . Problem: description of a task that may or may not be able to be solved through the use of an algorithm Decision problem: A problem with a binary answer Algorithm: A series of ways to solve a problem. Process or a set of rules . 1, 2, 3, and 4 step 1: Linear 2: Exponential 3: Square 4: Factorial Superpolynomial: Offers an incredibly small amount of data incredibly large amounts of time. Simulation: Simulates a real-world experiment (abstraction of a complicated phenomena) . Removes unnecessary details Level of abstraction depends on who/why we’re creating it Ex: A flying simulator Documentation: The what, how, or why of the code Libraries: Prewritten code or procedures that can be used to maximize efficiency API: Data stored in a database that can be accessed via code . Random: A library in python to assist in pseudo-randomness . Method/Function/Procedure - A set of code that can be run as a package, that takes in parameters and returns a return value . Example: add(1, 2), which adds two numbers Catch all terms for a set of code Parameter - Input values for procedures . Procedure: is a named group of programming instructions that serves a purpose . Parameter: are input values of a procedure ^ There are two types of procedures, one that returns a value or some type of data and on that just executes a block of statements (void) . Modularity - the practice of breaking a complex program into smaller, independent parts or modules that can be used and reused in different parts of the program . Binary Search: An algorithm to search methodically for an item in a sorted list . Algorithms: Steps in order repeated or run through to accomplish a task . Problem: description of a task that may or may not be able to be solved through the use of an algorithm Decision problem: A problem with a binary answer Algorithm: A series of ways to solve a problem. Process or a set of rules . 1, 2, 3, and 4 step 1: Linear 2: Exponential 3: Square 4: Factorial Superpolynomial: Offers an incredibly small amount of data incredibly large amounts of time. .",
            "url": "https://samarthkalanke.github.io/SamarthKalanke/2022/12/07/TotalHax.html",
            "relUrl": "/2022/12/07/TotalHax.html",
            "date": " • Dec 7, 2022"
        }
        
    
  
    
        ,"post19": {
            "title": "Hacks for Section 8 and 10",
            "content": "Notes . Iteration - Repetition of a Process . For Loop - FOR LOOP repeats a function for a set number of times; I is the number of times repeated . While Loop - The while loop is used to repeat a section of code an unknown number of times until a specific condition is met . Initialization - What sets the counter variable to a starting value. For example (var i = 0) represents an initial value of 0. . Condition - Allows the computer to know whether or not to keep repeating the loop. . increment/decrement - Modifies the counter variable after each repetition. . Indexing / List Index - The position of an element in a list, starting from 0 . append, remove, pop - Various methods, append adds an element to the end, remove removes at an index, and pop removes the last item. . Elements [in a list] - An item in a list. . Nesting - Having one data type or function inside another data type or function, such as lists or loops. . Array - Another name for a list, depends on the language . Lists are a collection of data in a sequence that is an iterable | Each sequence is demarcated with an index, starting from 0. This is known as base 0 indexing | In memory, it is stored as a variable name with multiple pointers to each variable stored in a certain order | Lists can also be called arrays | Lists have methods that act upon the list and change them. This moves the pointers within RAM to change the parts of the list. | . Lists methods Mutate, meaning they actively change the list, but they don&#39;t return anything. This means that return a None-type, which you cannot manipulate . Exercise 1 . Task: Reverse a list utilizing features of lists and iteration Hint: Use two parameters with the range function . list = [1, 2, 3, 4, 5] print(&quot;original list:&quot;,list) reverse = [] for i in list: reverse = [i] + reverse print(&quot;reversed list:&quot;, reverse) #shown below is the one using the range function other=[] for i in range(1,len(list)+1): other.append(list[len(list)-i]) print(&quot;other reversed list:&quot;, other) . original list: [1, 2, 3, 4, 5] reversed list: [5, 4, 3, 2, 1] other reversed list: [5, 4, 3, 2, 1] . Exercise 2 . Task: Similar to insertion sort, this algorithm takes an unsorted array and returns a sorted array Unlike insertion sort where you iterate through the each element and move the smaller elements to the front, this algorithm starts at the beginning and swaps the position of every element in the array Expected Output The sorted array from 1-10 . list = [9, 8, 4, 3, 5, 2, 6, 7, 1, 0] print(f&quot;array before sort {list}&quot;) def insertion_sort(list): for index in range(1,len(list)): # repeats through length of the array value = list[index] i = index - 1 while i &gt;= 0: if value &lt; list[i]: list[i+1] = list[i] # shift number in slot i to the right list[i] = value # shift value left into slot i i = i - 1 else: break IS = insertion_sort(list) print(f&quot;array after sort {list}&quot;) . array before sort [9, 8, 4, 3, 5, 2, 6, 7, 1, 0] array after sort [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] . MC Quiz . The only question I got wrong on the quiz is the 9th question, show below: . . The correct answer to this question is &quot;FOR loops&quot;. This is because a for loop keeps running for a set number of times, which would be the most appropriate in this situation when the user is iterating over a list UNTIL the user inputs ‘quit’. I said that it would be a while loop, since I thought that it was a conditional statement if the user was inputting ‘quit’. . Reflection . Throughout these sections, I gained a better understanding of many different concepts. I learned more in depth about the main types of loops (for, while, recursive), and I was also able to learn more about the importance of iterations and lists. Learning more about certain features of lists such as the append and pop option allows me to automate certain code snippets in a more efficient manner, rather than nesting identical code to complete the same task, but in a more tedious manner. .",
            "url": "https://samarthkalanke.github.io/SamarthKalanke/2022/12/07/Hacks8n10.html",
            "relUrl": "/2022/12/07/Hacks8n10.html",
            "date": " • Dec 7, 2022"
        }
        
    
  
    
        ,"post20": {
            "title": "Title",
            "content": "",
            "url": "https://samarthkalanke.github.io/SamarthKalanke/2022/12/05/Hacks567.html",
            "relUrl": "/2022/12/05/Hacks567.html",
            "date": " • Dec 5, 2022"
        }
        
    
  
    
        ,"post21": {
            "title": "Hacks567",
            "content": "{ “cells”: [ { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “# 3.5-3.7 Hacks n”, “- categories: [Lessons] n”, “- title: 3.5-3.7 Hacks” ] }, { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “For hacks, make a copy of this notebook and answer the questions or complete the code, as described in comments. Additionally, blog about any missed questions, or what you learned from this lesson.” ] }, { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “# 3.5 Hacks n”, “ n”, “## Binary Practice n”, “Using psuedocode operators determine if the statements are true or false. The number type will be indicated in parentheses. n”, “ n”, “1. 90(D) = 1000(B) n”, “ n”, “- B. False n”, “ n”, “2. 10(D) ≠ 0110(B) n”, “ n”, “- A. True n”, “ n”, “3. 56(D) ≥ 111000(B) n”, “ n”, “- A. True n”, “ n”, “3. 99(D) &lt; 1110011(B) n”, “ n”, “- B. True” ] }, { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “Now, complete the binary truth tables” ] }, { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “&lt;html&gt; n”, “ n”, “ &lt;div&gt;AND Operator&lt;/div&gt; n”, “ &lt;div&gt; n”, “ &lt;table&gt; n”, “ &lt;tr&gt; n”, “ &lt;th&gt;Value 1&lt;/th&gt; n”, “ &lt;th&gt;Value 2&lt;/th&gt; n”, “ &lt;th&gt;Result&lt;/th&gt; n”, “ &lt;/tr&gt; n”, “ &lt;tr&gt; n”, “ &lt;td&gt;1&lt;/td&gt; n”, “ &lt;td&gt;1&lt;/td&gt; n”, “ &lt;td&gt;1&lt;/td&gt; n”, “ &lt;/tr&gt; n”, “ &lt;tr&gt; n”, “ &lt;td&gt;1&lt;/td&gt; n”, “ &lt;td&gt;0&lt;/td&gt; n”, “ &lt;td&gt;0&lt;/td&gt; n”, “ &lt;/tr&gt; n”, “ &lt;tr&gt; n”, “ &lt;td&gt;0&lt;/td&gt; n”, “ &lt;td&gt;1&lt;/td&gt; n”, “ &lt;td&gt;0&lt;/td&gt; n”, “ &lt;/tr&gt; n”, “ &lt;tr&gt; n”, “ &lt;td&gt;0&lt;/td&gt; n”, “ &lt;td&gt;0&lt;/td&gt; n”, “ &lt;td&gt;0&lt;/td&gt; n”, “ &lt;/tr&gt; n”, “ &lt;/table&gt; n”, “ &lt;/div&gt; n”, “ &lt;div&gt;OR Operator&lt;/div&gt; n”, “ &lt;div&gt; n”, “ &lt;table&gt; n”, “ &lt;tr&gt; n”, “ &lt;th&gt;Value 1&lt;/th&gt; n”, “ &lt;th&gt;Value 2&lt;/th&gt; n”, “ &lt;th&gt;Result&lt;/th&gt; n”, “ &lt;/tr&gt; n”, “ &lt;tr&gt; n”, “ &lt;td&gt;1&lt;/td&gt; n”, “ &lt;td&gt;1&lt;/td&gt; n”, “ &lt;td&gt;1&lt;/td&gt; n”, “ &lt;/tr&gt; n”, “ &lt;tr&gt; n”, “ &lt;td&gt;1&lt;/td&gt; n”, “ &lt;td&gt;0&lt;/td&gt; n”, “ &lt;td&gt;1&lt;/td&gt; n”, “ &lt;/tr&gt; n”, “ &lt;tr&gt; n”, “ &lt;td&gt;0&lt;/td&gt; n”, “ &lt;td&gt;1&lt;/td&gt; n”, “ &lt;td&gt;1&lt;/td&gt; n”, “ &lt;/tr&gt; n”, “ &lt;tr&gt; n”, “ &lt;td&gt;0&lt;/td&gt; n”, “ &lt;td&gt;0&lt;/td&gt; n”, “ &lt;td&gt;0&lt;/td&gt; n”, “ &lt;/tr&gt; n”, “ &lt;/table&gt; n”, “ &lt;/div&gt; n”, “ &lt;div&gt;Not operator&lt;/div&gt; n”, “ &lt;div&gt; n”, “ &lt;table&gt; n”, “ &lt;tr&gt; n”, “ &lt;th&gt;Not&lt;/th&gt; n”, “ &lt;th&gt;Value&lt;/th&gt; n”, “ &lt;th&gt;Result&lt;/th&gt; n”, “ &lt;/tr&gt; n”, “ &lt;tr&gt; n”, “ &lt;td&gt;Not&lt;/td&gt; n”, “ &lt;td&gt;1&lt;/td&gt; n”, “ &lt;td&gt;0&lt;/td&gt; n”, “ &lt;/tr&gt; n”, “ &lt;tr&gt; n”, “ &lt;td&gt;Not&lt;/td&gt; n”, “ &lt;td&gt;0&lt;/td&gt; n”, “ &lt;td&gt;1&lt;/td&gt; n”, “ &lt;/tr&gt; n”, “ &lt;/table&gt; n”, “ &lt;/div&gt; n”, “&lt;/html&gt;” ] }, { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “## Python Practice” ] }, { “cell_type”: “code”, “execution_count”: 1, “metadata”: {}, “outputs”: [ { “name”: “stdout”, “output_type”: “stream”, “text”: [ “False n”, “True n”, “True n” ] } ], “source”: [ “# Testing out relational operators n”, “# Practice with these statements n”, “ n”, “print(20 != 20) # How can you change the operator to print a value of False? n”, “ n”, “x = 30 n”, “y = 20 n”, “z = 10 n”, “print(x &lt;= y + z) # How can this return true by only manipulating the operator? n”, “ n”, “# Manipulate the variables x, y, and z to make the below statement return true n”, “print(x == z + y)” ] }, { “cell_type”: “code”, “execution_count”: 2, “metadata”: {}, “outputs”: [ { “name”: “stdout”, “output_type”: “stream”, “text”: [ “True n”, “False n”, “False n” ] } ], “source”: [ “# Testing out relational operators n”, “# Practice with these statements n”, “ n”, “print(20 == 20) # How can you change the operator to print a value of False? n”, “ n”, “x = 30 n”, “y = 20 n”, “z = 10 n”, “print(x &gt; y + z) # How can this return true by only manipulating the operator? n”, “ n”, “# Manipulate the variables x, y, and z to make the below statement return true n”, “print(x == z)” ] }, { “cell_type”: “code”, “execution_count”: null, “metadata”: {}, “outputs”: [], “source”: [] }, { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “# 3.6 Hacks n”, “ n”, “## AP Prep n”, “ n”, “1. What is displayed by this code? n”, “- result &lt;– 75 n”, “- IF result &lt; 80 { n”, “ DISPLAY(&quot;Please schedule a retake.&quot;) n”, “} n”, “- ELSE { n”, “ DISPLAY(&quot;Nice job!&quot;) n”, “} n”, “ n”, “1. Nice job! n”, “2. Display n”, “3. Please schedule a retake. n”, “4. 75 n”, “ n”, “Answer: 3, Please scedule a retake n”, “ n”, “2. How is an if statement different from an if-else statement. n”, “ n”, “1. Extra words. n”, “2. An if statement will only go through a process if a condition is met. An if-else statement will go through code no matter the conditions. n”, “3. They are the exact same. n”, “4. An if statement will go through the entire code segment every single time and the if-else statement is always used in an algorithm, no matter the conditions. n”, “ n”, “Answer: 2, An if statement will only go through a process if a condition is met. An if-else statement will go through code no matter the conditions. n”, “ n”, “3. What would be most appropriate for this situation? Ben wants to check his bank account. If his car fuel is full, he will go to the bank. Otherwise, he will go home. If he goes to the bank, he will withdraw money only if his balance is above $1000. n”, “ n”, “1. If statement n”, “2. If-else statement n”, “ n”, “Answer: 2, if-else statement n”, “ n”, “4. What would be most appropriate for this situation? Luke wants to play basketball. If it is sunny outside he will go to the park to play basketball. n”, “ n”, “1. If statement n”, “2. If-else statement n”, “ n”, “Answer: 1, if-statement n”, “ n”, “## Using Python” ] }, { “cell_type”: “code”, “execution_count”: 4, “metadata”: {}, “outputs”: [ { “name”: “stdout”, “output_type”: “stream”, “text”: [ “lion n”, “Animal lives in the desert n”, “tiger n”, “Animal lives in the desert n”, “wildebeest n”, “Animal lives in the desert n”, “Fun Fact: The smallest shark is the dwarf lantern shark, and it is small enough to hold in your hand! n”, “Animal lives in the desert n”, “jellyfish n”, “Animal lives in the desert n”, “blobfish n”, “Animal lives in the desert n”, “raven n”, “Animal lives in the desert n” ] } ], “source”: [ “animals = [&quot;lion&quot;, &quot;tiger&quot;, &quot;wildebeest&quot;, &quot;shark&quot;, &quot;jellyfish&quot;, &quot;blobfish&quot;, &quot;raven&quot;] n”, “ n”, “for i in animals: n”, “ if i == &quot;shark&quot;: # What boolean value does this statement cause? n”, “ print(&quot;Fun Fact: The smallest shark is the dwarf lantern shark, and it is small enough to hold in your hand!&quot;) n”, “ else: n”, “ print(i) n”, “ if i == &quot;lion&quot; or &quot;raven&quot;: n”, “ print(&quot;Animal lives in the desert&quot;) n”, “ n”, “# Practice n”, “# Using only one more if statement, alter the code to print out a statement saying if an animal lives in the desert, based on booleans” ] }, { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “# 3.7 Hacks n”, “ n”, “## Exercise 1 n”, “- Create dictionaries for multiple food items, with the listed specifications n”, “ - Chicken Alfredo, Meat: Chicken, Time to Prepare: 60 minutes n”, “ - Cheese Quesadilla, Meat: None, Time to Prepare: 10 minutes n”, “ - Beef Wellington, Meat: Beef, Time to Prepare: 150 minutes n”, “- Used nested conditionals, determine which meal you can cook, given that a) you have no meat at home, and b) you only have 30 minutes to make the meal” ] }, { “cell_type”: “code”, “execution_count”: 8, “metadata”: {}, “outputs”: [ { “name”: “stdout”, “output_type”: “stream”, “text”: [ “You do not have enough time to make this meal n”, “You can make this meal n”, “You do not have enough time to make this meal n” ] } ], “source”: [ “# Write code here n”, “Yes = True n”, “No = False n”, “ n”, “chickenAlfredo = { n”, “ &quot;meat&quot;: Yes, n”, “ &quot;timePrep&quot;: 60, n”, “} n”, “ n”, “cheeseQuesadilla = { n”, “ &quot;meat&quot;: No, n”, “ &quot;timePrep&quot;: 10, n”, “} n”, “ n”, “beefWellington = { n”, “ &quot;meat&quot;: Yes, n”, “ &quot;timePrep&quot;: 150, n”, “} n”, “ n”, “def makeMeal(item): n”, “ if item[&quot;timePrep&quot;] &lt;= 30: n”, “ if item[&quot;meat&quot;] == No: n”, “ print(&quot;You can make this meal&quot;) n”, “ else: n”, “ print(&quot;You need meat to cook this meal&quot;) n”, “ else: n”, “ print(&quot;You do not have enough time to make this meal&quot;) n”, “ n”, “makeMeal(chickenAlfredo) n”, “makeMeal(cheeseQuesadilla) n”, “makeMeal(beefWellington) n”, “ n” ] }, { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “## Exercise 2 n”, “ n”, “Make a flowchart(here is one we used) and write pseudocode for the following scenario. n”, “- Mr. Yeung would like to grade live reviews. n”, “- He wants to see if each student has at least 2 issues on their project. If they don’t they receive a score of 2.0. n”, “- If they have at least 2 issues, check that they have completed at least 5 of their scrumboard tasks. n”, “- If they have completed 5 scrumboard tasks, give the student a 2.7. If they have not completed 5 scrumboard tasks, give them a score of 2.5. If they have completed more than 5 tasks, give them a score of 3.0. n”, “- How much would a student with 3 issues and 1 complete scrumboard task receive?” ] } ], “metadata”: { “kernelspec”: { “display_name”: “Python 3.9.13 64-bit (microsoft store)”, “language”: “python”, “name”: “python3” }, “language_info”: { “codemirror_mode”: { “name”: “ipython”, “version”: 3 }, “file_extension”: “.py”, “mimetype”: “text/x-python”, “name”: “python”, “nbconvert_exporter”: “python”, “pygments_lexer”: “ipython3”, “version”: “3.9.13 (tags/v3.9.13:6de2ca5, May 17 2022, 16:36:42) [MSC v.1929 64 bit (AMD64)]” }, “orig_nbformat”: 4, “vscode”: { “interpreter”: { “hash”: “b9c3426249d7334374c23b70574cd863c9c4586e94e725b6faba2747af0061b7” } } }, “nbformat”: 4, “nbformat_minor”: 2 } .",
            "url": "https://samarthkalanke.github.io/SamarthKalanke/2022/12/05/Hacks567.ipynb",
            "relUrl": "/2022/12/05/Hacks567.ipynb",
            "date": " • Dec 5, 2022"
        }
        
    
  
    
        ,"post22": {
            "title": "Unit 3.1",
            "content": "",
            "url": "https://samarthkalanke.github.io/SamarthKalanke/2022/11/30/Varhax.html",
            "relUrl": "/2022/11/30/Varhax.html",
            "date": " • Nov 30, 2022"
        }
        
    
  
    
        ,"post23": {
            "title": "3.3 Video 1 Question1",
            "content": "",
            "url": "https://samarthkalanke.github.io/SamarthKalanke/2022/11/29/3and4hax.html",
            "relUrl": "/2022/11/29/3and4hax.html",
            "date": " • Nov 29, 2022"
        }
        
    
  
    
        ,"post24": {
            "title": "Other Classwork",
            "content": "Question 17 . Answer A is incorrect because routing on the Internet is usually dynamic; it is not specified in beforehand. . Question 8 . Answer D is incorect because it does not change the values of j and k. However, it returns a new list with the values at indices j and k interchanged. . Question 11 . Answer C is incorrect because the inner loop iterates from index j + 1 to the end of the list, so each element is compared with the all elements that follow it, not the one that proceds it. . Question 32 . Answer D is incorrect because the last assignment procedure assigns a copy of myList to yourList, rather than adding one list to the other. . Question 36 . Answer A is incorect because this would be the correct solution if i were initialized to 2 instead of 1. This code segment will generate the list [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]. .",
            "url": "https://samarthkalanke.github.io/SamarthKalanke/markdown/2022/11/07/Test-Questions.html",
            "relUrl": "/markdown/2022/11/07/Test-Questions.html",
            "date": " • Nov 7, 2022"
        }
        
    
  
    
        ,"post25": {
            "title": "Other Classwork",
            "content": "Project at N@TM . -Our presentation went well I thought especially for the quality of our flask. -Our project was an app that had 3 buttons that took motivational quotes from 3 different APIs and randomly spat them out when pressed. There was also a chart that allowed people to say if they like some quotes or not. -We faced the problem of dating in real time, and there were many assorted distractions, we also faced a lot of errors with the code. . Other projects . I liked seeing 3D animation stuff, because I was in the class last year and found it interesting. Mainly I liked the model of a person someone did. I really liked ceramics, especially because they had a ceramic fruit from One Piece, and anime I really like For CSP, I saw the lawnmowers, who created multiple games on fastpages. Photos . . . .",
            "url": "https://samarthkalanke.github.io/SamarthKalanke/markdown/2022/11/07/N@tM-notes.html",
            "relUrl": "/markdown/2022/11/07/N@tM-notes.html",
            "date": " • Nov 7, 2022"
        }
        
    
  
    
        ,"post26": {
            "title": "Title",
            "content": ". toc: true layout: post description: My week 7 hacks about a KFC API by location. categories: [markdown] . title: KFC API Hacks . KFC API Hacks . import requests url = &quot;https://kfc-locations.p.rapidapi.com/kfc/location/state/AZ/0&quot; headers = { &quot;X-RapidAPI-Key&quot;: &quot;8e39206459msh63119b14325b472p1a320bjsnac696cb1d4af&quot;, &quot;X-RapidAPI-Host&quot;: &quot;kfc-locations.p.rapidapi.com&quot; } response = requests.request(&quot;GET&quot;, url, headers=headers) print(response.json()) . {&#39;message&#39;: &#39;You have exceeded the MONTHLY quota for Requests on your current plan, BASIC. Upgrade your plan at https://rapidapi.com/makingdatameaningful/api/kfc-locations&#39;} . Recap of CollegeBoard Requirements . - .",
            "url": "https://samarthkalanke.github.io/SamarthKalanke/2022/10/11/KFCAPI.html",
            "relUrl": "/2022/10/11/KFCAPI.html",
            "date": " • Oct 11, 2022"
        }
        
    
  
    
        ,"post27": {
            "title": "KFC API Hacks",
            "content": "import requests url = &quot;https://quotel-quotes.p.rapidapi.com/quotes/list&quot; payload = { &quot;pageSize&quot;: 25, &quot;page&quot;: 0 } headers = { &quot;content-type&quot;: &quot;application/json&quot;, &quot;X-RapidAPI-Key&quot;: &quot;8e39206459msh63119b14325b472p1a320bjsnac696cb1d4af&quot;, &quot;X-RapidAPI-Host&quot;: &quot;quotel-quotes.p.rapidapi.com&quot; } response = requests.request(&quot;POST&quot;, url, json=payload, headers=headers) print(response.text) . [{&#34;quoteId&#34;:1,&#34;authorId&#34;:1,&#34;quote&#34;:&#34;I don&#39;t care about what nobody say or how nobody feel. I&#39;m happy, I&#39;m living my life, and that&#39;s what it is.&#34;,&#34;nationality&#34;:&#34;American&#34;,&#34;profession&#34;:&#34;Musician&#34;,&#34;born&#34;:&#34;1992-October-22&#34;,&#34;name&#34;:&#34;21 Savage&#34;},{&#34;quoteId&#34;:2,&#34;authorId&#34;:1,&#34;quote&#34;:&#34;Keep da money, cars, fame, and jewelry, and jus give me all the happiness - I&#39;ll be good forever.&#34;,&#34;nationality&#34;:&#34;American&#34;,&#34;profession&#34;:&#34;Musician&#34;,&#34;born&#34;:&#34;1992-October-22&#34;,&#34;name&#34;:&#34;21 Savage&#34;},{&#34;quoteId&#34;:3,&#34;authorId&#34;:1,&#34;quote&#34;:&#34;I&#39;m humble and got a brain.&#34;,&#34;nationality&#34;:&#34;American&#34;,&#34;profession&#34;:&#34;Musician&#34;,&#34;born&#34;:&#34;1992-October-22&#34;,&#34;name&#34;:&#34;21 Savage&#34;},{&#34;quoteId&#34;:4,&#34;authorId&#34;:3,&#34;quote&#34;:&#34;I think it&#39;s important for us as a society to remember that the youth within juvenile justice systems are, most of the time, youths who simply haven&#39;t had the right mentors and supporters around them - because of circumstances beyond their control.&#34;,&#34;nationality&#34;:&#34;German&#34;,&#34;profession&#34;:&#34;Actress&#34;,&#34;born&#34;:&#34;1990-February-11&#34;,&#34;name&#34;:&#34;Q&#39;orianka Kilcher&#34;},{&#34;quoteId&#34;:5,&#34;authorId&#34;:2,&#34;quote&#34;:&#34;I don&#39;t think anybody is a poet 24/7, only in those rare moments when a person is producing a poem.&#34;,&#34;nationality&#34;:&#34;American&#34;,&#34;profession&#34;:&#34;Author&#34;,&#34;born&#34;:&#34;1929-August-21&#34;,&#34;name&#34;:&#34;X. J. Kennedy&#34;},{&#34;quoteId&#34;:6,&#34;authorId&#34;:4,&#34;quote&#34;:&#34;Every human being, of whatever origin, of whatever station, deserves respect. We must each respect others even as we respect ourselves.&#34;,&#34;profession&#34;:&#34;Statesman&#34;,&#34;born&#34;:&#34;1909-January-22&#34;,&#34;died&#34;:&#34;1974-November-25&#34;,&#34;name&#34;:&#34;U Thant&#34;},{&#34;quoteId&#34;:7,&#34;authorId&#34;:3,&#34;quote&#34;:&#34;Yes, I&#39;m proud to be indigenous. I&#39;m half-Quechua-Huachipaeri from Peru.&#34;,&#34;nationality&#34;:&#34;German&#34;,&#34;profession&#34;:&#34;Actress&#34;,&#34;born&#34;:&#34;1990-February-11&#34;,&#34;name&#34;:&#34;Q&#39;orianka Kilcher&#34;},{&#34;quoteId&#34;:8,&#34;authorId&#34;:1,&#34;quote&#34;:&#34;I stopped wearing jewelry for a couple of reasons. One is because everybody wears jewelry. I outgrew it; I&#39;m getting a little wiser and growing, so... Another reason is because the richest people that I&#39;ve ever met in my life, they&#39;ve never had on jewelry.&#34;,&#34;nationality&#34;:&#34;American&#34;,&#34;profession&#34;:&#34;Musician&#34;,&#34;born&#34;:&#34;1992-October-22&#34;,&#34;name&#34;:&#34;21 Savage&#34;},{&#34;quoteId&#34;:9,&#34;authorId&#34;:4,&#34;quote&#34;:&#34;Wars begin in the minds of men, and in those minds, love and compassion would have built the defenses of peace.&#34;,&#34;profession&#34;:&#34;Statesman&#34;,&#34;born&#34;:&#34;1909-January-22&#34;,&#34;died&#34;:&#34;1974-November-25&#34;,&#34;name&#34;:&#34;U Thant&#34;},{&#34;quoteId&#34;:10,&#34;authorId&#34;:5,&#34;quote&#34;:&#34;When you&#39;re wearing a motorcycle helmet, people don&#39;t know who you are. So I just wander around and, yeah, it&#39;s pretty awesome.&#34;,&#34;nationality&#34;:&#34;American&#34;,&#34;profession&#34;:&#34;Musician&#34;,&#34;name&#34;:&#34;Zac Brown&#34;},{&#34;quoteId&#34;:11,&#34;authorId&#34;:16,&#34;quote&#34;:&#34;The beautiful thing about learning is nobody can take it away from you.&#34;,&#34;nationality&#34;:&#34;American&#34;,&#34;profession&#34;:&#34;Musician&#34;,&#34;born&#34;:&#34;1925-September-16&#34;,&#34;died&#34;:&#34;2015-May-14&#34;,&#34;name&#34;:&#34;B. B. King&#34;},{&#34;quoteId&#34;:12,&#34;authorId&#34;:2,&#34;quote&#34;:&#34;My real name is Joe Kennedy, but if you live in Massachusetts, you can&#39;t sign &#39;Joe Kennedy.&#39; So, back in 1957, I stuck the X on my name to be different from those people in Hyannis Port.&#34;,&#34;nationality&#34;:&#34;American&#34;,&#34;profession&#34;:&#34;Author&#34;,&#34;born&#34;:&#34;1929-August-21&#34;,&#34;name&#34;:&#34;X. J. Kennedy&#34;},{&#34;quoteId&#34;:13,&#34;authorId&#34;:12,&#34;quote&#34;:&#34;As a successful romantic novelist - one of my publishers is Mills u0026 Boon - I create the sort of male heroes that no woman could fail to adore and few real men could hope to emulate.&#34;,&#34;nationality&#34;:&#34;American&#34;,&#34;profession&#34;:&#34;Author&#34;,&#34;born&#34;:&#34;1960&#34;,&#34;name&#34;:&#34;P. C. Cast&#34;},{&#34;quoteId&#34;:14,&#34;authorId&#34;:11,&#34;quote&#34;:&#34;On Monday mornings I am dedicated to the proposition that all men are created jerks.&#34;,&#34;nationality&#34;:&#34;American&#34;,&#34;profession&#34;:&#34;Journalist&#34;,&#34;born&#34;:&#34;1907-December-19&#34;,&#34;died&#34;:&#34;1976-February-24&#34;,&#34;name&#34;:&#34;H. Allen Smith&#34;},{&#34;quoteId&#34;:15,&#34;authorId&#34;:8,&#34;quote&#34;:&#34;All governments are run by liars and nothing they say should be believed.&#34;,&#34;nationality&#34;:&#34;American&#34;,&#34;profession&#34;:&#34;Journalist&#34;,&#34;born&#34;:&#34;1907-December-24&#34;,&#34;died&#34;:&#34;1989-June-18&#34;,&#34;name&#34;:&#34;I. F. Stone&#34;},{&#34;quoteId&#34;:16,&#34;authorId&#34;:10,&#34;quote&#34;:&#34;The people of Somalia just do not have a voice. They are to me the most forgotten people in the world.&#34;,&#34;nationality&#34;:&#34;Somali&#34;,&#34;profession&#34;:&#34;Musician&#34;,&#34;born&#34;:&#34;1978-February-1&#34;,&#34;name&#34;:&#34;K&#39;naan&#34;},{&#34;quoteId&#34;:17,&#34;authorId&#34;:15,&#34;quote&#34;:&#34;Whether you&#39;re a DJ, whether you a rapper, whether you a producer, take it seriously. This is an occupation - you can get paid - don&#39;t expect to blow up overnight, and appreciate when you do get paid any type of money, appreciate it.&#34;,&#34;nationality&#34;:&#34;American&#34;,&#34;profession&#34;:&#34;Musician&#34;,&#34;born&#34;:&#34;1967-November-15&#34;,&#34;name&#34;:&#34;E-40&#34;},{&#34;quoteId&#34;:18,&#34;authorId&#34;:13,&#34;quote&#34;:&#34;I am not a superstar or an ego. I am just the same as I always was: Someone who plays football.&#34;,&#34;nationality&#34;:&#34;French&#34;,&#34;profession&#34;:&#34;Athlete&#34;,&#34;born&#34;:&#34;1991-March-29&#34;,&#34;name&#34;:&#34;N&#39;Golo Kante&#34;},{&#34;quoteId&#34;:19,&#34;authorId&#34;:6,&#34;quote&#34;:&#34;Fencing is a game of living chess, a match where reflexes only work in combination with intent, and mind and body must work together at every moment.&#34;,&#34;nationality&#34;:&#34;American&#34;,&#34;profession&#34;:&#34;Author&#34;,&#34;born&#34;:&#34;1987-July-7&#34;,&#34;name&#34;:&#34;V. E. Schwab&#34;},{&#34;quoteId&#34;:20,&#34;authorId&#34;:9,&#34;quote&#34;:&#34;Have confidence in everything. No matter what it is that you&#39;re doing, know that you can do it better than anyone.&#34;,&#34;nationality&#34;:&#34;American&#34;,&#34;profession&#34;:&#34;Actor&#34;,&#34;born&#34;:&#34;1991-February-24&#34;,&#34;name&#34;:&#34;O&#39;Shea Jackson, Jr.&#34;},{&#34;quoteId&#34;:21,&#34;authorId&#34;:7,&#34;quote&#34;:&#34;I&#39;m originally from New York, and I just have a love affair with that place.&#34;,&#34;nationality&#34;:&#34;American&#34;,&#34;profession&#34;:&#34;Actor&#34;,&#34;born&#34;:&#34;1988-August-19&#34;,&#34;name&#34;:&#34;Y&#39;lan Noel&#34;},{&#34;quoteId&#34;:22,&#34;authorId&#34;:14,&#34;quote&#34;:&#34;It never occurred to me that we would have as grandiose a program as the Marshall Plan, but I felt that we had to do something to save Europe from economic disaster which would encourage the Communist takeover.&#34;,&#34;nationality&#34;:&#34;American&#34;,&#34;profession&#34;:&#34;Politician&#34;,&#34;born&#34;:&#34;1891-November-15&#34;,&#34;died&#34;:&#34;1986-July-26&#34;,&#34;name&#34;:&#34;W. Averell Harriman&#34;},{&#34;quoteId&#34;:23,&#34;authorId&#34;:17,&#34;quote&#34;:&#34;The world continues to offer glittering prizes to those who have stout hearts and sharp swords.&#34;,&#34;nationality&#34;:&#34;British&#34;,&#34;profession&#34;:&#34;Statesman&#34;,&#34;born&#34;:&#34;1872-July-12&#34;,&#34;died&#34;:&#34;1930-September-30&#34;,&#34;name&#34;:&#34;F. E. Smith&#34;},{&#34;quoteId&#34;:24,&#34;authorId&#34;:21,&#34;quote&#34;:&#34;&#39;Bagdad Cafe&#39; was a film that changed many, many people&#39;s lives... how they saw themselves and how they looked at their life situation. I thought I made a little movie. All the mail that I get is about how it changed lives, and that&#39;s wonderful.&#34;,&#34;profession&#34;:&#34;Actress&#34;,&#34;born&#34;:&#34;1952-December-25&#34;,&#34;name&#34;:&#34;C. C. H. Pounder&#34;},{&#34;quoteId&#34;:25,&#34;authorId&#34;:20,&#34;quote&#34;:&#34;You have to believe in yourself, challenge yourself, and push yourself until the very end; that&#39;s the only way you&#39;ll succeed.&#34;,&#34;nationality&#34;:&#34;South Korean&#34;,&#34;profession&#34;:&#34;Musician&#34;,&#34;born&#34;:&#34;1988-August-18&#34;,&#34;name&#34;:&#34;G-Dragon&#34;}] .",
            "url": "https://samarthkalanke.github.io/SamarthKalanke/2022/10/10/Week7Hacks.html",
            "relUrl": "/2022/10/10/Week7Hacks.html",
            "date": " • Oct 10, 2022"
        }
        
    
  
    
        ,"post28": {
            "title": "Python RapidAPI",
            "content": "Python, RapidAPI Terms . APIs and tooling like Jupyter docs allows many opportunities in fields like Data Science. As more and more developers use APIs, they build standards in how you setup a client, send requests and receive information... . Covid19 RapidAPI Example . To begin the API journey. You need to find an API provider. . RapidAPI is a great option. You must setup and account, but there are many free options. | Goto this page for starters, the Corona virus World and India data- Under Code Snippets pick Python - Requests | . RapidAPI, you will select Python Requests type of code to work with you Notebook. . The url is the endpoint to which the API is directed | The headers is a dictionary data structure to send special messaging to the endpoint | The requests.request() python function is used to send a request and retrieve their responses | The response variable receives result of of the request in JSON text | . Next step, is to format the response according to your data science needs . &quot;&quot;&quot; Requests is a HTTP library for the Python programming language. The goal of the project is to make HTTP requests simpler and more human-friendly. &quot;&quot;&quot; import requests &quot;&quot;&quot; RapidAPI is the world&#39;s largest API Marketplace. Developers use Rapid API to discover and connect to thousands of APIs. &quot;&quot;&quot; url = &quot;https://corona-virus-world-and-india-data.p.rapidapi.com/api&quot; headers = { &#39;x-rapidapi-key&#39;: &quot;dec069b877msh0d9d0827664078cp1a18fajsn2afac35ae063&quot;, &#39;x-rapidapi-host&#39;: &quot;corona-virus-world-and-india-data.p.rapidapi.com&quot; } # Request Covid Data response = requests.request(&quot;GET&quot;, url, headers=headers) # print(response.text) # uncomment this line to see raw data # This code looks for &quot;world data&quot; print(&quot;World Totals&quot;) world = response.json().get(&#39;world_total&#39;) # turn response to json() so we can extract &quot;world_total&quot; for key, value in world.items(): # this finds key, value pairs in country print(key, value) print() # This code looks for USA in &quot;countries_stats&quot; print(&quot;Country Totals&quot;) countries = response.json().get(&#39;countries_stat&#39;) for country in countries: # countries is a list if country[&quot;country_name&quot;] == &quot;USA&quot;: # this filters for USA for key, value in country.items(): # this finds key, value pairs in country print(key, value) . World Totals total_cases 509,268,964 new_cases 204,268 total_deaths 6,242,509 new_deaths 630 total_recovered 461,827,849 active_cases 41,198,606 serious_critical 42,510 total_cases_per_1m_population 65,334 deaths_per_1m_population 800.9 statistic_taken_at 2022-04-24 11:18:01 Country Totals country_name USA cases 82,649,779 deaths 1,018,316 region total_recovered 80,434,925 new_deaths 0 new_cases 0 serious_critical 1,465 active_cases 1,196,538 total_cases_per_1m_population 247,080 deaths_per_1m_population 3,044 total_tests 1,000,275,726 tests_per_1m_population 2,990,303 . Digital Coin Example . This example provides digital coin feedback (ie Bitcoin). It include popularity, price, symbols, etc. . A valid X-RapidAPI-Key is required. Look in code for link to RapidAPI page | Read all comments in code for further guidance | . # RapidAPI page https://rapidapi.com/Coinranking/api/coinranking1/ # Begin Rapid API Code import requests url = &quot;https://coinranking1.p.rapidapi.com/coins&quot; querystring = {&quot;referenceCurrencyUuid&quot;:&quot;yhjMzLPhuIDl&quot;,&quot;timePeriod&quot;:&quot;24h&quot;,&quot;tiers[0]&quot;:&quot;1&quot;,&quot;orderBy&quot;:&quot;marketCap&quot;,&quot;orderDirection&quot;:&quot;desc&quot;,&quot;limit&quot;:&quot;50&quot;,&quot;offset&quot;:&quot;0&quot;} headers = { &quot;X-RapidAPI-Key&quot;: &quot;jcmbea0fa2ff5msh7f14bf69be38ca6p175482jsn6c4988114560&quot;, # place your key here &quot;X-RapidAPI-Host&quot;: &quot;coinranking1.p.rapidapi.com&quot; } response = requests.request(&quot;GET&quot;, url, headers=headers, params=querystring) print(response.text) # End Rapid API Code json = response.json() # convert response to python json object # Observe data from an API. This is how data transports over the internet in a &quot;JSON&quot; text form # - The JSON &quot;text&quot; is formed in dictionary {} and list [] divisions # - To read the result, Data Scientist of Developer converts JSON into human readable form # - Review the first line, look for the keys -- &quot;status&quot; and &quot;data&quot; . {&#34;message&#34;:&#34;You are not subscribed to this API.&#34;} . Formatting Digital Coin example . JSON text transferred from the API in the previous cell was converted to a Python Dictionary called json. The &quot;coins&quot; in the dictionary contain a list of the most relevant data. Look at the code and comments to see how the original text is turned into something understandable. Additionally, there are error check to make sure we are starting the code with the expectation that the API was run correctly. . &quot;&quot;&quot; This cell is dependent on valid run of API above. - try and except code is making sure &quot;json&quot; was properly run above - inside second try is code that is used to process Coin API data Note. Run this cell repeatedly to format data without re-activating API &quot;&quot;&quot; try: print(&quot;JSON data is Python type: &quot; + str(type(json))) try: # Extracting Coins JSON status, if the API worked status = json.get(&#39;status&#39;) print(&quot;API status: &quot; + status) print() # Extracting Coins JSON data, data about the coins data = json.get(&#39;data&#39;) # Procedural abstraction of Print code for coins def print_coin(c): print(c[&quot;symbol&quot;], c[&quot;price&quot;]) print(&quot;Icon Url: &quot; + c[&quot;iconUrl&quot;]) print(&quot;Rank Url: &quot; + c[&quot;coinrankingUrl&quot;]) # Coins data was observed to be a list for coin in data[&#39;coins&#39;]: print_coin(coin) print() except: print(&quot;Did you insert a valid key in X-RapidAPI-Key of API cell above?&quot;) print(json) except: print(&quot;This cell is dependent on running API call in cell above!&quot;) . JSON data is Python type: &lt;class &#39;dict&#39;&gt; Did you insert a valid key in X-RapidAPI-Key of API cell above? {&#39;message&#39;: &#39;You are not subscribed to this API.&#39;} . Go deeper into APIs . Web Development vs Jupyter Notebook. A notebook is certainly a great place to start. But, for your end of Trimester project we want you to build the skill to reference and use APIs within your Project. Here are some resources to get you started with this journey. . In the Nighthawk Coders APCSP you can find an Overview and Examples using APIs:APCSP APIs menu- Using Covid RapidAPI JavaScript frontend API code in APCSP Fastpages GitHub repo: https://github.com/nighthawkcoders/APCSP/blob/master/_posts/2022-07-10-PBL-rapidapi.md | . | Making a Jokes API (this will next API tech talk) Frontend. JavaScript frontend code in APCSP fastpages GitHub repo: https://github.com/nighthawkcoders/APCSP/blob/master/_posts/2022-07-10-PBL-jokes.md | Backend Endpoints. Python code that allows Frontend access: https://github.com/nighthawkcoders/flask_portfolio/blob/main/api.py | Backend Jokes Management. Python code that support Create, Read, Update, Delete (CRUD): https://github.com/nighthawkcoders/flask_portfolio/blob/main/model_jokes.py | . | . Hacks . Find and use an API as part of your project. An API and a little coding logic will be a big step toward getting meaningful data for a project. There are many API providers, find one that might work for your project to complete this hack. When picking an API you are looking for something that will work with either JavaScript Fetch or Python Request. Here are some samples, these are not qualified in any way. . RapidAPI- GitHub Project | No Key APIs Article | Twitter Developer | Google Developer | Reddit Developer | . Show API and format results in either Web Page or Jupyter Notebook. Ultimately, I will expect that we do APIs in backend (Python/Flask). However, for this Hack you can pick your preference. We will discuss pros and cons in next API tech talk. .",
            "url": "https://samarthkalanke.github.io/SamarthKalanke/techtalk/rapidapi",
            "relUrl": "/techtalk/rapidapi",
            "date": " • Oct 3, 2022"
        }
        
    
  
    
        ,"post29": {
            "title": "Big Idea 1 'Identifying and Correcting Errors'",
            "content": "College Board Big Idea 1 . Identifying and Correcting Errors (Unit 1.4) . Become familiar with types of errors and strategies to fixing them . Lightly Review Videos and take notes on topics with Blog | Complete assigned MCQ questions | . Here are some code segments you can practice fixing: . alphabet = &quot;abcdefghijklmnopqrstuvwxyz&quot; alphabetList = [] for i in alphabet: alphabetList.append(i) print(alphabetList) . [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;, &#39;f&#39;, &#39;g&#39;, &#39;h&#39;, &#39;i&#39;, &#39;j&#39;, &#39;k&#39;, &#39;l&#39;, &#39;m&#39;, &#39;n&#39;, &#39;o&#39;, &#39;p&#39;, &#39;q&#39;, &#39;r&#39;, &#39;s&#39;, &#39;t&#39;, &#39;u&#39;, &#39;v&#39;, &#39;w&#39;, &#39;x&#39;, &#39;y&#39;, &#39;z&#39;] . The intended outcome is to determine where the letter is in the alphabet using a while loop . What is a good test case to check the current outcome? Why? | Make changes to get the intended outcome. | . letter = input(&quot;What letter would you like to check?&quot;) i = 0 while i &lt; 26: if alphabetList[i] == letter: print(&quot;The letter &quot; + letter + &quot; is the &quot; + str(i) + &quot; letter in the alphabet&quot;) i += 1 . The intended outcome is to determine where the letter is in the alphabet using a for loop . What is a good test case to check the current outcome? Why? | Make changes to get the intended outcome. | . count = 0 letter = input(&quot;What letter would you like to check?&quot;) for i in alphabetList: if i == letter: print(&quot;The letter &quot; + letter + &quot; is the &quot; + str(count+1) + &quot; letter in the alphabet&quot;) count += 1 . This code outputs the even numbers from 0 - 10 using a while loop. . Analyze this code to determine what can be changed to get the outcome to be odd numbers. (Code block below) | . evens = [] i = 1 while i &lt;= 10: evens.append(i) i += 2 print(evens) . [1, 3, 5, 7, 9] . This code should output the odd numbers from 0 - 10 using a while loop. . odds = [] i = 0 while i &lt;= 10: odds.append(i) i += 2 print(odds) . [0, 2, 4, 6, 8, 10] . This code outputs the even numbers from 0 - 10 using a for loop. . Analyze this code to determine what can be changed to get the outcome to be odd numbers. (Code block below) | . numbers = [0,1,2,3,4,5,6,7,8,9,10] evens = [] for i in numbers: if (numbers[i] % 2 == 1): evens.append(numbers[i]) print(evens) . [1, 3, 5, 7, 9] . This code should output the odd numbers from 0 - 10 using a for loop. . numbers = [0,1,2,3,4,5,6,7,8,9,10] odds = [] for i in numbers: if (numbers[i] % 2 == 0): odds.append(numbers[i]) print(odds) . [0, 2, 4, 6, 8, 10] . The intended outcome is printing a number between 1 and 100 once, if it is a multiple of 2 or 5 . What values are outputted incorrectly. Why? | Make changes to get the intended outcome. | . numbers = [] newNumbers = [] i = 1 while i &lt; 100: numbers.append(i) i += 1 for i in numbers: if numbers[i-1] % 5 == 0: newNumbers.append(numbers[i-1]) elif numbers[i-1] % 2 == 0: newNumbers.append(numbers[i-1]) print(newNumbers) . [2, 4, 5, 6, 8, 10, 12, 14, 15, 16, 18, 20, 22, 24, 25, 26, 28, 30, 32, 34, 35, 36, 38, 40, 42, 44, 45, 46, 48, 50, 52, 54, 55, 56, 58, 60, 62, 64, 65, 66, 68, 70, 72, 74, 75, 76, 78, 80, 82, 84, 85, 86, 88, 90, 92, 94, 95, 96, 98] . Challenge . This code segment is at a very early stage of implementation. . What are some ways to (user) error proof this code? | The code should be able to calculate the cost of the meal of the user | . Hint: . write a “single” test describing an expectation of the program of the program | test - input burger, expect output of burger price | run the test, which should fail because the program lacks that feature | write “just enough” code, the simplest possible, to make the test pass | . Then repeat this process until you get program working like you want it to work. . menu = {&quot;burger&quot;: 3.99, &quot;fries&quot;: 1.99, &quot;drink&quot;: 0.99} total = 0 #shows the user the menu and prompts them to select an item print(&quot;Menu&quot;) for k,v in menu.items(): print(k + &quot; $&quot; + str(v)) #why does v have &quot;str&quot; in front of it? #ideally the code should prompt the user multiple times item = input(&quot;Please select an item from the menu&quot;) if item == &quot;burger&quot;: print(&quot;3.99&quot;) elif item == &quot;fries&quot;: print(&quot;1.99&quot;) elif item == &quot;drink&quot;: print(&quot;0.99&quot;) else: print(&quot;you are a idoit you don&#39;t no how to spul&quot;) #code should add the price of the menu items selected by the user . Menu burger $3.99 fries $1.99 drink $0.99 1.99 . Hacks . Now is a good time to think about Testing of your teams final project... . What errors may arise in your project? | What are some test cases that can be used? | Make sure to document any bugs you encounter and how you solved the problem. | What are “single” tests that you will perform on your project? Or, your part of the project? As Hack Design and Test plan action … Divide these “single” tests into Issues for Scrum Board prior to coding. FYI, related tests could be in same Issue by using markdown checkboxes to separate tests. | . | .",
            "url": "https://samarthkalanke.github.io/SamarthKalanke/collegeboard/error",
            "relUrl": "/collegeboard/error",
            "date": " • Oct 3, 2022"
        }
        
    
  
    
        ,"post30": {
            "title": "Table",
            "content": "&lt;!DOCTYPE html&gt; . Home Group Roles-HTML Table . Names Age Sport . Samarth | 16 | Basketball,Volleyball | . AJ | 16 | Nothing | . Paaras | 16 | Tea Drinking | . Houxan | 16 | Nothing | . .",
            "url": "https://samarthkalanke.github.io/SamarthKalanke/2022/09/27/table.html",
            "relUrl": "/2022/09/27/table.html",
            "date": " • Sep 27, 2022"
        }
        
    
  
    
        ,"post31": {
            "title": "NBA quiz",
            "content": "Notes . Design . Purpose . The test that I made was on basic information about the NBA I wanted to make a test that had the variable score and it would keep on getting bigger or smaller based on wether your answer was right I wanted to have every question about the NBA but just the basics of it I used the on event to activate the quiz and change between screens when a button was clicked At the end I wanted the test to tell the score that you got once the button was clicked . Data Abstraction . I got the Data from google I put the questions and the answers in the design tab of code.org . Managing Complexity . I made a score variable that kept track of score and goes down or up based on if they clicked the right answer. If they clicked the right answer it took them to a right answer page and the same thing for if they clicked the wrong answer. At the end I made it so that it will give the percentage of your correct anserwers when a button is clicked on . Algorithim Implemantion . Step 1 Display home page Step 2 When Click to start is pressed then Step 2.1 next quiz question shows with the MC answers Step 2.2 When correct answer is selceted then Step 2.2.1 Correct page is displayed Step 2.2.2 the score variable increases by 1 Step 2.3 else Step 2.3.1 incorrect page is shown Step 2.4 go to step 2.1 and repeat for all 3 questions Step 3 Count of correct answers is shown . Finished Project . NBA quiz . var score = 0; onEvent(&quot;startButton&quot;, &quot;click&quot;, function( ) { console.log(&quot;startbutton clicked&quot;); setScreen(&quot;quiz1&quot;); playSpeech(&quot;Quiz Started&quot;, &quot;male&quot;, &quot;English&quot;); }); onEvent(&quot;correct1&quot;, &quot;click&quot;, function( ) { score = score += 1; setScreen(&quot;CorrectContinue&quot;); onEvent(&quot;Correct&quot;, &quot;click&quot;, function( ) { setScreen(&quot;quiz2&quot;); }); }); onEvent(&quot;incorrect1quiz1&quot;, &quot;click&quot;, function( ) { score = score -= 1; setScreen(&quot;IncorrectContinue&quot;); onEvent(&quot;Incorrect&quot;, &quot;click&quot;, function( ) { setScreen(&quot;quiz2&quot;); }); }); onEvent(&quot;incorrect2quiz1&quot;, &quot;click&quot;, function( ) { score = score -= 1; setScreen(&quot;IncorrectContinue&quot;); onEvent(&quot;Incorrect&quot;, &quot;click&quot;, function( ) { setScreen(&quot;quiz2&quot;); }); }); onEvent(&quot;incorrect3quiz1&quot;, &quot;click&quot;, function( ) { score = score -= 1; setScreen(&quot;IncorrectContinue&quot;); onEvent(&quot;Incorrect&quot;, &quot;click&quot;, function( ) { setScreen(&quot;quiz2&quot;); }); }); onEvent(&quot;correctquiz2&quot;, &quot;click&quot;, function( ) { score = score += 1; setScreen(&quot;CorrectContinue&quot;); onEvent(&quot;Correct&quot;, &quot;click&quot;, function( ) { setScreen(&quot;quiz3&quot;); }); }); onEvent(&quot;incorrect1quiz2&quot;, &quot;click&quot;, function( ) { score = score -= 1; setScreen(&quot;IncorrectContinue&quot;); onEvent(&quot;Incorrect&quot;, &quot;click&quot;, function( ) { setScreen(&quot;quiz3&quot;); }); }); onEvent(&quot;correct3&quot;, &quot;click&quot;, function( ) { score = score += 1; setScreen(&quot;CorrectContinue&quot;); onEvent(&quot;Correct&quot;, &quot;click&quot;, function( ) { setScreen(&quot;finallesui&quot;); }); }); onEvent(&quot;incorrect1quiz3&quot;, &quot;click&quot;, function( ) { score = score -= 1; setScreen(&quot;IncorrectContinue&quot;); onEvent(&quot;Incorrect&quot;, &quot;click&quot;, function( ) { playSound(&quot;sound://default.mp3&quot;, false); setScreen(&quot;finallesui&quot;); }); }); onEvent(&quot;finallesui&quot;, &quot;click&quot;, function( ) { console.log(score); var finalscore = score/3 *100 + &quot;%&quot;; setText(&quot;label&quot;, finalscore); }); onEvent(&quot;label1&quot;, &quot;click&quot;, function( ) { console.log(&quot;label1 clicked!&quot;); }); .",
            "url": "https://samarthkalanke.github.io/SamarthKalanke/2022/09/27/javaproof.html",
            "relUrl": "/2022/09/27/javaproof.html",
            "date": " • Sep 27, 2022"
        }
        
    
  
    
        ,"post32": {
            "title": "Notes for Yale Video",
            "content": "Video notes and Vocab . Enerprise: A project that is difficult and requires effort Our life circumstances don’t matter as much as we think Intuitions: We can understand things without conscious reasoning Taking care of happines doesn’t work without putting practices to work GI Joe Fantasy: Simply knowing about a bias is enough to pu tthe idea into practice The mind mugs up about what it means to be happy. It often lies Happy people make time for connections Sleeping is good Savoring the moment is often better Affluence: The state of having a great deal of money Be affluent in time Happy people prioritize time over money . List of Gratitude . People I am greatful for My family My friends Andrew Tate . Goals Get all As Do all my things outside of school well Pursue any hobbies that I have . Not of Gratitue: . I am grateful for my team in CSP. Paaras, Houshin, and AJ are all really smart people and I enjoy working with them. .",
            "url": "https://samarthkalanke.github.io/SamarthKalanke/notes/2022/09/21/Yale-Vidnotes.html",
            "relUrl": "/notes/2022/09/21/Yale-Vidnotes.html",
            "date": " • Sep 21, 2022"
        }
        
    
  
    
        ,"post33": {
            "title": "Notes for AP Classroom",
            "content": "Video 1.1 Pt1 Notes . Companies use collaboration for inovation and this shows parts of every collaborator Inovations can be tangible or intangible Collaboration that has multiple people waters down bias Effective collaboration prduces a computing innoavation the reflecst the diversity of talents . Video 1.1 Pt2 Notes . Pair Programming a way that every person has a job and a certain role Think-pair-share A methode that breaks everyones thinking down to make the job easier Leave Comments Allows everyone to know each others flaw .",
            "url": "https://samarthkalanke.github.io/SamarthKalanke/notes/2022/09/21/Notes-for-AP-Classroom.html",
            "relUrl": "/notes/2022/09/21/Notes-for-AP-Classroom.html",
            "date": " • Sep 21, 2022"
        }
        
    
  
    
        ,"post34": {
            "title": "NBA quiz",
            "content": "Notes . Design . Purpose . The test that I made was on basic information about the NBA I wanted to make a test that had the variable score and it would keep on getting bigger or smaller based on wether your answer was right I wanted to have every question about the NBA but just the basics of it I used the on event to activate the quiz and change between screens when a button was clicked At the end I wanted the test to tell the score that you got once the button was clicked . Data Abstraction . I got the Data from google I put the questions and the answers in the design tab of code.org . Managing Complexity . I made a score variable that kept track of score and goes down or up based on if they clicked the right answer. If they clicked the right answer it took them to a right answer page and the same thing for if they clicked the wrong answer. At the end I made it so that it will give the percentage of your correct anserwers when a button is clicked on . Algorithim Implemantion . Step 1 Display home page Step 2 When Click to start is pressed then Step 2.1 next quiz question shows with the MC answers Step 2.2 When correct answer is selceted then Step 2.2.1 Correct page is displayed Step 2.2.2 the score variable increases by 1 Step 2.3 else Step 2.3.1 incorrect page is shown Step 2.4 go to step 2.1 and repeat for all 3 questions Step 3 Count of correct answers is shown . Finished Project . NBA quiz .",
            "url": "https://samarthkalanke.github.io/SamarthKalanke/quiz/2022/09/14/design-for-project.html",
            "relUrl": "/quiz/2022/09/14/design-for-project.html",
            "date": " • Sep 14, 2022"
        }
        
    
  
    
        ,"post35": {
            "title": "Schedule",
            "content": "Introduction to Samarth’s Schedule . This is the first 3 weeks of my schedule for APCSP. . 2 | Data Abstraction | Me and my partner did more in the seperate languages in. | . 1 | Introduction to Python | We made a quiz in Python and used Bash for the tool check as well. | . 0 | Tool Setup | We installed Anaconda, python, vscode and WSl. | .",
            "url": "https://samarthkalanke.github.io/SamarthKalanke/schedule",
            "relUrl": "/schedule",
            "date": " • Sep 3, 2022"
        }
        
    
  
    
        ,"post36": {
            "title": "my theme changes",
            "content": "This is my theme change. .",
            "url": "https://samarthkalanke.github.io/SamarthKalanke/hacks/2022/09/03/themechangepic.html",
            "relUrl": "/hacks/2022/09/03/themechangepic.html",
            "date": " • Sep 3, 2022"
        }
        
    
  
    
        ,"post37": {
            "title": "Week 2 hacks",
            "content": "myDict = [] myDict.append({ &quot;FirstName&quot;: &quot;Samarth&quot;, &quot;LastNameInitial&quot;: &quot;K.&quot;, &quot;DOB&quot;: &quot;October 19&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Family Members&quot;: &quot;4&quot;, &quot;Age&quot;: &quot;15&quot; }) myDict.append({ &quot;FirstName&quot;: &quot;Paaras&quot;, &quot;LastNameInitial&quot;: &quot;P.&quot;, &quot;DOB&quot;: &quot;June 9&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Family Members&quot;: &quot;1&quot;, &quot;Age&quot;: &quot;15&quot; }) . [{&#39;FirstName&#39;: &#39;Samarth&#39;, &#39;LastNameInitial&#39;: &#39;K.&#39;, &#39;DOB&#39;: &#39;October 19&#39;, &#39;Residence&#39;: &#39;San Diego&#39;, &#39;Family Members&#39;: &#39;4&#39;, &#39;Age&#39;: &#39;15&#39;}, {&#39;FirstName&#39;: &#39;Paaras&#39;, &#39;LastNameInitial&#39;: &#39;P.&#39;, &#39;DOB&#39;: &#39;June 9&#39;, &#39;Residence&#39;: &#39;San Diego&#39;, &#39;Family Members&#39;: &#39;1&#39;, &#39;Age&#39;: &#39;15&#39;}] Looped data below Samarth K. DOB: October 19 Residence: San Diego Family Members: 4 Age: 15 Paaras P. DOB: June 9 Residence: San Diego Family Members: 1 Age: 15 . myDict = [] myDict.append({ &quot;FirstName&quot;: &quot;Samarth&quot;, &quot;LastNameInitial&quot;: &quot;K.&quot;, &quot;DOB&quot;: &quot;October 19&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Family Members&quot;: &quot;4&quot;, &quot;Age&quot;: &quot;15&quot; }) myDict.append({ &quot;FirstName&quot;: &quot;Paaras&quot;, &quot;LastNameInitial&quot;: &quot;P.&quot;, &quot;DOB&quot;: &quot;June 9&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Family Members&quot;: &quot;1&quot;, &quot;Age&quot;: &quot;15&quot; }) for i in range(len(myDict)): print(myDict[i-1]) . {&#39;FirstName&#39;: &#39;Paaras&#39;, &#39;LastNameInitial&#39;: &#39;P.&#39;, &#39;DOB&#39;: &#39;June 9&#39;, &#39;Residence&#39;: &#39;San Diego&#39;, &#39;Family Members&#39;: &#39;1&#39;, &#39;Age&#39;: &#39;15&#39;} {&#39;FirstName&#39;: &#39;Samarth&#39;, &#39;LastNameInitial&#39;: &#39;K.&#39;, &#39;DOB&#39;: &#39;October 19&#39;, &#39;Residence&#39;: &#39;San Diego&#39;, &#39;Family Members&#39;: &#39;4&#39;, &#39;Age&#39;: &#39;15&#39;} . dictionary = ({ &quot;What is 1+1 &quot;: &quot;5&quot;, &quot;What is the meaning of life &quot;: &quot;420&quot;, &quot;What is happiness &quot;: &quot;nonexistent&quot;, }) score = 0 for key,value in dictionary.items(): questions = input(f&quot;{key}&quot;) if questions == value: print(&quot;Correct&quot;) score += 1 else: print(&quot;Incorrect&quot;) print(score) . Correct Correct Correct 3 .",
            "url": "https://samarthkalanke.github.io/SamarthKalanke/fastpages/2022/09/03/dictionarytest.html",
            "relUrl": "/fastpages/2022/09/03/dictionarytest.html",
            "date": " • Sep 3, 2022"
        }
        
    
  
    
        ,"post38": {
            "title": "Title",
            "content": ". toc: true layout: post description: A minimal example of using markdown with fastpages. categories: [markdown] . title: basketball quiz . Basketball Quiz . from http.client import GATEWAY_TIMEOUT points= 0 answer = input(&quot;What does NBA stand for? &quot;) print(answer) if answer == &quot;National Basketball Association&quot;: print (&quot;nice job that&#39;s correct&quot;) points += 1 else: print (&quot;sorry that&#39;s incorrect&quot;) points -= 0 answer = input(&quot;Who is the NBA&#39;s commisioner? &quot;) print(answer) if answer == &quot;Adam Silver&quot;: print (&quot;nice job that&#39;s correct&quot;) points += 1 else: print (&quot;sorry that&#39;s incorrect&quot;) points -= 0 answer = input(&quot;What is the WNBA&quot;) print(answer) if answer == &quot;irrelevant&quot;: print (&quot;nice job that&#39;s correct&quot;) points += 1 else: print (&quot;sorry that&#39;s incorrec&quot;) points -= 0 . National basketball Association sorry that&#39;s incorrect Adam Silver nice job that&#39;s correct Irrelavent sorry that&#39;s incorrect .",
            "url": "https://samarthkalanke.github.io/SamarthKalanke/2022/08/30/quizzes.html",
            "relUrl": "/2022/08/30/quizzes.html",
            "date": " • Aug 30, 2022"
        }
        
    
  
    
        ,"post39": {
            "title": "Other Classwork",
            "content": "This is my myconnect for AP Chemistry https://poway.instructure.com/courses/126331 . This is my myconnect for AP Calculus https://poway.instructure.com/courses/126842 .",
            "url": "https://samarthkalanke.github.io/SamarthKalanke/markdown/2022/08/29/Otherclasswork.html",
            "relUrl": "/markdown/2022/08/29/Otherclasswork.html",
            "date": " • Aug 29, 2022"
        }
        
    
  
    
        ,"post40": {
            "title": "Zapost1",
            "content": "Killua Zolldyck HunterXHunter . He is a 11 year old assain with lightning abilites and an overpowered family . .",
            "url": "https://samarthkalanke.github.io/SamarthKalanke/2022/08/26/zapost1.html",
            "relUrl": "/2022/08/26/zapost1.html",
            "date": " • Aug 26, 2022"
        }
        
    
  
    
        ,"post41": {
            "title": "Title",
            "content": "print(&quot;hello there&quot;) . hello there . print(&quot;hello there&quot;) . hello there .",
            "url": "https://samarthkalanke.github.io/SamarthKalanke/2022/08/23/blogpost1.html",
            "relUrl": "/2022/08/23/blogpost1.html",
            "date": " • Aug 23, 2022"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "CSP notes",
          "content": "What I’ve learned so far: I have learned a little bit about fastpages . Notes: Print: Function used to output a string into a terminal Def: Used to create functions that can do anything import: Used to import a variety of python libraries. .",
          "url": "https://samarthkalanke.github.io/SamarthKalanke/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  
      ,"page2": {
          "title": "Submenu",
          "content": "&lt;!DOCTYPE html&gt; . . Home Javascript Post Home Javascript Post Notebook .",
          "url": "https://samarthkalanke.github.io/SamarthKalanke/_pages/Submenu.html",
          "relUrl": "/_pages/Submenu.html",
          "date": ""
      }
      
  

  
      ,"page3": {
          "title": "About Samarth",
          "content": "Samarth is a student in APCSP trying to learns the ins and outs of a computer Samarth Kalanke 1. . Someone who wants to learn and grow in this field who wants to create an amazing foundation. &#8617; . |",
          "url": "https://samarthkalanke.github.io/SamarthKalanke/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  

  

  
  

  
      ,"page15": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://samarthkalanke.github.io/SamarthKalanke/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}